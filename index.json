{
  "matrices": [
    {
      "title": "Verify Credential - Data Integrity",
      "ctx": null,
      "suites": [
        {
          "title": "ACA-py",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC.",
              "body": "async function() {\n        // this tells the test report which cell in the interop matrix\n        // the result goes in\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({vc: validVc});\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error);\n        should.exist(result);\n        should.exist(result.status);\n        result.status.should.equal(200);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "xyAxUNuWs_-Vln5b9O5Vx",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noContextVc = klona(validVc);\n          delete noContextVc['@context'];\n          const body = createRequestBody({vc: noContextVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "xyAxUNuWs_-Vln5b9O5Vx",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noTypeVc = klona(validVc);\n        delete noTypeVc.type;\n        const body = createRequestBody({vc: noTypeVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "xyAxUNuWs_-Vln5b9O5Vx",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noIssuerVc = klona(validVc);\n        delete noIssuerVc.issuer;\n        const body = createRequestBody({vc: noIssuerVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "xyAxUNuWs_-Vln5b9O5Vx",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noCredentialSubjectVc = klona(validVc);\n          delete noCredentialSubjectVc.credentialSubject;\n          const body = createRequestBody({vc: noCredentialSubjectVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "xyAxUNuWs_-Vln5b9O5Vx",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noProofVc = klona(validVc);\n        delete noProofVc.proof;\n        const body = createRequestBody({vc: noProofVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "xyAxUNuWs_-Vln5b9O5Vx",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.type\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofTypeVc = klona(validVc);\n          delete noProofTypeVc.proof.type;\n          const body = createRequestBody({vc: noProofTypeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "xyAxUNuWs_-Vln5b9O5Vx",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.created\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofCreatedVc = klona(validVc);\n          delete noProofCreatedVc.proof.created;\n          const body = createRequestBody({vc: noProofCreatedVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "xyAxUNuWs_-Vln5b9O5Vx",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.verificationMethod\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofVerificationMethodVc = klona(validVc);\n          delete noProofVerificationMethodVc.proof.verificationMethod;\n          const body = createRequestBody({vc: noProofVerificationMethodVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "xyAxUNuWs_-Vln5b9O5Vx",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofValue\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofValueVc = klona(validVc);\n          delete noProofValueVc.proof.proofValue;\n          const body = createRequestBody({vc: noProofValueVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "xyAxUNuWs_-Vln5b9O5Vx",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofPurpose\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofPurposeVc = klona(validVc);\n          delete noProofPurposeVc.proof.proofPurpose;\n          const body = createRequestBody({vc: noProofPurposeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "xyAxUNuWs_-Vln5b9O5Vx",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidContextTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidContextType of invalidContextTypes) {\n          copyVc['@context'] = invalidContextType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "xyAxUNuWs_-Vln5b9O5Vx",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" items are not strings.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidContextItemTypes = [[], {}, null, undefined, 10, true];\n          for(const invalidContextItemType of invalidContextItemTypes) {\n            copyVc['@context'] = [invalidContextItemType];\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "xyAxUNuWs_-Vln5b9O5Vx",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidType of invalidTypes) {\n          copyVc.type = invalidType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "xyAxUNuWs_-Vln5b9O5Vx",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" items are not strings.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypeItemTypes = [[], {}, null, undefined, 10, true];\n        for(const invalidItemType of invalidTypeItemTypes) {\n          copyVc.type = [invalidItemType];\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "xyAxUNuWs_-Vln5b9O5Vx",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" is not an object or a string.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidIssuerTypes = [[], null, undefined, 10, true];\n          for(const invalidIssuerType of invalidIssuerTypes) {\n            copyVc.issuer = invalidIssuerType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "xyAxUNuWs_-Vln5b9O5Vx",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" is not an object.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidCredentialSubjectTypes = [\n            'string', null, undefined, 10, true, []\n          ];\n          for(const invalidType of invalidCredentialSubjectTypes) {\n            copyVc.credentialSubject = invalidType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "xyAxUNuWs_-Vln5b9O5Vx",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" is not an object.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidProofTypes = ['string', null, undefined, 10, true, []];\n        for(const invalidProofType of invalidProofTypes) {\n          copyVc.proof = invalidProofType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "xyAxUNuWs_-Vln5b9O5Vx",
              "ctx": null
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook for \"MUST verify a valid VC.\"",
              "body": "async function() {\n        const issuer = matchingIssuers.get(issuerName).issuers.find(\n          issuer => issuer.tags.has('vc-api'));\n        validVc = await createInitialVc({issuer});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "xyAxUNuWs_-Vln5b9O5Vx",
              "ctx": null,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 290,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 314,
              "_error": null,
              "state": "failed",
              "err": {
                "response": {},
                "request": {},
                "options": {
                  "credentials": "same-origin",
                  "headers": {},
                  "method": "POST",
                  "json": {
                    "credential": {
                      "@context": [
                        "https://www.w3.org/2018/credentials/v1",
                        "https://w3id.org/security/suites/ed25519-2020/v1"
                      ],
                      "type": [
                        "VerifiableCredential"
                      ],
                      "credentialSubject": {
                        "id": "did:key:z6MkhTNL7i2etLerDK8Acz5t528giE5KA4p75T6ka1E1D74r"
                      },
                      "id": "urn:uuid:8a3258c6-3ff7-4c81-bcd8-4eb009712360",
                      "issuer": "https://issuer.qa.veres.app/issuers/z1AEwLo7tZ3TrsPgRcgLJqQvR"
                    }
                  },
                  "agent": {
                    "_events": {},
                    "_eventsCount": 2,
                    "defaultPort": 443,
                    "protocol": "https:",
                    "options": {
                      "rejectUnauthorized": false,
                      "noDelay": true,
                      "path": null
                    },
                    "requests": {},
                    "sockets": {},
                    "freeSockets": {},
                    "keepAliveMsecs": 1000,
                    "keepAlive": false,
                    "maxSockets": null,
                    "maxFreeSockets": 256,
                    "scheduling": "lifo",
                    "maxTotalSockets": null,
                    "totalSocketCount": 0,
                    "maxCachedSessions": 100,
                    "_sessionCache": {
                      "map": {},
                      "list": []
                    }
                  },
                  "hooks": {
                    "beforeRequest": [],
                    "beforeRetry": [],
                    "beforeError": [],
                    "afterResponse": []
                  },
                  "prefixUrl": "",
                  "retry": {
                    "limit": 2,
                    "methods": [
                      "get",
                      "put",
                      "head",
                      "delete",
                      "options",
                      "trace"
                    ],
                    "statusCodes": [
                      408,
                      413,
                      429,
                      500,
                      502,
                      503,
                      504
                    ],
                    "afterStatusCodes": [
                      413,
                      429,
                      503
                    ],
                    "maxRetryAfter": null,
                    "backoffLimit": null
                  },
                  "throwHttpErrors": true,
                  "timeout": 10000,
                  "signal": {},
                  "duplex": "half",
                  "body": "{\"credential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/suites/ed25519-2020/v1\"],\"type\":[\"VerifiableCredential\"],\"credentialSubject\":{\"id\":\"did:key:z6MkhTNL7i2etLerDK8Acz5t528giE5KA4p75T6ka1E1D74r\"},\"id\":\"urn:uuid:8a3258c6-3ff7-4c81-bcd8-4eb009712360\",\"issuer\":\"https://issuer.qa.veres.app/issuers/z1AEwLo7tZ3TrsPgRcgLJqQvR\"}}"
                },
                "name": "HTTPError",
                "requestUrl": "https://issuer.qa.veres.app/issuers/z1AEwLo7tZ3TrsPgRcgLJqQvR/credentials/issue",
                "status": 403,
                "data": {
                  "name": "NotAllowedError",
                  "message": "Authorization error.",
                  "details": {
                    "httpStatusCode": 403
                  },
                  "cause": {
                    "name": "Error",
                    "message": "The invoked capability has expired.",
                    "details": {},
                    "cause": {
                      "message": "An unspecified error occurred.",
                      "name": "OperationError",
                      "type": "OperationError"
                    },
                    "stack": "Error: The invoked capability has expired.\n    at onError (file:///home/node/app/node_modules/@bedrock/service-core/lib/http/middleware.js:188:13)\n    at Module.handleError (file:///home/node/app/node_modules/@digitalbazaar/ezcap-express/lib/helpers.js:145:12)\n    at file:///home/node/app/node_modules/@digitalbazaar/ezcap-express/lib/authorize.js:137:15\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                    "type": "Error"
                  },
                  "stack": "NotAllowedError: Authorization error.\n    at onError (file:///home/node/app/node_modules/@bedrock/service-core/lib/http/middleware.js:195:9)\n    at Module.handleError (file:///home/node/app/node_modules/@digitalbazaar/ezcap-express/lib/helpers.js:145:12)\n    at file:///home/node/app/node_modules/@digitalbazaar/ezcap-express/lib/authorize.js:137:15\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                  "type": "NotAllowedError"
                }
              }
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "eP5A8nKf31Au3fuEytsgu",
          "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
          "_testId": "urn:uuid:471439ac-8cf3-45ea-b6a8-112b1a1758b5"
        },
        {
          "title": "apicatalog.com",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC.",
              "body": "async function() {\n        // this tells the test report which cell in the interop matrix\n        // the result goes in\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({vc: validVc});\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error);\n        should.exist(result);\n        should.exist(result.status);\n        result.status.should.equal(200);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "6ozBTyIe3Hj53nkv0N16h",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noContextVc = klona(validVc);\n          delete noContextVc['@context'];\n          const body = createRequestBody({vc: noContextVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "6ozBTyIe3Hj53nkv0N16h",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noTypeVc = klona(validVc);\n        delete noTypeVc.type;\n        const body = createRequestBody({vc: noTypeVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "6ozBTyIe3Hj53nkv0N16h",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noIssuerVc = klona(validVc);\n        delete noIssuerVc.issuer;\n        const body = createRequestBody({vc: noIssuerVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "6ozBTyIe3Hj53nkv0N16h",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noCredentialSubjectVc = klona(validVc);\n          delete noCredentialSubjectVc.credentialSubject;\n          const body = createRequestBody({vc: noCredentialSubjectVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "6ozBTyIe3Hj53nkv0N16h",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noProofVc = klona(validVc);\n        delete noProofVc.proof;\n        const body = createRequestBody({vc: noProofVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "6ozBTyIe3Hj53nkv0N16h",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.type\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofTypeVc = klona(validVc);\n          delete noProofTypeVc.proof.type;\n          const body = createRequestBody({vc: noProofTypeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "6ozBTyIe3Hj53nkv0N16h",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.created\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofCreatedVc = klona(validVc);\n          delete noProofCreatedVc.proof.created;\n          const body = createRequestBody({vc: noProofCreatedVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "6ozBTyIe3Hj53nkv0N16h",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.verificationMethod\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofVerificationMethodVc = klona(validVc);\n          delete noProofVerificationMethodVc.proof.verificationMethod;\n          const body = createRequestBody({vc: noProofVerificationMethodVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "6ozBTyIe3Hj53nkv0N16h",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofValue\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofValueVc = klona(validVc);\n          delete noProofValueVc.proof.proofValue;\n          const body = createRequestBody({vc: noProofValueVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "6ozBTyIe3Hj53nkv0N16h",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofPurpose\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofPurposeVc = klona(validVc);\n          delete noProofPurposeVc.proof.proofPurpose;\n          const body = createRequestBody({vc: noProofPurposeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "6ozBTyIe3Hj53nkv0N16h",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidContextTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidContextType of invalidContextTypes) {\n          copyVc['@context'] = invalidContextType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "6ozBTyIe3Hj53nkv0N16h",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" items are not strings.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidContextItemTypes = [[], {}, null, undefined, 10, true];\n          for(const invalidContextItemType of invalidContextItemTypes) {\n            copyVc['@context'] = [invalidContextItemType];\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "6ozBTyIe3Hj53nkv0N16h",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidType of invalidTypes) {\n          copyVc.type = invalidType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "6ozBTyIe3Hj53nkv0N16h",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" items are not strings.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypeItemTypes = [[], {}, null, undefined, 10, true];\n        for(const invalidItemType of invalidTypeItemTypes) {\n          copyVc.type = [invalidItemType];\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "6ozBTyIe3Hj53nkv0N16h",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" is not an object or a string.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidIssuerTypes = [[], null, undefined, 10, true];\n          for(const invalidIssuerType of invalidIssuerTypes) {\n            copyVc.issuer = invalidIssuerType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "6ozBTyIe3Hj53nkv0N16h",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" is not an object.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidCredentialSubjectTypes = [\n            'string', null, undefined, 10, true, []\n          ];\n          for(const invalidType of invalidCredentialSubjectTypes) {\n            copyVc.credentialSubject = invalidType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "6ozBTyIe3Hj53nkv0N16h",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" is not an object.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidProofTypes = ['string', null, undefined, 10, true, []];\n        for(const invalidProofType of invalidProofTypes) {\n          copyVc.proof = invalidProofType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "6ozBTyIe3Hj53nkv0N16h",
              "ctx": null
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook for \"MUST verify a valid VC.\"",
              "body": "async function() {\n        const issuer = matchingIssuers.get(issuerName).issuers.find(\n          issuer => issuer.tags.has('vc-api'));\n        validVc = await createInitialVc({issuer});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "6ozBTyIe3Hj53nkv0N16h",
              "ctx": null,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 609,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 113,
              "_error": null,
              "state": "failed",
              "err": {
                "response": {},
                "request": {},
                "options": {
                  "credentials": "same-origin",
                  "headers": {},
                  "method": "POST",
                  "json": {
                    "credential": {
                      "@context": [
                        "https://www.w3.org/2018/credentials/v1",
                        "https://w3id.org/security/suites/ed25519-2020/v1"
                      ],
                      "type": [
                        "VerifiableCredential"
                      ],
                      "credentialSubject": {
                        "id": "did:key:z6MkhTNL7i2etLerDK8Acz5t528giE5KA4p75T6ka1E1D74r"
                      },
                      "id": "urn:uuid:5f5f3341-e646-47b7-978d-5da0709291fb",
                      "issuer": "https://issuer.qa.veres.app/issuers/z1AEwLo7tZ3TrsPgRcgLJqQvR"
                    }
                  },
                  "agent": {
                    "_events": {},
                    "_eventsCount": 2,
                    "defaultPort": 443,
                    "protocol": "https:",
                    "options": {
                      "rejectUnauthorized": false,
                      "noDelay": true,
                      "path": null
                    },
                    "requests": {},
                    "sockets": {},
                    "freeSockets": {},
                    "keepAliveMsecs": 1000,
                    "keepAlive": false,
                    "maxSockets": null,
                    "maxFreeSockets": 256,
                    "scheduling": "lifo",
                    "maxTotalSockets": null,
                    "totalSocketCount": 0,
                    "maxCachedSessions": 100,
                    "_sessionCache": {
                      "map": {},
                      "list": []
                    }
                  },
                  "hooks": {
                    "beforeRequest": [],
                    "beforeRetry": [],
                    "beforeError": [],
                    "afterResponse": []
                  },
                  "prefixUrl": "",
                  "retry": {
                    "limit": 2,
                    "methods": [
                      "get",
                      "put",
                      "head",
                      "delete",
                      "options",
                      "trace"
                    ],
                    "statusCodes": [
                      408,
                      413,
                      429,
                      500,
                      502,
                      503,
                      504
                    ],
                    "afterStatusCodes": [
                      413,
                      429,
                      503
                    ],
                    "maxRetryAfter": null,
                    "backoffLimit": null
                  },
                  "throwHttpErrors": true,
                  "timeout": 10000,
                  "signal": {},
                  "duplex": "half",
                  "body": "{\"credential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/suites/ed25519-2020/v1\"],\"type\":[\"VerifiableCredential\"],\"credentialSubject\":{\"id\":\"did:key:z6MkhTNL7i2etLerDK8Acz5t528giE5KA4p75T6ka1E1D74r\"},\"id\":\"urn:uuid:5f5f3341-e646-47b7-978d-5da0709291fb\",\"issuer\":\"https://issuer.qa.veres.app/issuers/z1AEwLo7tZ3TrsPgRcgLJqQvR\"}}"
                },
                "name": "HTTPError",
                "requestUrl": "https://issuer.qa.veres.app/issuers/z1AEwLo7tZ3TrsPgRcgLJqQvR/credentials/issue",
                "status": 403,
                "data": {
                  "name": "NotAllowedError",
                  "message": "Authorization error.",
                  "details": {
                    "httpStatusCode": 403
                  },
                  "cause": {
                    "name": "Error",
                    "message": "The invoked capability has expired.",
                    "details": {},
                    "cause": {
                      "message": "An unspecified error occurred.",
                      "name": "OperationError",
                      "type": "OperationError"
                    },
                    "stack": "Error: The invoked capability has expired.\n    at onError (file:///home/node/app/node_modules/@bedrock/service-core/lib/http/middleware.js:188:13)\n    at Module.handleError (file:///home/node/app/node_modules/@digitalbazaar/ezcap-express/lib/helpers.js:145:12)\n    at file:///home/node/app/node_modules/@digitalbazaar/ezcap-express/lib/authorize.js:137:15\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                    "type": "Error"
                  },
                  "stack": "NotAllowedError: Authorization error.\n    at onError (file:///home/node/app/node_modules/@bedrock/service-core/lib/http/middleware.js:195:9)\n    at Module.handleError (file:///home/node/app/node_modules/@digitalbazaar/ezcap-express/lib/helpers.js:145:12)\n    at file:///home/node/app/node_modules/@digitalbazaar/ezcap-express/lib/authorize.js:137:15\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                  "type": "NotAllowedError"
                }
              }
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "eP5A8nKf31Au3fuEytsgu",
          "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
          "_testId": "urn:uuid:8601f912-80a6-4104-8800-639e052d313c"
        },
        {
          "title": "Danube Tech",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC.",
              "body": "async function() {\n        // this tells the test report which cell in the interop matrix\n        // the result goes in\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({vc: validVc});\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error);\n        should.exist(result);\n        should.exist(result.status);\n        result.status.should.equal(200);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "0AkdkQ71TkyH-lAKXR9Yv",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noContextVc = klona(validVc);\n          delete noContextVc['@context'];\n          const body = createRequestBody({vc: noContextVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "0AkdkQ71TkyH-lAKXR9Yv",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noTypeVc = klona(validVc);\n        delete noTypeVc.type;\n        const body = createRequestBody({vc: noTypeVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "0AkdkQ71TkyH-lAKXR9Yv",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noIssuerVc = klona(validVc);\n        delete noIssuerVc.issuer;\n        const body = createRequestBody({vc: noIssuerVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "0AkdkQ71TkyH-lAKXR9Yv",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noCredentialSubjectVc = klona(validVc);\n          delete noCredentialSubjectVc.credentialSubject;\n          const body = createRequestBody({vc: noCredentialSubjectVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "0AkdkQ71TkyH-lAKXR9Yv",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noProofVc = klona(validVc);\n        delete noProofVc.proof;\n        const body = createRequestBody({vc: noProofVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "0AkdkQ71TkyH-lAKXR9Yv",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.type\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofTypeVc = klona(validVc);\n          delete noProofTypeVc.proof.type;\n          const body = createRequestBody({vc: noProofTypeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "0AkdkQ71TkyH-lAKXR9Yv",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.created\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofCreatedVc = klona(validVc);\n          delete noProofCreatedVc.proof.created;\n          const body = createRequestBody({vc: noProofCreatedVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "0AkdkQ71TkyH-lAKXR9Yv",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.verificationMethod\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofVerificationMethodVc = klona(validVc);\n          delete noProofVerificationMethodVc.proof.verificationMethod;\n          const body = createRequestBody({vc: noProofVerificationMethodVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "0AkdkQ71TkyH-lAKXR9Yv",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofValue\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofValueVc = klona(validVc);\n          delete noProofValueVc.proof.proofValue;\n          const body = createRequestBody({vc: noProofValueVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "0AkdkQ71TkyH-lAKXR9Yv",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofPurpose\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofPurposeVc = klona(validVc);\n          delete noProofPurposeVc.proof.proofPurpose;\n          const body = createRequestBody({vc: noProofPurposeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "0AkdkQ71TkyH-lAKXR9Yv",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidContextTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidContextType of invalidContextTypes) {\n          copyVc['@context'] = invalidContextType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "0AkdkQ71TkyH-lAKXR9Yv",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" items are not strings.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidContextItemTypes = [[], {}, null, undefined, 10, true];\n          for(const invalidContextItemType of invalidContextItemTypes) {\n            copyVc['@context'] = [invalidContextItemType];\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "0AkdkQ71TkyH-lAKXR9Yv",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidType of invalidTypes) {\n          copyVc.type = invalidType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "0AkdkQ71TkyH-lAKXR9Yv",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" items are not strings.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypeItemTypes = [[], {}, null, undefined, 10, true];\n        for(const invalidItemType of invalidTypeItemTypes) {\n          copyVc.type = [invalidItemType];\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "0AkdkQ71TkyH-lAKXR9Yv",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" is not an object or a string.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidIssuerTypes = [[], null, undefined, 10, true];\n          for(const invalidIssuerType of invalidIssuerTypes) {\n            copyVc.issuer = invalidIssuerType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "0AkdkQ71TkyH-lAKXR9Yv",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" is not an object.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidCredentialSubjectTypes = [\n            'string', null, undefined, 10, true, []\n          ];\n          for(const invalidType of invalidCredentialSubjectTypes) {\n            copyVc.credentialSubject = invalidType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "0AkdkQ71TkyH-lAKXR9Yv",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" is not an object.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidProofTypes = ['string', null, undefined, 10, true, []];\n        for(const invalidProofType of invalidProofTypes) {\n          copyVc.proof = invalidProofType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "0AkdkQ71TkyH-lAKXR9Yv",
              "ctx": null
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook for \"MUST verify a valid VC.\"",
              "body": "async function() {\n        const issuer = matchingIssuers.get(issuerName).issuers.find(\n          issuer => issuer.tags.has('vc-api'));\n        validVc = await createInitialVc({issuer});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "0AkdkQ71TkyH-lAKXR9Yv",
              "ctx": null,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 723,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 60,
              "_error": null,
              "state": "failed",
              "err": {
                "response": {},
                "request": {},
                "options": {
                  "credentials": "same-origin",
                  "headers": {},
                  "method": "POST",
                  "json": {
                    "credential": {
                      "@context": [
                        "https://www.w3.org/2018/credentials/v1",
                        "https://w3id.org/security/suites/ed25519-2020/v1"
                      ],
                      "type": [
                        "VerifiableCredential"
                      ],
                      "credentialSubject": {
                        "id": "did:key:z6MkhTNL7i2etLerDK8Acz5t528giE5KA4p75T6ka1E1D74r"
                      },
                      "id": "urn:uuid:bd9bb391-78f5-45d5-8ff3-64ea5df561e0",
                      "issuer": "https://issuer.qa.veres.app/issuers/z1AEwLo7tZ3TrsPgRcgLJqQvR"
                    }
                  },
                  "agent": {
                    "_events": {},
                    "_eventsCount": 2,
                    "defaultPort": 443,
                    "protocol": "https:",
                    "options": {
                      "rejectUnauthorized": false,
                      "noDelay": true,
                      "path": null
                    },
                    "requests": {},
                    "sockets": {},
                    "freeSockets": {},
                    "keepAliveMsecs": 1000,
                    "keepAlive": false,
                    "maxSockets": null,
                    "maxFreeSockets": 256,
                    "scheduling": "lifo",
                    "maxTotalSockets": null,
                    "totalSocketCount": 0,
                    "maxCachedSessions": 100,
                    "_sessionCache": {
                      "map": {},
                      "list": []
                    }
                  },
                  "hooks": {
                    "beforeRequest": [],
                    "beforeRetry": [],
                    "beforeError": [],
                    "afterResponse": []
                  },
                  "prefixUrl": "",
                  "retry": {
                    "limit": 2,
                    "methods": [
                      "get",
                      "put",
                      "head",
                      "delete",
                      "options",
                      "trace"
                    ],
                    "statusCodes": [
                      408,
                      413,
                      429,
                      500,
                      502,
                      503,
                      504
                    ],
                    "afterStatusCodes": [
                      413,
                      429,
                      503
                    ],
                    "maxRetryAfter": null,
                    "backoffLimit": null
                  },
                  "throwHttpErrors": true,
                  "timeout": 10000,
                  "signal": {},
                  "duplex": "half",
                  "body": "{\"credential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/suites/ed25519-2020/v1\"],\"type\":[\"VerifiableCredential\"],\"credentialSubject\":{\"id\":\"did:key:z6MkhTNL7i2etLerDK8Acz5t528giE5KA4p75T6ka1E1D74r\"},\"id\":\"urn:uuid:bd9bb391-78f5-45d5-8ff3-64ea5df561e0\",\"issuer\":\"https://issuer.qa.veres.app/issuers/z1AEwLo7tZ3TrsPgRcgLJqQvR\"}}"
                },
                "name": "HTTPError",
                "requestUrl": "https://issuer.qa.veres.app/issuers/z1AEwLo7tZ3TrsPgRcgLJqQvR/credentials/issue",
                "status": 403,
                "data": {
                  "name": "NotAllowedError",
                  "message": "Authorization error.",
                  "details": {
                    "httpStatusCode": 403
                  },
                  "cause": {
                    "name": "Error",
                    "message": "The invoked capability has expired.",
                    "details": {},
                    "cause": {
                      "message": "An unspecified error occurred.",
                      "name": "OperationError",
                      "type": "OperationError"
                    },
                    "stack": "Error: The invoked capability has expired.\n    at onError (file:///home/node/app/node_modules/@bedrock/service-core/lib/http/middleware.js:188:13)\n    at Module.handleError (file:///home/node/app/node_modules/@digitalbazaar/ezcap-express/lib/helpers.js:145:12)\n    at file:///home/node/app/node_modules/@digitalbazaar/ezcap-express/lib/authorize.js:137:15\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                    "type": "Error"
                  },
                  "stack": "NotAllowedError: Authorization error.\n    at onError (file:///home/node/app/node_modules/@bedrock/service-core/lib/http/middleware.js:195:9)\n    at Module.handleError (file:///home/node/app/node_modules/@digitalbazaar/ezcap-express/lib/helpers.js:145:12)\n    at file:///home/node/app/node_modules/@digitalbazaar/ezcap-express/lib/authorize.js:137:15\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                  "type": "NotAllowedError"
                }
              }
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "eP5A8nKf31Au3fuEytsgu",
          "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
          "_testId": "urn:uuid:83ed2330-bc34-463d-a00a-c994d9d25342"
        },
        {
          "title": "Digital Bazaar",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC.",
              "body": "async function() {\n        // this tells the test report which cell in the interop matrix\n        // the result goes in\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({vc: validVc});\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error);\n        should.exist(result);\n        should.exist(result.status);\n        result.status.should.equal(200);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "tVtu8HvGMd9MblfPM7-k9",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noContextVc = klona(validVc);\n          delete noContextVc['@context'];\n          const body = createRequestBody({vc: noContextVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "tVtu8HvGMd9MblfPM7-k9",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noTypeVc = klona(validVc);\n        delete noTypeVc.type;\n        const body = createRequestBody({vc: noTypeVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "tVtu8HvGMd9MblfPM7-k9",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noIssuerVc = klona(validVc);\n        delete noIssuerVc.issuer;\n        const body = createRequestBody({vc: noIssuerVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "tVtu8HvGMd9MblfPM7-k9",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noCredentialSubjectVc = klona(validVc);\n          delete noCredentialSubjectVc.credentialSubject;\n          const body = createRequestBody({vc: noCredentialSubjectVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "tVtu8HvGMd9MblfPM7-k9",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noProofVc = klona(validVc);\n        delete noProofVc.proof;\n        const body = createRequestBody({vc: noProofVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "tVtu8HvGMd9MblfPM7-k9",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.type\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofTypeVc = klona(validVc);\n          delete noProofTypeVc.proof.type;\n          const body = createRequestBody({vc: noProofTypeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "tVtu8HvGMd9MblfPM7-k9",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.created\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofCreatedVc = klona(validVc);\n          delete noProofCreatedVc.proof.created;\n          const body = createRequestBody({vc: noProofCreatedVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "tVtu8HvGMd9MblfPM7-k9",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.verificationMethod\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofVerificationMethodVc = klona(validVc);\n          delete noProofVerificationMethodVc.proof.verificationMethod;\n          const body = createRequestBody({vc: noProofVerificationMethodVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "tVtu8HvGMd9MblfPM7-k9",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofValue\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofValueVc = klona(validVc);\n          delete noProofValueVc.proof.proofValue;\n          const body = createRequestBody({vc: noProofValueVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "tVtu8HvGMd9MblfPM7-k9",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofPurpose\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofPurposeVc = klona(validVc);\n          delete noProofPurposeVc.proof.proofPurpose;\n          const body = createRequestBody({vc: noProofPurposeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "tVtu8HvGMd9MblfPM7-k9",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidContextTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidContextType of invalidContextTypes) {\n          copyVc['@context'] = invalidContextType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "tVtu8HvGMd9MblfPM7-k9",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" items are not strings.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidContextItemTypes = [[], {}, null, undefined, 10, true];\n          for(const invalidContextItemType of invalidContextItemTypes) {\n            copyVc['@context'] = [invalidContextItemType];\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "tVtu8HvGMd9MblfPM7-k9",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidType of invalidTypes) {\n          copyVc.type = invalidType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "tVtu8HvGMd9MblfPM7-k9",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" items are not strings.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypeItemTypes = [[], {}, null, undefined, 10, true];\n        for(const invalidItemType of invalidTypeItemTypes) {\n          copyVc.type = [invalidItemType];\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "tVtu8HvGMd9MblfPM7-k9",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" is not an object or a string.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidIssuerTypes = [[], null, undefined, 10, true];\n          for(const invalidIssuerType of invalidIssuerTypes) {\n            copyVc.issuer = invalidIssuerType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "tVtu8HvGMd9MblfPM7-k9",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" is not an object.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidCredentialSubjectTypes = [\n            'string', null, undefined, 10, true, []\n          ];\n          for(const invalidType of invalidCredentialSubjectTypes) {\n            copyVc.credentialSubject = invalidType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "tVtu8HvGMd9MblfPM7-k9",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" is not an object.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidProofTypes = ['string', null, undefined, 10, true, []];\n        for(const invalidProofType of invalidProofTypes) {\n          copyVc.proof = invalidProofType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "tVtu8HvGMd9MblfPM7-k9",
              "ctx": null
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook for \"MUST verify a valid VC.\"",
              "body": "async function() {\n        const issuer = matchingIssuers.get(issuerName).issuers.find(\n          issuer => issuer.tags.has('vc-api'));\n        validVc = await createInitialVc({issuer});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "tVtu8HvGMd9MblfPM7-k9",
              "ctx": null,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 785,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 57,
              "_error": null,
              "state": "failed",
              "err": {
                "response": {},
                "request": {},
                "options": {
                  "credentials": "same-origin",
                  "headers": {},
                  "method": "POST",
                  "json": {
                    "credential": {
                      "@context": [
                        "https://www.w3.org/2018/credentials/v1",
                        "https://w3id.org/security/suites/ed25519-2020/v1"
                      ],
                      "type": [
                        "VerifiableCredential"
                      ],
                      "credentialSubject": {
                        "id": "did:key:z6MkhTNL7i2etLerDK8Acz5t528giE5KA4p75T6ka1E1D74r"
                      },
                      "id": "urn:uuid:e8a3b9ae-15cf-48a4-b598-412e5442ad54",
                      "issuer": "https://issuer.qa.veres.app/issuers/z1AEwLo7tZ3TrsPgRcgLJqQvR"
                    }
                  },
                  "agent": {
                    "_events": {},
                    "_eventsCount": 2,
                    "defaultPort": 443,
                    "protocol": "https:",
                    "options": {
                      "rejectUnauthorized": false,
                      "noDelay": true,
                      "path": null
                    },
                    "requests": {},
                    "sockets": {},
                    "freeSockets": {},
                    "keepAliveMsecs": 1000,
                    "keepAlive": false,
                    "maxSockets": null,
                    "maxFreeSockets": 256,
                    "scheduling": "lifo",
                    "maxTotalSockets": null,
                    "totalSocketCount": 0,
                    "maxCachedSessions": 100,
                    "_sessionCache": {
                      "map": {},
                      "list": []
                    }
                  },
                  "hooks": {
                    "beforeRequest": [],
                    "beforeRetry": [],
                    "beforeError": [],
                    "afterResponse": []
                  },
                  "prefixUrl": "",
                  "retry": {
                    "limit": 2,
                    "methods": [
                      "get",
                      "put",
                      "head",
                      "delete",
                      "options",
                      "trace"
                    ],
                    "statusCodes": [
                      408,
                      413,
                      429,
                      500,
                      502,
                      503,
                      504
                    ],
                    "afterStatusCodes": [
                      413,
                      429,
                      503
                    ],
                    "maxRetryAfter": null,
                    "backoffLimit": null
                  },
                  "throwHttpErrors": true,
                  "timeout": 10000,
                  "signal": {},
                  "duplex": "half",
                  "body": "{\"credential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/suites/ed25519-2020/v1\"],\"type\":[\"VerifiableCredential\"],\"credentialSubject\":{\"id\":\"did:key:z6MkhTNL7i2etLerDK8Acz5t528giE5KA4p75T6ka1E1D74r\"},\"id\":\"urn:uuid:e8a3b9ae-15cf-48a4-b598-412e5442ad54\",\"issuer\":\"https://issuer.qa.veres.app/issuers/z1AEwLo7tZ3TrsPgRcgLJqQvR\"}}"
                },
                "name": "HTTPError",
                "requestUrl": "https://issuer.qa.veres.app/issuers/z1AEwLo7tZ3TrsPgRcgLJqQvR/credentials/issue",
                "status": 403,
                "data": {
                  "name": "NotAllowedError",
                  "message": "Authorization error.",
                  "details": {
                    "httpStatusCode": 403
                  },
                  "cause": {
                    "name": "Error",
                    "message": "The invoked capability has expired.",
                    "details": {},
                    "cause": {
                      "message": "An unspecified error occurred.",
                      "name": "OperationError",
                      "type": "OperationError"
                    },
                    "stack": "Error: The invoked capability has expired.\n    at onError (file:///home/node/app/node_modules/@bedrock/service-core/lib/http/middleware.js:188:13)\n    at Module.handleError (file:///home/node/app/node_modules/@digitalbazaar/ezcap-express/lib/helpers.js:145:12)\n    at file:///home/node/app/node_modules/@digitalbazaar/ezcap-express/lib/authorize.js:137:15\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                    "type": "Error"
                  },
                  "stack": "NotAllowedError: Authorization error.\n    at onError (file:///home/node/app/node_modules/@bedrock/service-core/lib/http/middleware.js:195:9)\n    at Module.handleError (file:///home/node/app/node_modules/@digitalbazaar/ezcap-express/lib/helpers.js:145:12)\n    at file:///home/node/app/node_modules/@digitalbazaar/ezcap-express/lib/authorize.js:137:15\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                  "type": "NotAllowedError"
                }
              }
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "eP5A8nKf31Au3fuEytsgu",
          "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
          "_testId": "urn:uuid:ba321149-05e0-4f3d-b89d-a0b96c92f7c5"
        },
        {
          "title": "EWF",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC.",
              "body": "async function() {\n        // this tells the test report which cell in the interop matrix\n        // the result goes in\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({vc: validVc});\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error);\n        should.exist(result);\n        should.exist(result.status);\n        result.status.should.equal(200);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "_4U9bIa1JNK2f6HLDmvfS",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noContextVc = klona(validVc);\n          delete noContextVc['@context'];\n          const body = createRequestBody({vc: noContextVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "_4U9bIa1JNK2f6HLDmvfS",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noTypeVc = klona(validVc);\n        delete noTypeVc.type;\n        const body = createRequestBody({vc: noTypeVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "_4U9bIa1JNK2f6HLDmvfS",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noIssuerVc = klona(validVc);\n        delete noIssuerVc.issuer;\n        const body = createRequestBody({vc: noIssuerVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "_4U9bIa1JNK2f6HLDmvfS",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noCredentialSubjectVc = klona(validVc);\n          delete noCredentialSubjectVc.credentialSubject;\n          const body = createRequestBody({vc: noCredentialSubjectVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "_4U9bIa1JNK2f6HLDmvfS",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noProofVc = klona(validVc);\n        delete noProofVc.proof;\n        const body = createRequestBody({vc: noProofVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "_4U9bIa1JNK2f6HLDmvfS",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.type\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofTypeVc = klona(validVc);\n          delete noProofTypeVc.proof.type;\n          const body = createRequestBody({vc: noProofTypeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "_4U9bIa1JNK2f6HLDmvfS",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.created\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofCreatedVc = klona(validVc);\n          delete noProofCreatedVc.proof.created;\n          const body = createRequestBody({vc: noProofCreatedVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "_4U9bIa1JNK2f6HLDmvfS",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.verificationMethod\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofVerificationMethodVc = klona(validVc);\n          delete noProofVerificationMethodVc.proof.verificationMethod;\n          const body = createRequestBody({vc: noProofVerificationMethodVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "_4U9bIa1JNK2f6HLDmvfS",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofValue\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofValueVc = klona(validVc);\n          delete noProofValueVc.proof.proofValue;\n          const body = createRequestBody({vc: noProofValueVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "_4U9bIa1JNK2f6HLDmvfS",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofPurpose\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofPurposeVc = klona(validVc);\n          delete noProofPurposeVc.proof.proofPurpose;\n          const body = createRequestBody({vc: noProofPurposeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "_4U9bIa1JNK2f6HLDmvfS",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidContextTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidContextType of invalidContextTypes) {\n          copyVc['@context'] = invalidContextType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "_4U9bIa1JNK2f6HLDmvfS",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" items are not strings.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidContextItemTypes = [[], {}, null, undefined, 10, true];\n          for(const invalidContextItemType of invalidContextItemTypes) {\n            copyVc['@context'] = [invalidContextItemType];\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "_4U9bIa1JNK2f6HLDmvfS",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidType of invalidTypes) {\n          copyVc.type = invalidType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "_4U9bIa1JNK2f6HLDmvfS",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" items are not strings.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypeItemTypes = [[], {}, null, undefined, 10, true];\n        for(const invalidItemType of invalidTypeItemTypes) {\n          copyVc.type = [invalidItemType];\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "_4U9bIa1JNK2f6HLDmvfS",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" is not an object or a string.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidIssuerTypes = [[], null, undefined, 10, true];\n          for(const invalidIssuerType of invalidIssuerTypes) {\n            copyVc.issuer = invalidIssuerType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "_4U9bIa1JNK2f6HLDmvfS",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" is not an object.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidCredentialSubjectTypes = [\n            'string', null, undefined, 10, true, []\n          ];\n          for(const invalidType of invalidCredentialSubjectTypes) {\n            copyVc.credentialSubject = invalidType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "_4U9bIa1JNK2f6HLDmvfS",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" is not an object.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidProofTypes = ['string', null, undefined, 10, true, []];\n        for(const invalidProofType of invalidProofTypes) {\n          copyVc.proof = invalidProofType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "_4U9bIa1JNK2f6HLDmvfS",
              "ctx": null
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook for \"MUST verify a valid VC.\"",
              "body": "async function() {\n        const issuer = matchingIssuers.get(issuerName).issuers.find(\n          issuer => issuer.tags.has('vc-api'));\n        validVc = await createInitialVc({issuer});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "_4U9bIa1JNK2f6HLDmvfS",
              "ctx": null,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 843,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 57,
              "_error": null,
              "state": "failed",
              "err": {
                "response": {},
                "request": {},
                "options": {
                  "credentials": "same-origin",
                  "headers": {},
                  "method": "POST",
                  "json": {
                    "credential": {
                      "@context": [
                        "https://www.w3.org/2018/credentials/v1",
                        "https://w3id.org/security/suites/ed25519-2020/v1"
                      ],
                      "type": [
                        "VerifiableCredential"
                      ],
                      "credentialSubject": {
                        "id": "did:key:z6MkhTNL7i2etLerDK8Acz5t528giE5KA4p75T6ka1E1D74r"
                      },
                      "id": "urn:uuid:87dad1ac-a3f0-4834-ac51-f2ca99e244b0",
                      "issuer": "https://issuer.qa.veres.app/issuers/z1AEwLo7tZ3TrsPgRcgLJqQvR"
                    }
                  },
                  "agent": {
                    "_events": {},
                    "_eventsCount": 2,
                    "defaultPort": 443,
                    "protocol": "https:",
                    "options": {
                      "rejectUnauthorized": false,
                      "noDelay": true,
                      "path": null
                    },
                    "requests": {},
                    "sockets": {},
                    "freeSockets": {},
                    "keepAliveMsecs": 1000,
                    "keepAlive": false,
                    "maxSockets": null,
                    "maxFreeSockets": 256,
                    "scheduling": "lifo",
                    "maxTotalSockets": null,
                    "totalSocketCount": 0,
                    "maxCachedSessions": 100,
                    "_sessionCache": {
                      "map": {},
                      "list": []
                    }
                  },
                  "hooks": {
                    "beforeRequest": [],
                    "beforeRetry": [],
                    "beforeError": [],
                    "afterResponse": []
                  },
                  "prefixUrl": "",
                  "retry": {
                    "limit": 2,
                    "methods": [
                      "get",
                      "put",
                      "head",
                      "delete",
                      "options",
                      "trace"
                    ],
                    "statusCodes": [
                      408,
                      413,
                      429,
                      500,
                      502,
                      503,
                      504
                    ],
                    "afterStatusCodes": [
                      413,
                      429,
                      503
                    ],
                    "maxRetryAfter": null,
                    "backoffLimit": null
                  },
                  "throwHttpErrors": true,
                  "timeout": 10000,
                  "signal": {},
                  "duplex": "half",
                  "body": "{\"credential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/suites/ed25519-2020/v1\"],\"type\":[\"VerifiableCredential\"],\"credentialSubject\":{\"id\":\"did:key:z6MkhTNL7i2etLerDK8Acz5t528giE5KA4p75T6ka1E1D74r\"},\"id\":\"urn:uuid:87dad1ac-a3f0-4834-ac51-f2ca99e244b0\",\"issuer\":\"https://issuer.qa.veres.app/issuers/z1AEwLo7tZ3TrsPgRcgLJqQvR\"}}"
                },
                "name": "HTTPError",
                "requestUrl": "https://issuer.qa.veres.app/issuers/z1AEwLo7tZ3TrsPgRcgLJqQvR/credentials/issue",
                "status": 403,
                "data": {
                  "name": "NotAllowedError",
                  "message": "Authorization error.",
                  "details": {
                    "httpStatusCode": 403
                  },
                  "cause": {
                    "name": "Error",
                    "message": "The invoked capability has expired.",
                    "details": {},
                    "cause": {
                      "message": "An unspecified error occurred.",
                      "name": "OperationError",
                      "type": "OperationError"
                    },
                    "stack": "Error: The invoked capability has expired.\n    at onError (file:///home/node/app/node_modules/@bedrock/service-core/lib/http/middleware.js:188:13)\n    at Module.handleError (file:///home/node/app/node_modules/@digitalbazaar/ezcap-express/lib/helpers.js:145:12)\n    at file:///home/node/app/node_modules/@digitalbazaar/ezcap-express/lib/authorize.js:137:15\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                    "type": "Error"
                  },
                  "stack": "NotAllowedError: Authorization error.\n    at onError (file:///home/node/app/node_modules/@bedrock/service-core/lib/http/middleware.js:195:9)\n    at Module.handleError (file:///home/node/app/node_modules/@digitalbazaar/ezcap-express/lib/helpers.js:145:12)\n    at file:///home/node/app/node_modules/@digitalbazaar/ezcap-express/lib/authorize.js:137:15\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                  "type": "NotAllowedError"
                }
              }
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "eP5A8nKf31Au3fuEytsgu",
          "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
          "_testId": "urn:uuid:20365f35-02f4-4bad-9b9a-aa7a6b07647c"
        },
        {
          "title": "LearnCard",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC.",
              "body": "async function() {\n        // this tells the test report which cell in the interop matrix\n        // the result goes in\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({vc: validVc});\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error);\n        should.exist(result);\n        should.exist(result.status);\n        result.status.should.equal(200);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "4__2RT0_U5Bm2rcJdQUYn",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noContextVc = klona(validVc);\n          delete noContextVc['@context'];\n          const body = createRequestBody({vc: noContextVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "4__2RT0_U5Bm2rcJdQUYn",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noTypeVc = klona(validVc);\n        delete noTypeVc.type;\n        const body = createRequestBody({vc: noTypeVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "4__2RT0_U5Bm2rcJdQUYn",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noIssuerVc = klona(validVc);\n        delete noIssuerVc.issuer;\n        const body = createRequestBody({vc: noIssuerVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "4__2RT0_U5Bm2rcJdQUYn",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noCredentialSubjectVc = klona(validVc);\n          delete noCredentialSubjectVc.credentialSubject;\n          const body = createRequestBody({vc: noCredentialSubjectVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "4__2RT0_U5Bm2rcJdQUYn",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noProofVc = klona(validVc);\n        delete noProofVc.proof;\n        const body = createRequestBody({vc: noProofVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "4__2RT0_U5Bm2rcJdQUYn",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.type\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofTypeVc = klona(validVc);\n          delete noProofTypeVc.proof.type;\n          const body = createRequestBody({vc: noProofTypeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "4__2RT0_U5Bm2rcJdQUYn",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.created\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofCreatedVc = klona(validVc);\n          delete noProofCreatedVc.proof.created;\n          const body = createRequestBody({vc: noProofCreatedVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "4__2RT0_U5Bm2rcJdQUYn",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.verificationMethod\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofVerificationMethodVc = klona(validVc);\n          delete noProofVerificationMethodVc.proof.verificationMethod;\n          const body = createRequestBody({vc: noProofVerificationMethodVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "4__2RT0_U5Bm2rcJdQUYn",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofValue\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofValueVc = klona(validVc);\n          delete noProofValueVc.proof.proofValue;\n          const body = createRequestBody({vc: noProofValueVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "4__2RT0_U5Bm2rcJdQUYn",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofPurpose\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofPurposeVc = klona(validVc);\n          delete noProofPurposeVc.proof.proofPurpose;\n          const body = createRequestBody({vc: noProofPurposeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "4__2RT0_U5Bm2rcJdQUYn",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidContextTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidContextType of invalidContextTypes) {\n          copyVc['@context'] = invalidContextType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "4__2RT0_U5Bm2rcJdQUYn",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" items are not strings.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidContextItemTypes = [[], {}, null, undefined, 10, true];\n          for(const invalidContextItemType of invalidContextItemTypes) {\n            copyVc['@context'] = [invalidContextItemType];\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "4__2RT0_U5Bm2rcJdQUYn",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidType of invalidTypes) {\n          copyVc.type = invalidType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "4__2RT0_U5Bm2rcJdQUYn",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" items are not strings.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypeItemTypes = [[], {}, null, undefined, 10, true];\n        for(const invalidItemType of invalidTypeItemTypes) {\n          copyVc.type = [invalidItemType];\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "4__2RT0_U5Bm2rcJdQUYn",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" is not an object or a string.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidIssuerTypes = [[], null, undefined, 10, true];\n          for(const invalidIssuerType of invalidIssuerTypes) {\n            copyVc.issuer = invalidIssuerType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "4__2RT0_U5Bm2rcJdQUYn",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" is not an object.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidCredentialSubjectTypes = [\n            'string', null, undefined, 10, true, []\n          ];\n          for(const invalidType of invalidCredentialSubjectTypes) {\n            copyVc.credentialSubject = invalidType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "4__2RT0_U5Bm2rcJdQUYn",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" is not an object.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidProofTypes = ['string', null, undefined, 10, true, []];\n        for(const invalidProofType of invalidProofTypes) {\n          copyVc.proof = invalidProofType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "4__2RT0_U5Bm2rcJdQUYn",
              "ctx": null
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook for \"MUST verify a valid VC.\"",
              "body": "async function() {\n        const issuer = matchingIssuers.get(issuerName).issuers.find(\n          issuer => issuer.tags.has('vc-api'));\n        validVc = await createInitialVc({issuer});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "4__2RT0_U5Bm2rcJdQUYn",
              "ctx": null,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 901,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 63,
              "_error": null,
              "state": "failed",
              "err": {
                "response": {},
                "request": {},
                "options": {
                  "credentials": "same-origin",
                  "headers": {},
                  "method": "POST",
                  "json": {
                    "credential": {
                      "@context": [
                        "https://www.w3.org/2018/credentials/v1",
                        "https://w3id.org/security/suites/ed25519-2020/v1"
                      ],
                      "type": [
                        "VerifiableCredential"
                      ],
                      "credentialSubject": {
                        "id": "did:key:z6MkhTNL7i2etLerDK8Acz5t528giE5KA4p75T6ka1E1D74r"
                      },
                      "id": "urn:uuid:c6bccba6-d6e0-4c1d-8853-29c027006422",
                      "issuer": "https://issuer.qa.veres.app/issuers/z1AEwLo7tZ3TrsPgRcgLJqQvR"
                    }
                  },
                  "agent": {
                    "_events": {},
                    "_eventsCount": 2,
                    "defaultPort": 443,
                    "protocol": "https:",
                    "options": {
                      "rejectUnauthorized": false,
                      "noDelay": true,
                      "path": null
                    },
                    "requests": {},
                    "sockets": {},
                    "freeSockets": {},
                    "keepAliveMsecs": 1000,
                    "keepAlive": false,
                    "maxSockets": null,
                    "maxFreeSockets": 256,
                    "scheduling": "lifo",
                    "maxTotalSockets": null,
                    "totalSocketCount": 0,
                    "maxCachedSessions": 100,
                    "_sessionCache": {
                      "map": {},
                      "list": []
                    }
                  },
                  "hooks": {
                    "beforeRequest": [],
                    "beforeRetry": [],
                    "beforeError": [],
                    "afterResponse": []
                  },
                  "prefixUrl": "",
                  "retry": {
                    "limit": 2,
                    "methods": [
                      "get",
                      "put",
                      "head",
                      "delete",
                      "options",
                      "trace"
                    ],
                    "statusCodes": [
                      408,
                      413,
                      429,
                      500,
                      502,
                      503,
                      504
                    ],
                    "afterStatusCodes": [
                      413,
                      429,
                      503
                    ],
                    "maxRetryAfter": null,
                    "backoffLimit": null
                  },
                  "throwHttpErrors": true,
                  "timeout": 10000,
                  "signal": {},
                  "duplex": "half",
                  "body": "{\"credential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/suites/ed25519-2020/v1\"],\"type\":[\"VerifiableCredential\"],\"credentialSubject\":{\"id\":\"did:key:z6MkhTNL7i2etLerDK8Acz5t528giE5KA4p75T6ka1E1D74r\"},\"id\":\"urn:uuid:c6bccba6-d6e0-4c1d-8853-29c027006422\",\"issuer\":\"https://issuer.qa.veres.app/issuers/z1AEwLo7tZ3TrsPgRcgLJqQvR\"}}"
                },
                "name": "HTTPError",
                "requestUrl": "https://issuer.qa.veres.app/issuers/z1AEwLo7tZ3TrsPgRcgLJqQvR/credentials/issue",
                "status": 403,
                "data": {
                  "name": "NotAllowedError",
                  "message": "Authorization error.",
                  "details": {
                    "httpStatusCode": 403
                  },
                  "cause": {
                    "name": "Error",
                    "message": "The invoked capability has expired.",
                    "details": {},
                    "cause": {
                      "message": "An unspecified error occurred.",
                      "name": "OperationError",
                      "type": "OperationError"
                    },
                    "stack": "Error: The invoked capability has expired.\n    at onError (file:///home/node/app/node_modules/@bedrock/service-core/lib/http/middleware.js:188:13)\n    at Module.handleError (file:///home/node/app/node_modules/@digitalbazaar/ezcap-express/lib/helpers.js:145:12)\n    at file:///home/node/app/node_modules/@digitalbazaar/ezcap-express/lib/authorize.js:137:15\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                    "type": "Error"
                  },
                  "stack": "NotAllowedError: Authorization error.\n    at onError (file:///home/node/app/node_modules/@bedrock/service-core/lib/http/middleware.js:195:9)\n    at Module.handleError (file:///home/node/app/node_modules/@digitalbazaar/ezcap-express/lib/helpers.js:145:12)\n    at file:///home/node/app/node_modules/@digitalbazaar/ezcap-express/lib/authorize.js:137:15\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                  "type": "NotAllowedError"
                }
              }
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "eP5A8nKf31Au3fuEytsgu",
          "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
          "_testId": "urn:uuid:520e1cce-0db4-41e9-b421-09575fc2de3d"
        },
        {
          "title": "Mavennet",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC.",
              "body": "async function() {\n        // this tells the test report which cell in the interop matrix\n        // the result goes in\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({vc: validVc});\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error);\n        should.exist(result);\n        should.exist(result.status);\n        result.status.should.equal(200);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "ORmrMaC6h_eCvb29QA4E_",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noContextVc = klona(validVc);\n          delete noContextVc['@context'];\n          const body = createRequestBody({vc: noContextVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "ORmrMaC6h_eCvb29QA4E_",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noTypeVc = klona(validVc);\n        delete noTypeVc.type;\n        const body = createRequestBody({vc: noTypeVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "ORmrMaC6h_eCvb29QA4E_",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noIssuerVc = klona(validVc);\n        delete noIssuerVc.issuer;\n        const body = createRequestBody({vc: noIssuerVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "ORmrMaC6h_eCvb29QA4E_",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noCredentialSubjectVc = klona(validVc);\n          delete noCredentialSubjectVc.credentialSubject;\n          const body = createRequestBody({vc: noCredentialSubjectVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "ORmrMaC6h_eCvb29QA4E_",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noProofVc = klona(validVc);\n        delete noProofVc.proof;\n        const body = createRequestBody({vc: noProofVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "ORmrMaC6h_eCvb29QA4E_",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.type\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofTypeVc = klona(validVc);\n          delete noProofTypeVc.proof.type;\n          const body = createRequestBody({vc: noProofTypeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "ORmrMaC6h_eCvb29QA4E_",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.created\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofCreatedVc = klona(validVc);\n          delete noProofCreatedVc.proof.created;\n          const body = createRequestBody({vc: noProofCreatedVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "ORmrMaC6h_eCvb29QA4E_",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.verificationMethod\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofVerificationMethodVc = klona(validVc);\n          delete noProofVerificationMethodVc.proof.verificationMethod;\n          const body = createRequestBody({vc: noProofVerificationMethodVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "ORmrMaC6h_eCvb29QA4E_",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofValue\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofValueVc = klona(validVc);\n          delete noProofValueVc.proof.proofValue;\n          const body = createRequestBody({vc: noProofValueVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "ORmrMaC6h_eCvb29QA4E_",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofPurpose\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofPurposeVc = klona(validVc);\n          delete noProofPurposeVc.proof.proofPurpose;\n          const body = createRequestBody({vc: noProofPurposeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "ORmrMaC6h_eCvb29QA4E_",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidContextTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidContextType of invalidContextTypes) {\n          copyVc['@context'] = invalidContextType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "ORmrMaC6h_eCvb29QA4E_",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" items are not strings.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidContextItemTypes = [[], {}, null, undefined, 10, true];\n          for(const invalidContextItemType of invalidContextItemTypes) {\n            copyVc['@context'] = [invalidContextItemType];\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "ORmrMaC6h_eCvb29QA4E_",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidType of invalidTypes) {\n          copyVc.type = invalidType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "ORmrMaC6h_eCvb29QA4E_",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" items are not strings.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypeItemTypes = [[], {}, null, undefined, 10, true];\n        for(const invalidItemType of invalidTypeItemTypes) {\n          copyVc.type = [invalidItemType];\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "ORmrMaC6h_eCvb29QA4E_",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" is not an object or a string.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidIssuerTypes = [[], null, undefined, 10, true];\n          for(const invalidIssuerType of invalidIssuerTypes) {\n            copyVc.issuer = invalidIssuerType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "ORmrMaC6h_eCvb29QA4E_",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" is not an object.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidCredentialSubjectTypes = [\n            'string', null, undefined, 10, true, []\n          ];\n          for(const invalidType of invalidCredentialSubjectTypes) {\n            copyVc.credentialSubject = invalidType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "ORmrMaC6h_eCvb29QA4E_",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" is not an object.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidProofTypes = ['string', null, undefined, 10, true, []];\n        for(const invalidProofType of invalidProofTypes) {\n          copyVc.proof = invalidProofType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "ORmrMaC6h_eCvb29QA4E_",
              "ctx": null
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook for \"MUST verify a valid VC.\"",
              "body": "async function() {\n        const issuer = matchingIssuers.get(issuerName).issuers.find(\n          issuer => issuer.tags.has('vc-api'));\n        validVc = await createInitialVc({issuer});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "ORmrMaC6h_eCvb29QA4E_",
              "ctx": null,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 964,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 54,
              "_error": null,
              "state": "failed",
              "err": {
                "response": {},
                "request": {},
                "options": {
                  "credentials": "same-origin",
                  "headers": {},
                  "method": "POST",
                  "json": {
                    "credential": {
                      "@context": [
                        "https://www.w3.org/2018/credentials/v1",
                        "https://w3id.org/security/suites/ed25519-2020/v1"
                      ],
                      "type": [
                        "VerifiableCredential"
                      ],
                      "credentialSubject": {
                        "id": "did:key:z6MkhTNL7i2etLerDK8Acz5t528giE5KA4p75T6ka1E1D74r"
                      },
                      "id": "urn:uuid:c4241b2d-2b6e-4fce-9f01-33db04e2de28",
                      "issuer": "https://issuer.qa.veres.app/issuers/z1AEwLo7tZ3TrsPgRcgLJqQvR"
                    }
                  },
                  "agent": {
                    "_events": {},
                    "_eventsCount": 2,
                    "defaultPort": 443,
                    "protocol": "https:",
                    "options": {
                      "rejectUnauthorized": false,
                      "noDelay": true,
                      "path": null
                    },
                    "requests": {},
                    "sockets": {},
                    "freeSockets": {},
                    "keepAliveMsecs": 1000,
                    "keepAlive": false,
                    "maxSockets": null,
                    "maxFreeSockets": 256,
                    "scheduling": "lifo",
                    "maxTotalSockets": null,
                    "totalSocketCount": 0,
                    "maxCachedSessions": 100,
                    "_sessionCache": {
                      "map": {},
                      "list": []
                    }
                  },
                  "hooks": {
                    "beforeRequest": [],
                    "beforeRetry": [],
                    "beforeError": [],
                    "afterResponse": []
                  },
                  "prefixUrl": "",
                  "retry": {
                    "limit": 2,
                    "methods": [
                      "get",
                      "put",
                      "head",
                      "delete",
                      "options",
                      "trace"
                    ],
                    "statusCodes": [
                      408,
                      413,
                      429,
                      500,
                      502,
                      503,
                      504
                    ],
                    "afterStatusCodes": [
                      413,
                      429,
                      503
                    ],
                    "maxRetryAfter": null,
                    "backoffLimit": null
                  },
                  "throwHttpErrors": true,
                  "timeout": 10000,
                  "signal": {},
                  "duplex": "half",
                  "body": "{\"credential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/suites/ed25519-2020/v1\"],\"type\":[\"VerifiableCredential\"],\"credentialSubject\":{\"id\":\"did:key:z6MkhTNL7i2etLerDK8Acz5t528giE5KA4p75T6ka1E1D74r\"},\"id\":\"urn:uuid:c4241b2d-2b6e-4fce-9f01-33db04e2de28\",\"issuer\":\"https://issuer.qa.veres.app/issuers/z1AEwLo7tZ3TrsPgRcgLJqQvR\"}}"
                },
                "name": "HTTPError",
                "requestUrl": "https://issuer.qa.veres.app/issuers/z1AEwLo7tZ3TrsPgRcgLJqQvR/credentials/issue",
                "status": 403,
                "data": {
                  "name": "NotAllowedError",
                  "message": "Authorization error.",
                  "details": {
                    "httpStatusCode": 403
                  },
                  "cause": {
                    "name": "Error",
                    "message": "The invoked capability has expired.",
                    "details": {},
                    "cause": {
                      "message": "An unspecified error occurred.",
                      "name": "OperationError",
                      "type": "OperationError"
                    },
                    "stack": "Error: The invoked capability has expired.\n    at onError (file:///home/node/app/node_modules/@bedrock/service-core/lib/http/middleware.js:188:13)\n    at Module.handleError (file:///home/node/app/node_modules/@digitalbazaar/ezcap-express/lib/helpers.js:145:12)\n    at file:///home/node/app/node_modules/@digitalbazaar/ezcap-express/lib/authorize.js:137:15\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                    "type": "Error"
                  },
                  "stack": "NotAllowedError: Authorization error.\n    at onError (file:///home/node/app/node_modules/@bedrock/service-core/lib/http/middleware.js:195:9)\n    at Module.handleError (file:///home/node/app/node_modules/@digitalbazaar/ezcap-express/lib/helpers.js:145:12)\n    at file:///home/node/app/node_modules/@digitalbazaar/ezcap-express/lib/authorize.js:137:15\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                  "type": "NotAllowedError"
                }
              }
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "eP5A8nKf31Au3fuEytsgu",
          "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
          "_testId": "urn:uuid:9efb13b9-fc79-4f28-bbe6-476502c2b8f0"
        },
        {
          "title": "SecureKey",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC.",
              "body": "async function() {\n        // this tells the test report which cell in the interop matrix\n        // the result goes in\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({vc: validVc});\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error);\n        should.exist(result);\n        should.exist(result.status);\n        result.status.should.equal(200);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "-SBxCHqGCdKs8XWhxQJhc",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noContextVc = klona(validVc);\n          delete noContextVc['@context'];\n          const body = createRequestBody({vc: noContextVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "-SBxCHqGCdKs8XWhxQJhc",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noTypeVc = klona(validVc);\n        delete noTypeVc.type;\n        const body = createRequestBody({vc: noTypeVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "-SBxCHqGCdKs8XWhxQJhc",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noIssuerVc = klona(validVc);\n        delete noIssuerVc.issuer;\n        const body = createRequestBody({vc: noIssuerVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "-SBxCHqGCdKs8XWhxQJhc",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noCredentialSubjectVc = klona(validVc);\n          delete noCredentialSubjectVc.credentialSubject;\n          const body = createRequestBody({vc: noCredentialSubjectVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "-SBxCHqGCdKs8XWhxQJhc",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noProofVc = klona(validVc);\n        delete noProofVc.proof;\n        const body = createRequestBody({vc: noProofVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "-SBxCHqGCdKs8XWhxQJhc",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.type\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofTypeVc = klona(validVc);\n          delete noProofTypeVc.proof.type;\n          const body = createRequestBody({vc: noProofTypeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "-SBxCHqGCdKs8XWhxQJhc",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.created\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofCreatedVc = klona(validVc);\n          delete noProofCreatedVc.proof.created;\n          const body = createRequestBody({vc: noProofCreatedVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "-SBxCHqGCdKs8XWhxQJhc",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.verificationMethod\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofVerificationMethodVc = klona(validVc);\n          delete noProofVerificationMethodVc.proof.verificationMethod;\n          const body = createRequestBody({vc: noProofVerificationMethodVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "-SBxCHqGCdKs8XWhxQJhc",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofValue\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofValueVc = klona(validVc);\n          delete noProofValueVc.proof.proofValue;\n          const body = createRequestBody({vc: noProofValueVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "-SBxCHqGCdKs8XWhxQJhc",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofPurpose\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofPurposeVc = klona(validVc);\n          delete noProofPurposeVc.proof.proofPurpose;\n          const body = createRequestBody({vc: noProofPurposeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "-SBxCHqGCdKs8XWhxQJhc",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidContextTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidContextType of invalidContextTypes) {\n          copyVc['@context'] = invalidContextType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "-SBxCHqGCdKs8XWhxQJhc",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" items are not strings.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidContextItemTypes = [[], {}, null, undefined, 10, true];\n          for(const invalidContextItemType of invalidContextItemTypes) {\n            copyVc['@context'] = [invalidContextItemType];\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "-SBxCHqGCdKs8XWhxQJhc",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidType of invalidTypes) {\n          copyVc.type = invalidType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "-SBxCHqGCdKs8XWhxQJhc",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" items are not strings.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypeItemTypes = [[], {}, null, undefined, 10, true];\n        for(const invalidItemType of invalidTypeItemTypes) {\n          copyVc.type = [invalidItemType];\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "-SBxCHqGCdKs8XWhxQJhc",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" is not an object or a string.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidIssuerTypes = [[], null, undefined, 10, true];\n          for(const invalidIssuerType of invalidIssuerTypes) {\n            copyVc.issuer = invalidIssuerType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "-SBxCHqGCdKs8XWhxQJhc",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" is not an object.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidCredentialSubjectTypes = [\n            'string', null, undefined, 10, true, []\n          ];\n          for(const invalidType of invalidCredentialSubjectTypes) {\n            copyVc.credentialSubject = invalidType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "-SBxCHqGCdKs8XWhxQJhc",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" is not an object.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidProofTypes = ['string', null, undefined, 10, true, []];\n        for(const invalidProofType of invalidProofTypes) {\n          copyVc.proof = invalidProofType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "-SBxCHqGCdKs8XWhxQJhc",
              "ctx": null
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook for \"MUST verify a valid VC.\"",
              "body": "async function() {\n        const issuer = matchingIssuers.get(issuerName).issuers.find(\n          issuer => issuer.tags.has('vc-api'));\n        validVc = await createInitialVc({issuer});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "-SBxCHqGCdKs8XWhxQJhc",
              "ctx": null,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1019,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 54,
              "_error": null,
              "state": "failed",
              "err": {
                "response": {},
                "request": {},
                "options": {
                  "credentials": "same-origin",
                  "headers": {},
                  "method": "POST",
                  "json": {
                    "credential": {
                      "@context": [
                        "https://www.w3.org/2018/credentials/v1",
                        "https://w3id.org/security/suites/ed25519-2020/v1"
                      ],
                      "type": [
                        "VerifiableCredential"
                      ],
                      "credentialSubject": {
                        "id": "did:key:z6MkhTNL7i2etLerDK8Acz5t528giE5KA4p75T6ka1E1D74r"
                      },
                      "id": "urn:uuid:1526d259-ee2c-4d5b-9be4-edf02c8cd034",
                      "issuer": "https://issuer.qa.veres.app/issuers/z1AEwLo7tZ3TrsPgRcgLJqQvR"
                    }
                  },
                  "agent": {
                    "_events": {},
                    "_eventsCount": 2,
                    "defaultPort": 443,
                    "protocol": "https:",
                    "options": {
                      "rejectUnauthorized": false,
                      "noDelay": true,
                      "path": null
                    },
                    "requests": {},
                    "sockets": {},
                    "freeSockets": {},
                    "keepAliveMsecs": 1000,
                    "keepAlive": false,
                    "maxSockets": null,
                    "maxFreeSockets": 256,
                    "scheduling": "lifo",
                    "maxTotalSockets": null,
                    "totalSocketCount": 0,
                    "maxCachedSessions": 100,
                    "_sessionCache": {
                      "map": {},
                      "list": []
                    }
                  },
                  "hooks": {
                    "beforeRequest": [],
                    "beforeRetry": [],
                    "beforeError": [],
                    "afterResponse": []
                  },
                  "prefixUrl": "",
                  "retry": {
                    "limit": 2,
                    "methods": [
                      "get",
                      "put",
                      "head",
                      "delete",
                      "options",
                      "trace"
                    ],
                    "statusCodes": [
                      408,
                      413,
                      429,
                      500,
                      502,
                      503,
                      504
                    ],
                    "afterStatusCodes": [
                      413,
                      429,
                      503
                    ],
                    "maxRetryAfter": null,
                    "backoffLimit": null
                  },
                  "throwHttpErrors": true,
                  "timeout": 10000,
                  "signal": {},
                  "duplex": "half",
                  "body": "{\"credential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/suites/ed25519-2020/v1\"],\"type\":[\"VerifiableCredential\"],\"credentialSubject\":{\"id\":\"did:key:z6MkhTNL7i2etLerDK8Acz5t528giE5KA4p75T6ka1E1D74r\"},\"id\":\"urn:uuid:1526d259-ee2c-4d5b-9be4-edf02c8cd034\",\"issuer\":\"https://issuer.qa.veres.app/issuers/z1AEwLo7tZ3TrsPgRcgLJqQvR\"}}"
                },
                "name": "HTTPError",
                "requestUrl": "https://issuer.qa.veres.app/issuers/z1AEwLo7tZ3TrsPgRcgLJqQvR/credentials/issue",
                "status": 403,
                "data": {
                  "name": "NotAllowedError",
                  "message": "Authorization error.",
                  "details": {
                    "httpStatusCode": 403
                  },
                  "cause": {
                    "name": "Error",
                    "message": "The invoked capability has expired.",
                    "details": {},
                    "cause": {
                      "message": "An unspecified error occurred.",
                      "name": "OperationError",
                      "type": "OperationError"
                    },
                    "stack": "Error: The invoked capability has expired.\n    at onError (file:///home/node/app/node_modules/@bedrock/service-core/lib/http/middleware.js:188:13)\n    at Module.handleError (file:///home/node/app/node_modules/@digitalbazaar/ezcap-express/lib/helpers.js:145:12)\n    at file:///home/node/app/node_modules/@digitalbazaar/ezcap-express/lib/authorize.js:137:15\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                    "type": "Error"
                  },
                  "stack": "NotAllowedError: Authorization error.\n    at onError (file:///home/node/app/node_modules/@bedrock/service-core/lib/http/middleware.js:195:9)\n    at Module.handleError (file:///home/node/app/node_modules/@digitalbazaar/ezcap-express/lib/helpers.js:145:12)\n    at file:///home/node/app/node_modules/@digitalbazaar/ezcap-express/lib/authorize.js:137:15\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                  "type": "NotAllowedError"
                }
              }
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "eP5A8nKf31Au3fuEytsgu",
          "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
          "_testId": "urn:uuid:0391b80f-11ef-4205-a47c-ad14daea7f03"
        },
        {
          "title": "SpruceID",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC.",
              "body": "async function() {\n        // this tells the test report which cell in the interop matrix\n        // the result goes in\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({vc: validVc});\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error);\n        should.exist(result);\n        should.exist(result.status);\n        result.status.should.equal(200);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "SfGgKl-zX-_to4Rcqs6fv",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noContextVc = klona(validVc);\n          delete noContextVc['@context'];\n          const body = createRequestBody({vc: noContextVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "SfGgKl-zX-_to4Rcqs6fv",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noTypeVc = klona(validVc);\n        delete noTypeVc.type;\n        const body = createRequestBody({vc: noTypeVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "SfGgKl-zX-_to4Rcqs6fv",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noIssuerVc = klona(validVc);\n        delete noIssuerVc.issuer;\n        const body = createRequestBody({vc: noIssuerVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "SfGgKl-zX-_to4Rcqs6fv",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noCredentialSubjectVc = klona(validVc);\n          delete noCredentialSubjectVc.credentialSubject;\n          const body = createRequestBody({vc: noCredentialSubjectVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "SfGgKl-zX-_to4Rcqs6fv",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noProofVc = klona(validVc);\n        delete noProofVc.proof;\n        const body = createRequestBody({vc: noProofVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "SfGgKl-zX-_to4Rcqs6fv",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.type\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofTypeVc = klona(validVc);\n          delete noProofTypeVc.proof.type;\n          const body = createRequestBody({vc: noProofTypeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "SfGgKl-zX-_to4Rcqs6fv",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.created\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofCreatedVc = klona(validVc);\n          delete noProofCreatedVc.proof.created;\n          const body = createRequestBody({vc: noProofCreatedVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "SfGgKl-zX-_to4Rcqs6fv",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.verificationMethod\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofVerificationMethodVc = klona(validVc);\n          delete noProofVerificationMethodVc.proof.verificationMethod;\n          const body = createRequestBody({vc: noProofVerificationMethodVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "SfGgKl-zX-_to4Rcqs6fv",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofValue\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofValueVc = klona(validVc);\n          delete noProofValueVc.proof.proofValue;\n          const body = createRequestBody({vc: noProofValueVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "SfGgKl-zX-_to4Rcqs6fv",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofPurpose\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofPurposeVc = klona(validVc);\n          delete noProofPurposeVc.proof.proofPurpose;\n          const body = createRequestBody({vc: noProofPurposeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "SfGgKl-zX-_to4Rcqs6fv",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidContextTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidContextType of invalidContextTypes) {\n          copyVc['@context'] = invalidContextType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "SfGgKl-zX-_to4Rcqs6fv",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" items are not strings.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidContextItemTypes = [[], {}, null, undefined, 10, true];\n          for(const invalidContextItemType of invalidContextItemTypes) {\n            copyVc['@context'] = [invalidContextItemType];\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "SfGgKl-zX-_to4Rcqs6fv",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidType of invalidTypes) {\n          copyVc.type = invalidType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "SfGgKl-zX-_to4Rcqs6fv",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" items are not strings.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypeItemTypes = [[], {}, null, undefined, 10, true];\n        for(const invalidItemType of invalidTypeItemTypes) {\n          copyVc.type = [invalidItemType];\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "SfGgKl-zX-_to4Rcqs6fv",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" is not an object or a string.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidIssuerTypes = [[], null, undefined, 10, true];\n          for(const invalidIssuerType of invalidIssuerTypes) {\n            copyVc.issuer = invalidIssuerType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "SfGgKl-zX-_to4Rcqs6fv",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" is not an object.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidCredentialSubjectTypes = [\n            'string', null, undefined, 10, true, []\n          ];\n          for(const invalidType of invalidCredentialSubjectTypes) {\n            copyVc.credentialSubject = invalidType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "SfGgKl-zX-_to4Rcqs6fv",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" is not an object.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidProofTypes = ['string', null, undefined, 10, true, []];\n        for(const invalidProofType of invalidProofTypes) {\n          copyVc.proof = invalidProofType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "SfGgKl-zX-_to4Rcqs6fv",
              "ctx": null
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook for \"MUST verify a valid VC.\"",
              "body": "async function() {\n        const issuer = matchingIssuers.get(issuerName).issuers.find(\n          issuer => issuer.tags.has('vc-api'));\n        validVc = await createInitialVc({issuer});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "SfGgKl-zX-_to4Rcqs6fv",
              "ctx": null,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1074,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 54,
              "_error": null,
              "state": "failed",
              "err": {
                "response": {},
                "request": {},
                "options": {
                  "credentials": "same-origin",
                  "headers": {},
                  "method": "POST",
                  "json": {
                    "credential": {
                      "@context": [
                        "https://www.w3.org/2018/credentials/v1",
                        "https://w3id.org/security/suites/ed25519-2020/v1"
                      ],
                      "type": [
                        "VerifiableCredential"
                      ],
                      "credentialSubject": {
                        "id": "did:key:z6MkhTNL7i2etLerDK8Acz5t528giE5KA4p75T6ka1E1D74r"
                      },
                      "id": "urn:uuid:73859e10-7167-4bde-8344-6246d85ca6b0",
                      "issuer": "https://issuer.qa.veres.app/issuers/z1AEwLo7tZ3TrsPgRcgLJqQvR"
                    }
                  },
                  "agent": {
                    "_events": {},
                    "_eventsCount": 2,
                    "defaultPort": 443,
                    "protocol": "https:",
                    "options": {
                      "rejectUnauthorized": false,
                      "noDelay": true,
                      "path": null
                    },
                    "requests": {},
                    "sockets": {},
                    "freeSockets": {},
                    "keepAliveMsecs": 1000,
                    "keepAlive": false,
                    "maxSockets": null,
                    "maxFreeSockets": 256,
                    "scheduling": "lifo",
                    "maxTotalSockets": null,
                    "totalSocketCount": 0,
                    "maxCachedSessions": 100,
                    "_sessionCache": {
                      "map": {},
                      "list": []
                    }
                  },
                  "hooks": {
                    "beforeRequest": [],
                    "beforeRetry": [],
                    "beforeError": [],
                    "afterResponse": []
                  },
                  "prefixUrl": "",
                  "retry": {
                    "limit": 2,
                    "methods": [
                      "get",
                      "put",
                      "head",
                      "delete",
                      "options",
                      "trace"
                    ],
                    "statusCodes": [
                      408,
                      413,
                      429,
                      500,
                      502,
                      503,
                      504
                    ],
                    "afterStatusCodes": [
                      413,
                      429,
                      503
                    ],
                    "maxRetryAfter": null,
                    "backoffLimit": null
                  },
                  "throwHttpErrors": true,
                  "timeout": 10000,
                  "signal": {},
                  "duplex": "half",
                  "body": "{\"credential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/suites/ed25519-2020/v1\"],\"type\":[\"VerifiableCredential\"],\"credentialSubject\":{\"id\":\"did:key:z6MkhTNL7i2etLerDK8Acz5t528giE5KA4p75T6ka1E1D74r\"},\"id\":\"urn:uuid:73859e10-7167-4bde-8344-6246d85ca6b0\",\"issuer\":\"https://issuer.qa.veres.app/issuers/z1AEwLo7tZ3TrsPgRcgLJqQvR\"}}"
                },
                "name": "HTTPError",
                "requestUrl": "https://issuer.qa.veres.app/issuers/z1AEwLo7tZ3TrsPgRcgLJqQvR/credentials/issue",
                "status": 403,
                "data": {
                  "name": "NotAllowedError",
                  "message": "Authorization error.",
                  "details": {
                    "httpStatusCode": 403
                  },
                  "cause": {
                    "name": "Error",
                    "message": "The invoked capability has expired.",
                    "details": {},
                    "cause": {
                      "message": "An unspecified error occurred.",
                      "name": "OperationError",
                      "type": "OperationError"
                    },
                    "stack": "Error: The invoked capability has expired.\n    at onError (file:///home/node/app/node_modules/@bedrock/service-core/lib/http/middleware.js:188:13)\n    at Module.handleError (file:///home/node/app/node_modules/@digitalbazaar/ezcap-express/lib/helpers.js:145:12)\n    at file:///home/node/app/node_modules/@digitalbazaar/ezcap-express/lib/authorize.js:137:15\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                    "type": "Error"
                  },
                  "stack": "NotAllowedError: Authorization error.\n    at onError (file:///home/node/app/node_modules/@bedrock/service-core/lib/http/middleware.js:195:9)\n    at Module.handleError (file:///home/node/app/node_modules/@digitalbazaar/ezcap-express/lib/helpers.js:145:12)\n    at file:///home/node/app/node_modules/@digitalbazaar/ezcap-express/lib/authorize.js:137:15\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                  "type": "NotAllowedError"
                }
              }
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "eP5A8nKf31Au3fuEytsgu",
          "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
          "_testId": "urn:uuid:2703f148-e5ca-4d61-9ea3-ad4c9d0a3c4b"
        },
        {
          "title": "Trinsic",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC.",
              "body": "async function() {\n        // this tells the test report which cell in the interop matrix\n        // the result goes in\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({vc: validVc});\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error);\n        should.exist(result);\n        should.exist(result.status);\n        result.status.should.equal(200);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "1IYwxYZ6qnF6Z-eXsXuyH",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noContextVc = klona(validVc);\n          delete noContextVc['@context'];\n          const body = createRequestBody({vc: noContextVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "1IYwxYZ6qnF6Z-eXsXuyH",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noTypeVc = klona(validVc);\n        delete noTypeVc.type;\n        const body = createRequestBody({vc: noTypeVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "1IYwxYZ6qnF6Z-eXsXuyH",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noIssuerVc = klona(validVc);\n        delete noIssuerVc.issuer;\n        const body = createRequestBody({vc: noIssuerVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "1IYwxYZ6qnF6Z-eXsXuyH",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noCredentialSubjectVc = klona(validVc);\n          delete noCredentialSubjectVc.credentialSubject;\n          const body = createRequestBody({vc: noCredentialSubjectVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "1IYwxYZ6qnF6Z-eXsXuyH",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noProofVc = klona(validVc);\n        delete noProofVc.proof;\n        const body = createRequestBody({vc: noProofVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "1IYwxYZ6qnF6Z-eXsXuyH",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.type\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofTypeVc = klona(validVc);\n          delete noProofTypeVc.proof.type;\n          const body = createRequestBody({vc: noProofTypeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "1IYwxYZ6qnF6Z-eXsXuyH",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.created\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofCreatedVc = klona(validVc);\n          delete noProofCreatedVc.proof.created;\n          const body = createRequestBody({vc: noProofCreatedVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "1IYwxYZ6qnF6Z-eXsXuyH",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.verificationMethod\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofVerificationMethodVc = klona(validVc);\n          delete noProofVerificationMethodVc.proof.verificationMethod;\n          const body = createRequestBody({vc: noProofVerificationMethodVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "1IYwxYZ6qnF6Z-eXsXuyH",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofValue\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofValueVc = klona(validVc);\n          delete noProofValueVc.proof.proofValue;\n          const body = createRequestBody({vc: noProofValueVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "1IYwxYZ6qnF6Z-eXsXuyH",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofPurpose\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofPurposeVc = klona(validVc);\n          delete noProofPurposeVc.proof.proofPurpose;\n          const body = createRequestBody({vc: noProofPurposeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "1IYwxYZ6qnF6Z-eXsXuyH",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidContextTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidContextType of invalidContextTypes) {\n          copyVc['@context'] = invalidContextType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "1IYwxYZ6qnF6Z-eXsXuyH",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" items are not strings.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidContextItemTypes = [[], {}, null, undefined, 10, true];\n          for(const invalidContextItemType of invalidContextItemTypes) {\n            copyVc['@context'] = [invalidContextItemType];\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "1IYwxYZ6qnF6Z-eXsXuyH",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidType of invalidTypes) {\n          copyVc.type = invalidType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "1IYwxYZ6qnF6Z-eXsXuyH",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" items are not strings.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypeItemTypes = [[], {}, null, undefined, 10, true];\n        for(const invalidItemType of invalidTypeItemTypes) {\n          copyVc.type = [invalidItemType];\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "1IYwxYZ6qnF6Z-eXsXuyH",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" is not an object or a string.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidIssuerTypes = [[], null, undefined, 10, true];\n          for(const invalidIssuerType of invalidIssuerTypes) {\n            copyVc.issuer = invalidIssuerType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "1IYwxYZ6qnF6Z-eXsXuyH",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" is not an object.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidCredentialSubjectTypes = [\n            'string', null, undefined, 10, true, []\n          ];\n          for(const invalidType of invalidCredentialSubjectTypes) {\n            copyVc.credentialSubject = invalidType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "1IYwxYZ6qnF6Z-eXsXuyH",
              "ctx": null
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" is not an object.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidProofTypes = ['string', null, undefined, 10, true, []];\n        for(const invalidProofType of invalidProofTypes) {\n          copyVc.proof = invalidProofType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "1IYwxYZ6qnF6Z-eXsXuyH",
              "ctx": null
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook for \"MUST verify a valid VC.\"",
              "body": "async function() {\n        const issuer = matchingIssuers.get(issuerName).issuers.find(\n          issuer => issuer.tags.has('vc-api'));\n        validVc = await createInitialVc({issuer});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "1IYwxYZ6qnF6Z-eXsXuyH",
              "ctx": null,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1129,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 55,
              "_error": null,
              "state": "failed",
              "err": {
                "response": {},
                "request": {},
                "options": {
                  "credentials": "same-origin",
                  "headers": {},
                  "method": "POST",
                  "json": {
                    "credential": {
                      "@context": [
                        "https://www.w3.org/2018/credentials/v1",
                        "https://w3id.org/security/suites/ed25519-2020/v1"
                      ],
                      "type": [
                        "VerifiableCredential"
                      ],
                      "credentialSubject": {
                        "id": "did:key:z6MkhTNL7i2etLerDK8Acz5t528giE5KA4p75T6ka1E1D74r"
                      },
                      "id": "urn:uuid:a93029f5-bc55-4100-b596-0448b2fb4ada",
                      "issuer": "https://issuer.qa.veres.app/issuers/z1AEwLo7tZ3TrsPgRcgLJqQvR"
                    }
                  },
                  "agent": {
                    "_events": {},
                    "_eventsCount": 2,
                    "defaultPort": 443,
                    "protocol": "https:",
                    "options": {
                      "rejectUnauthorized": false,
                      "noDelay": true,
                      "path": null
                    },
                    "requests": {},
                    "sockets": {},
                    "freeSockets": {},
                    "keepAliveMsecs": 1000,
                    "keepAlive": false,
                    "maxSockets": null,
                    "maxFreeSockets": 256,
                    "scheduling": "lifo",
                    "maxTotalSockets": null,
                    "totalSocketCount": 0,
                    "maxCachedSessions": 100,
                    "_sessionCache": {
                      "map": {},
                      "list": []
                    }
                  },
                  "hooks": {
                    "beforeRequest": [],
                    "beforeRetry": [],
                    "beforeError": [],
                    "afterResponse": []
                  },
                  "prefixUrl": "",
                  "retry": {
                    "limit": 2,
                    "methods": [
                      "get",
                      "put",
                      "head",
                      "delete",
                      "options",
                      "trace"
                    ],
                    "statusCodes": [
                      408,
                      413,
                      429,
                      500,
                      502,
                      503,
                      504
                    ],
                    "afterStatusCodes": [
                      413,
                      429,
                      503
                    ],
                    "maxRetryAfter": null,
                    "backoffLimit": null
                  },
                  "throwHttpErrors": true,
                  "timeout": 10000,
                  "signal": {},
                  "duplex": "half",
                  "body": "{\"credential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/suites/ed25519-2020/v1\"],\"type\":[\"VerifiableCredential\"],\"credentialSubject\":{\"id\":\"did:key:z6MkhTNL7i2etLerDK8Acz5t528giE5KA4p75T6ka1E1D74r\"},\"id\":\"urn:uuid:a93029f5-bc55-4100-b596-0448b2fb4ada\",\"issuer\":\"https://issuer.qa.veres.app/issuers/z1AEwLo7tZ3TrsPgRcgLJqQvR\"}}"
                },
                "name": "HTTPError",
                "requestUrl": "https://issuer.qa.veres.app/issuers/z1AEwLo7tZ3TrsPgRcgLJqQvR/credentials/issue",
                "status": 403,
                "data": {
                  "name": "NotAllowedError",
                  "message": "Authorization error.",
                  "details": {
                    "httpStatusCode": 403
                  },
                  "cause": {
                    "name": "Error",
                    "message": "The invoked capability has expired.",
                    "details": {},
                    "cause": {
                      "message": "An unspecified error occurred.",
                      "name": "OperationError",
                      "type": "OperationError"
                    },
                    "stack": "Error: The invoked capability has expired.\n    at onError (file:///home/node/app/node_modules/@bedrock/service-core/lib/http/middleware.js:188:13)\n    at Module.handleError (file:///home/node/app/node_modules/@digitalbazaar/ezcap-express/lib/helpers.js:145:12)\n    at file:///home/node/app/node_modules/@digitalbazaar/ezcap-express/lib/authorize.js:137:15\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                    "type": "Error"
                  },
                  "stack": "NotAllowedError: Authorization error.\n    at onError (file:///home/node/app/node_modules/@bedrock/service-core/lib/http/middleware.js:195:9)\n    at Module.handleError (file:///home/node/app/node_modules/@digitalbazaar/ezcap-express/lib/helpers.js:145:12)\n    at file:///home/node/app/node_modules/@digitalbazaar/ezcap-express/lib/authorize.js:137:15\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                  "type": "NotAllowedError"
                }
              }
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "eP5A8nKf31Au3fuEytsgu",
          "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
          "_testId": "urn:uuid:f0fa7e6c-871b-4671-81d1-355276acea4e"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "LuZh43j6Ro4NN0pl8J0bH",
      "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
      "summary": {},
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Verifier",
      "reportData": [],
      "_testId": "urn:uuid:25422cea-6b20-4bd2-b6ce-eeeae5bc55d8",
      "columns": [
        "ACA-py",
        "apicatalog.com",
        "Danube Tech",
        "Digital Bazaar",
        "EWF",
        "LearnCard",
        "Mavennet",
        "SecureKey",
        "SpruceID",
        "Trinsic"
      ],
      "rows": []
    },
    {
      "title": "Verify Credential - JWT",
      "ctx": null,
      "suites": [
        {
          "title": "SpruceID",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC.",
              "body": "async function() {\n        // this tells the test report which cell in the interop matrix\n        // the result goes in\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({vc: validVc});\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error);\n        should.exist(result);\n        should.exist(result.status);\n        result.status.should.equal(200);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "YDL3lhtTWXWpUa1eLPB-u",
              "ctx": null,
              "_testId": "urn:uuid:7ad5d169-a697-40a3-b944-265a8317a952",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST verify a valid VC."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1405,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 51,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noContextVc = klona(validVc);\n          delete noContextVc['@context'];\n          const body = createRequestBody({vc: noContextVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "YDL3lhtTWXWpUa1eLPB-u",
              "ctx": null,
              "_testId": "urn:uuid:145a030f-c4ea-48c9-9dfe-506cbf2c35bd",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"@context\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1457,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 41,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noTypeVc = klona(validVc);\n        delete noTypeVc.type;\n        const body = createRequestBody({vc: noTypeVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "YDL3lhtTWXWpUa1eLPB-u",
              "ctx": null,
              "_testId": "urn:uuid:53661043-45ce-4b96-85b3-7ad685918256",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1498,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 42,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noIssuerVc = klona(validVc);\n        delete noIssuerVc.issuer;\n        const body = createRequestBody({vc: noIssuerVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "YDL3lhtTWXWpUa1eLPB-u",
              "ctx": null,
              "_testId": "urn:uuid:fe3294ad-7a2a-47f8-a068-c4e1ab53097f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"issuer\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1540,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 44,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noCredentialSubjectVc = klona(validVc);\n          delete noCredentialSubjectVc.credentialSubject;\n          const body = createRequestBody({vc: noCredentialSubjectVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "YDL3lhtTWXWpUa1eLPB-u",
              "ctx": null,
              "_testId": "urn:uuid:0b9b6646-0a96-4847-aa44-45a83842fc7b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"credentialSubject\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1584,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 44,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noProofVc = klona(validVc);\n        delete noProofVc.proof;\n        const body = createRequestBody({vc: noProofVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "YDL3lhtTWXWpUa1eLPB-u",
              "ctx": null,
              "_testId": "urn:uuid:398662e3-2231-4e77-8d88-a54e5e975d79",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"proof\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1628,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 41,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.type\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofTypeVc = klona(validVc);\n          delete noProofTypeVc.proof.type;\n          const body = createRequestBody({vc: noProofTypeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "YDL3lhtTWXWpUa1eLPB-u",
              "ctx": null,
              "_testId": "urn:uuid:24f48e09-bb55-4bfe-a4c6-55d9cf7067e7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"proof.type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1669,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 43,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.created\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofCreatedVc = klona(validVc);\n          delete noProofCreatedVc.proof.created;\n          const body = createRequestBody({vc: noProofCreatedVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "YDL3lhtTWXWpUa1eLPB-u",
              "ctx": null,
              "_testId": "urn:uuid:0aae084c-f503-405f-a395-523c7bb8e311",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"proof.created\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1712,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 50,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Wed, 27 Nov 2024 20:15:45 GMT', 'content-type': 'application/json', 'content-length': '46', connection: 'keep-alive', 'cf-cache-status': 'DYNAMIC', server: 'cloudflare', 'cf-ray': '8e94cac25cf5633f-ORD', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Wed, 27 Nov 2024 20:15:45 GMT', 'content-type': 'application/json', 'content-length': '46', connection: 'keep-alive', 'cf-cache-status': 'DYNAMIC', server: 'cloudflare', 'cf-ray': '8e94cac25cf5633f-ORD', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:12:14)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js:141:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.verificationMethod\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofVerificationMethodVc = klona(validVc);\n          delete noProofVerificationMethodVc.proof.verificationMethod;\n          const body = createRequestBody({vc: noProofVerificationMethodVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "YDL3lhtTWXWpUa1eLPB-u",
              "ctx": null,
              "_testId": "urn:uuid:e24b9d9a-d1ac-4052-b7da-f16df3a5c5bf",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"proof.verificationMethod\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1762,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 40,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofValue\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofValueVc = klona(validVc);\n          delete noProofValueVc.proof.proofValue;\n          const body = createRequestBody({vc: noProofValueVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "YDL3lhtTWXWpUa1eLPB-u",
              "ctx": null,
              "_testId": "urn:uuid:b96e5f35-f8b1-443c-aabe-6123abea2aab",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"proof.proofValue\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1803,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 51,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofPurpose\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofPurposeVc = klona(validVc);\n          delete noProofPurposeVc.proof.proofPurpose;\n          const body = createRequestBody({vc: noProofPurposeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "YDL3lhtTWXWpUa1eLPB-u",
              "ctx": null,
              "_testId": "urn:uuid:40098018-f5f6-459b-8c8d-89e1baee3a55",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"proof.proofPurpose\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1855,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 50,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidContextTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidContextType of invalidContextTypes) {\n          copyVc['@context'] = invalidContextType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "YDL3lhtTWXWpUa1eLPB-u",
              "ctx": null,
              "_testId": "urn:uuid:3c3f7c82-77d9-4105-b066-21403a0b14af",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"@context\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1906,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 423,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" items are not strings.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidContextItemTypes = [[], {}, null, undefined, 10, true];\n          for(const invalidContextItemType of invalidContextItemTypes) {\n            copyVc['@context'] = [invalidContextItemType];\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "YDL3lhtTWXWpUa1eLPB-u",
              "ctx": null,
              "_testId": "urn:uuid:651e9118-a764-4a88-9344-a3512445f4e2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"@context\" items are not strings."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2330,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 264,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidType of invalidTypes) {\n          copyVc.type = invalidType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "YDL3lhtTWXWpUa1eLPB-u",
              "ctx": null,
              "_testId": "urn:uuid:5c330ec6-9a0f-4dd3-b48f-ee3810e3d937",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"type\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2595,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 259,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" items are not strings.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypeItemTypes = [[], {}, null, undefined, 10, true];\n        for(const invalidItemType of invalidTypeItemTypes) {\n          copyVc.type = [invalidItemType];\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "YDL3lhtTWXWpUa1eLPB-u",
              "ctx": null,
              "_testId": "urn:uuid:aa14856a-8505-44a8-8028-66b8e4020d18",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"type\" items are not strings."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2854,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 414,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" is not an object or a string.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidIssuerTypes = [[], null, undefined, 10, true];\n          for(const invalidIssuerType of invalidIssuerTypes) {\n            copyVc.issuer = invalidIssuerType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "YDL3lhtTWXWpUa1eLPB-u",
              "ctx": null,
              "_testId": "urn:uuid:f86d5009-5984-48df-8e41-d263544aa1ff",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"issuer\" is not an object or a string."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3269,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 235,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" is not an object.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidCredentialSubjectTypes = [\n            'string', null, undefined, 10, true, []\n          ];\n          for(const invalidType of invalidCredentialSubjectTypes) {\n            copyVc.credentialSubject = invalidType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "YDL3lhtTWXWpUa1eLPB-u",
              "ctx": null,
              "_testId": "urn:uuid:19ea6e59-44b1-4d94-84fc-a11186118a78",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"credentialSubject\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3505,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 386,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" is not an object.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidProofTypes = ['string', null, undefined, 10, true, []];\n        for(const invalidProofType of invalidProofTypes) {\n          copyVc.proof = invalidProofType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "YDL3lhtTWXWpUa1eLPB-u",
              "ctx": null,
              "_testId": "urn:uuid:01cb78eb-420d-4849-a431-82bdc5a6c524",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"proof\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3891,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 268,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"SpruceID\"",
              "body": "async function() {\n        const issuer = matchingIssuers.get(issuerNameJWT).issuers.find(\n          issuer => issuer.tags.has('JWT'));\n        validVc = await createInitialVc({issuer});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "YDL3lhtTWXWpUa1eLPB-u",
              "ctx": null,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1185,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 220,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "8YSucIchkKmp4oiW0k89o",
          "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
          "_testId": "urn:uuid:4a62ecd4-5a41-42e3-a0e5-a370400da91d"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "LuZh43j6Ro4NN0pl8J0bH",
      "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
      "summary": {},
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Verifier",
      "reportData": [],
      "_testId": "urn:uuid:c97184ab-fb17-4758-a8bd-76af16f5fa88",
      "columns": [
        "SpruceID"
      ],
      "rows": [
        {
          "id": "MUST verify a valid VC.",
          "cells": [
            {
              "type": "test",
              "title": "MUST verify a valid VC.",
              "body": "async function() {\n        // this tells the test report which cell in the interop matrix\n        // the result goes in\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({vc: validVc});\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error);\n        should.exist(result);\n        should.exist(result.status);\n        result.status.should.equal(200);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "YDL3lhtTWXWpUa1eLPB-u",
              "ctx": null,
              "_testId": "urn:uuid:7ad5d169-a697-40a3-b944-265a8317a952",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST verify a valid VC."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1405,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 51,
              "state": "passed",
              "speed": "medium"
            }
          ]
        },
        {
          "id": "MUST not verify if \"@context\" property is missing.",
          "cells": [
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noContextVc = klona(validVc);\n          delete noContextVc['@context'];\n          const body = createRequestBody({vc: noContextVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "YDL3lhtTWXWpUa1eLPB-u",
              "ctx": null,
              "_testId": "urn:uuid:145a030f-c4ea-48c9-9dfe-506cbf2c35bd",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"@context\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1457,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 41,
              "state": "passed",
              "speed": "medium"
            }
          ]
        },
        {
          "id": "MUST not verify if \"type\" property is missing.",
          "cells": [
            {
              "type": "test",
              "title": "MUST not verify if \"type\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noTypeVc = klona(validVc);\n        delete noTypeVc.type;\n        const body = createRequestBody({vc: noTypeVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "YDL3lhtTWXWpUa1eLPB-u",
              "ctx": null,
              "_testId": "urn:uuid:53661043-45ce-4b96-85b3-7ad685918256",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1498,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 42,
              "state": "passed",
              "speed": "medium"
            }
          ]
        },
        {
          "id": "MUST not verify if \"issuer\" property is missing.",
          "cells": [
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noIssuerVc = klona(validVc);\n        delete noIssuerVc.issuer;\n        const body = createRequestBody({vc: noIssuerVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "YDL3lhtTWXWpUa1eLPB-u",
              "ctx": null,
              "_testId": "urn:uuid:fe3294ad-7a2a-47f8-a068-c4e1ab53097f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"issuer\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1540,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 44,
              "state": "passed",
              "speed": "medium"
            }
          ]
        },
        {
          "id": "MUST not verify if \"credentialSubject\" property is missing.",
          "cells": [
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noCredentialSubjectVc = klona(validVc);\n          delete noCredentialSubjectVc.credentialSubject;\n          const body = createRequestBody({vc: noCredentialSubjectVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "YDL3lhtTWXWpUa1eLPB-u",
              "ctx": null,
              "_testId": "urn:uuid:0b9b6646-0a96-4847-aa44-45a83842fc7b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"credentialSubject\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1584,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 44,
              "state": "passed",
              "speed": "medium"
            }
          ]
        },
        {
          "id": "MUST not verify if \"proof\" property is missing.",
          "cells": [
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noProofVc = klona(validVc);\n        delete noProofVc.proof;\n        const body = createRequestBody({vc: noProofVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "YDL3lhtTWXWpUa1eLPB-u",
              "ctx": null,
              "_testId": "urn:uuid:398662e3-2231-4e77-8d88-a54e5e975d79",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"proof\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1628,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 41,
              "state": "passed",
              "speed": "medium"
            }
          ]
        },
        {
          "id": "MUST not verify if \"proof.type\" property is missing.",
          "cells": [
            {
              "type": "test",
              "title": "MUST not verify if \"proof.type\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofTypeVc = klona(validVc);\n          delete noProofTypeVc.proof.type;\n          const body = createRequestBody({vc: noProofTypeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "YDL3lhtTWXWpUa1eLPB-u",
              "ctx": null,
              "_testId": "urn:uuid:24f48e09-bb55-4bfe-a4c6-55d9cf7067e7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"proof.type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1669,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 43,
              "state": "passed",
              "speed": "medium"
            }
          ]
        },
        {
          "id": "MUST not verify if \"proof.created\" property is missing.",
          "cells": [
            {
              "type": "test",
              "title": "MUST not verify if \"proof.created\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofCreatedVc = klona(validVc);\n          delete noProofCreatedVc.proof.created;\n          const body = createRequestBody({vc: noProofCreatedVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "YDL3lhtTWXWpUa1eLPB-u",
              "ctx": null,
              "_testId": "urn:uuid:0aae084c-f503-405f-a395-523c7bb8e311",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"proof.created\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1712,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 50,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Wed, 27 Nov 2024 20:15:45 GMT', 'content-type': 'application/json', 'content-length': '46', connection: 'keep-alive', 'cf-cache-status': 'DYNAMIC', server: 'cloudflare', 'cf-ray': '8e94cac25cf5633f-ORD', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Wed, 27 Nov 2024 20:15:45 GMT', 'content-type': 'application/json', 'content-length': '46', connection: 'keep-alive', 'cf-cache-status': 'DYNAMIC', server: 'cloudflare', 'cf-ray': '8e94cac25cf5633f-ORD', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:12:14)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js:141:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ]
        },
        {
          "id": "MUST not verify if \"proof.verificationMethod\" property is missing.",
          "cells": [
            {
              "type": "test",
              "title": "MUST not verify if \"proof.verificationMethod\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofVerificationMethodVc = klona(validVc);\n          delete noProofVerificationMethodVc.proof.verificationMethod;\n          const body = createRequestBody({vc: noProofVerificationMethodVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "YDL3lhtTWXWpUa1eLPB-u",
              "ctx": null,
              "_testId": "urn:uuid:e24b9d9a-d1ac-4052-b7da-f16df3a5c5bf",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"proof.verificationMethod\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1762,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 40,
              "state": "passed",
              "speed": "medium"
            }
          ]
        },
        {
          "id": "MUST not verify if \"proof.proofValue\" property is missing.",
          "cells": [
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofValue\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofValueVc = klona(validVc);\n          delete noProofValueVc.proof.proofValue;\n          const body = createRequestBody({vc: noProofValueVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "YDL3lhtTWXWpUa1eLPB-u",
              "ctx": null,
              "_testId": "urn:uuid:b96e5f35-f8b1-443c-aabe-6123abea2aab",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"proof.proofValue\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1803,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 51,
              "state": "passed",
              "speed": "medium"
            }
          ]
        },
        {
          "id": "MUST not verify if \"proof.proofPurpose\" property is missing.",
          "cells": [
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofPurpose\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofPurposeVc = klona(validVc);\n          delete noProofPurposeVc.proof.proofPurpose;\n          const body = createRequestBody({vc: noProofPurposeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "YDL3lhtTWXWpUa1eLPB-u",
              "ctx": null,
              "_testId": "urn:uuid:40098018-f5f6-459b-8c8d-89e1baee3a55",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"proof.proofPurpose\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1855,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 50,
              "state": "passed",
              "speed": "medium"
            }
          ]
        },
        {
          "id": "MUST not verify if \"@context\" is not an array.",
          "cells": [
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidContextTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidContextType of invalidContextTypes) {\n          copyVc['@context'] = invalidContextType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "YDL3lhtTWXWpUa1eLPB-u",
              "ctx": null,
              "_testId": "urn:uuid:3c3f7c82-77d9-4105-b066-21403a0b14af",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"@context\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1906,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 423,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "MUST not verify if \"@context\" items are not strings.",
          "cells": [
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" items are not strings.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidContextItemTypes = [[], {}, null, undefined, 10, true];\n          for(const invalidContextItemType of invalidContextItemTypes) {\n            copyVc['@context'] = [invalidContextItemType];\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "YDL3lhtTWXWpUa1eLPB-u",
              "ctx": null,
              "_testId": "urn:uuid:651e9118-a764-4a88-9344-a3512445f4e2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"@context\" items are not strings."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2330,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 264,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "MUST not verify if \"type\" is not an array.",
          "cells": [
            {
              "type": "test",
              "title": "MUST not verify if \"type\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidType of invalidTypes) {\n          copyVc.type = invalidType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "YDL3lhtTWXWpUa1eLPB-u",
              "ctx": null,
              "_testId": "urn:uuid:5c330ec6-9a0f-4dd3-b48f-ee3810e3d937",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"type\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2595,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 259,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "MUST not verify if \"type\" items are not strings.",
          "cells": [
            {
              "type": "test",
              "title": "MUST not verify if \"type\" items are not strings.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypeItemTypes = [[], {}, null, undefined, 10, true];\n        for(const invalidItemType of invalidTypeItemTypes) {\n          copyVc.type = [invalidItemType];\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "YDL3lhtTWXWpUa1eLPB-u",
              "ctx": null,
              "_testId": "urn:uuid:aa14856a-8505-44a8-8028-66b8e4020d18",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"type\" items are not strings."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2854,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 414,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "MUST not verify if \"issuer\" is not an object or a string.",
          "cells": [
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" is not an object or a string.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidIssuerTypes = [[], null, undefined, 10, true];\n          for(const invalidIssuerType of invalidIssuerTypes) {\n            copyVc.issuer = invalidIssuerType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "YDL3lhtTWXWpUa1eLPB-u",
              "ctx": null,
              "_testId": "urn:uuid:f86d5009-5984-48df-8e41-d263544aa1ff",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"issuer\" is not an object or a string."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3269,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 235,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "MUST not verify if \"credentialSubject\" is not an object.",
          "cells": [
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" is not an object.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidCredentialSubjectTypes = [\n            'string', null, undefined, 10, true, []\n          ];\n          for(const invalidType of invalidCredentialSubjectTypes) {\n            copyVc.credentialSubject = invalidType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "YDL3lhtTWXWpUa1eLPB-u",
              "ctx": null,
              "_testId": "urn:uuid:19ea6e59-44b1-4d94-84fc-a11186118a78",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"credentialSubject\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3505,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 386,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "MUST not verify if \"proof\" is not an object.",
          "cells": [
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" is not an object.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidProofTypes = ['string', null, undefined, 10, true, []];\n        for(const invalidProofType of invalidProofTypes) {\n          copyVc.proof = invalidProofType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "YDL3lhtTWXWpUa1eLPB-u",
              "ctx": null,
              "_testId": "urn:uuid:01cb78eb-420d-4849-a431-82bdc5a6c524",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"proof\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3891,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 268,
              "state": "passed",
              "speed": "slow"
            }
          ]
        }
      ]
    },
    {
      "title": "Verify Presentation - Data Integrity",
      "ctx": null,
      "suites": [],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "LuZh43j6Ro4NN0pl8J0bH",
      "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/12-vp-di.js",
      "summary": {},
      "matrix": true,
      "report": true,
      "columns": [],
      "rows": []
    },
    {
      "title": "Verify Presentation - JWT",
      "ctx": null,
      "suites": [],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "LuZh43j6Ro4NN0pl8J0bH",
      "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/13-vp-jwt.js",
      "summary": {},
      "matrix": true,
      "report": true,
      "columns": [],
      "rows": []
    },
    {
      "title": "At Risk",
      "rowLabel": "Statement",
      "columnLabel": "Reason",
      "columns": [
        "At least 2 passing implementations"
      ],
      "rows": [
        {
          "id": "MUST verify a valid VC.",
          "cells": [
            {
              "state": "failed"
            }
          ]
        },
        {
          "id": "MUST not verify if \"@context\" property is missing.",
          "cells": [
            {
              "state": "failed"
            }
          ]
        },
        {
          "id": "MUST not verify if \"type\" property is missing.",
          "cells": [
            {
              "state": "failed"
            }
          ]
        },
        {
          "id": "MUST not verify if \"issuer\" property is missing.",
          "cells": [
            {
              "state": "failed"
            }
          ]
        },
        {
          "id": "MUST not verify if \"credentialSubject\" property is missing.",
          "cells": [
            {
              "state": "failed"
            }
          ]
        },
        {
          "id": "MUST not verify if \"proof\" property is missing.",
          "cells": [
            {
              "state": "failed"
            }
          ]
        },
        {
          "id": "MUST not verify if \"proof.type\" property is missing.",
          "cells": [
            {
              "state": "failed"
            }
          ]
        },
        {
          "id": "MUST not verify if \"proof.created\" property is missing.",
          "cells": [
            {
              "state": "failed"
            }
          ]
        },
        {
          "id": "MUST not verify if \"proof.verificationMethod\" property is missing.",
          "cells": [
            {
              "state": "failed"
            }
          ]
        },
        {
          "id": "MUST not verify if \"proof.proofValue\" property is missing.",
          "cells": [
            {
              "state": "failed"
            }
          ]
        },
        {
          "id": "MUST not verify if \"proof.proofPurpose\" property is missing.",
          "cells": [
            {
              "state": "failed"
            }
          ]
        },
        {
          "id": "MUST not verify if \"@context\" is not an array.",
          "cells": [
            {
              "state": "failed"
            }
          ]
        },
        {
          "id": "MUST not verify if \"@context\" items are not strings.",
          "cells": [
            {
              "state": "failed"
            }
          ]
        },
        {
          "id": "MUST not verify if \"type\" is not an array.",
          "cells": [
            {
              "state": "failed"
            }
          ]
        },
        {
          "id": "MUST not verify if \"type\" items are not strings.",
          "cells": [
            {
              "state": "failed"
            }
          ]
        },
        {
          "id": "MUST not verify if \"issuer\" is not an object or a string.",
          "cells": [
            {
              "state": "failed"
            }
          ]
        },
        {
          "id": "MUST not verify if \"credentialSubject\" is not an object.",
          "cells": [
            {
              "state": "failed"
            }
          ]
        },
        {
          "id": "MUST not verify if \"proof\" is not an object.",
          "cells": [
            {
              "state": "failed"
            }
          ]
        }
      ]
    }
  ],
  "tables": [],
  "summary": [],
  "respecConfig": {
    "specStatus": "unofficial",
    "shortName": "vc-api-verifier-test-suite",
    "subtitle": "Test Interoperability Report for Verifiable Credentials API Verifier",
    "github": "https://github.com/w3c-ccg/vc-api-verifier-test-suite",
    "edDraftURI": "https://w3c-ccg.github.io/vc-api/#verify-credential",
    "doJsonLd": true,
    "includePermalinks": false,
    "editors": [
      {
        "name": "Tashi D. Gyeltshen",
        "url": "https://github.com/JSAssassin",
        "company": "Digital Bazaar",
        "companyURL": "http://digitalbazaar.com/"
      }
    ],
    "authors": [
      {
        "name": "Tashi D. Gyeltshen",
        "url": "https://github.com/JSAssassin",
        "company": "Digital Bazaar",
        "companyURL": "http://digitalbazaar.com/"
      },
      {
        "name": "Manu Sporny",
        "url": "http://manu.sporny.org/",
        "company": "Digital Bazaar",
        "companyURL": "http://digitalbazaar.com/"
      }
    ]
  },
  "title": "VC API Verifier Interoperability Report 1.0",
  "stats": [
    "Tests passed 17/18 94%",
    "Tests failed 11/18 62%",
    "Failures 11",
    "Tests skipped 0",
    "Total tests 18"
  ],
  "statusMarkLabels": {
    "pending": {
      "icon": "🚫",
      "label": "Pending"
    },
    "passed": {
      "icon": "✓",
      "label": "Passed"
    },
    "failed": {
      "icon": "❌",
      "label": "Failed"
    },
    "accessDenied": {
      "icon": "⊘",
      "label": "Access Denied"
    },
    "timeout": {
      "icon": "⏱",
      "label": "Timeout"
    },
    "notImplemented": {
      "icon": "—",
      "label": "Not Implemented"
    }
  }
}