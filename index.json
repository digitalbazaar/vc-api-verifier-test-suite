{
  "matrices": [
    {
      "title": "Verify Credential - Data Integrity",
      "ctx": null,
      "suites": [
        {
          "title": "ACA-py",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC.",
              "body": "async function() {\n        // this tells the test report which cell in the interop matrix\n        // the result goes in\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({vc: validVc});\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error);\n        should.exist(result);\n        should.exist(result.status);\n        result.status.should.equal(200);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "GxzXjrrn6fYdu6CdWfWRT",
              "ctx": null,
              "_testId": "urn:uuid:81478156-0419-41af-8a04-b0fd90014964",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "ACA-py",
                "rowId": "MUST verify a valid VC."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 297,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2852,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",\"https://www.w3.org/ns/credentials/examples/v2\",\"https://w3id.org/security/suites/ed25519-2020/v1\"],\"id\":\"urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33\",\"type\":[\"VerifiableCredential\",\"AlumniCredential\"],\"name\":\"Alumni Credential\",\"description\":\"A minimum viable example of an Alumni Credential.\",\"issuer\":\"https://vc.example/issuers/5678\",\"validFrom\":\"2023-01-01T00:00:00Z\",\"credentialSubject\":{\"id\":\"did:example:abcdefgh\",\"alumniOf\":\"The School of Examples\"},\"proof\":{\"type\":\"Ed25519Signature2020\",\"created\":\"2023-02-24T23:36:38Z\",\"verificationMethod\":\"did:key:z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2#z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z57Mm1vboMtZiCyJ4aReZsv8co4Re64Y8GEjL1ZARzMbXZgkARFLqFs1P345NpPGG2hgCrS4nNdvJhpwnrNyG3kEF\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          "https://www.w3.org/ns/credentials/examples/v2",
                          "https://w3id.org/security/suites/ed25519-2020/v1"
                        ],
                        "id": "urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33",
                        "type": [
                          "VerifiableCredential",
                          "AlumniCredential"
                        ],
                        "name": "Alumni Credential",
                        "description": "A minimum viable example of an Alumni Credential.",
                        "issuer": "https://vc.example/issuers/5678",
                        "validFrom": "2023-01-01T00:00:00Z",
                        "credentialSubject": {
                          "id": "did:example:abcdefgh",
                          "alumniOf": "The School of Examples"
                        },
                        "proof": {
                          "type": "Ed25519Signature2020",
                          "created": "2023-02-24T23:36:38Z",
                          "verificationMethod": "did:key:z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2#z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z57Mm1vboMtZiCyJ4aReZsv8co4Re64Y8GEjL1ZARzMbXZgkARFLqFs1P345NpPGG2hgCrS4nNdvJhpwnrNyG3kEF"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://agent.opsec.id/vc/credentials/verify",
                  "status": 500
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:48:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noContextVc = klona(validVc);\n          delete noContextVc['@context'];\n          const body = createRequestBody({vc: noContextVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "GxzXjrrn6fYdu6CdWfWRT",
              "ctx": null,
              "_testId": "urn:uuid:13bc875f-8956-4968-8490-585e5ec5701d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "ACA-py",
                "rowId": "MUST not verify if \"@context\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3154,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 176,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected status code 400 or 422.: expected 500 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 500,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Expected status code 400 or 422.: expected 500 to be one of [ 400, 422 ]\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:15:26)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:63:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noTypeVc = klona(validVc);\n        delete noTypeVc.type;\n        const body = createRequestBody({vc: noTypeVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "GxzXjrrn6fYdu6CdWfWRT",
              "ctx": null,
              "_testId": "urn:uuid:4dbf4528-c678-471f-9a9b-03050a0eeb7b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "ACA-py",
                "rowId": "MUST not verify if \"type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3330,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 502,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected status code 400 or 422.: expected 500 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 500,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Expected status code 400 or 422.: expected 500 to be one of [ 400, 422 ]\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:15:26)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:74:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noIssuerVc = klona(validVc);\n        delete noIssuerVc.issuer;\n        const body = createRequestBody({vc: noIssuerVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "GxzXjrrn6fYdu6CdWfWRT",
              "ctx": null,
              "_testId": "urn:uuid:110e98a0-d0b1-46a2-9e1c-08d15003f13e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "ACA-py",
                "rowId": "MUST not verify if \"issuer\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3833,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 200,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected status code 400 or 422.: expected 500 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 500,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Expected status code 400 or 422.: expected 500 to be one of [ 400, 422 ]\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:15:26)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:85:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noCredentialSubjectVc = klona(validVc);\n          delete noCredentialSubjectVc.credentialSubject;\n          const body = createRequestBody({vc: noCredentialSubjectVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "GxzXjrrn6fYdu6CdWfWRT",
              "ctx": null,
              "_testId": "urn:uuid:6159e34b-e1b6-46c3-b5f0-8b2fb6a7f1c3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "ACA-py",
                "rowId": "MUST not verify if \"credentialSubject\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4033,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 197,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected status code 400 or 422.: expected 500 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 500,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Expected status code 400 or 422.: expected 500 to be one of [ 400, 422 ]\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:15:26)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:97:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noProofVc = klona(validVc);\n        delete noProofVc.proof;\n        const body = createRequestBody({vc: noProofVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "GxzXjrrn6fYdu6CdWfWRT",
              "ctx": null,
              "_testId": "urn:uuid:8c5c41a7-d381-4d35-860a-2d5e9cd62bc4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "ACA-py",
                "rowId": "MUST not verify if \"proof\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4230,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 199,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected status code 400 or 422.: expected 500 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 500,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Expected status code 400 or 422.: expected 500 to be one of [ 400, 422 ]\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:15:26)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:108:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.type\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofTypeVc = klona(validVc);\n          delete noProofTypeVc.proof.type;\n          const body = createRequestBody({vc: noProofTypeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "GxzXjrrn6fYdu6CdWfWRT",
              "ctx": null,
              "_testId": "urn:uuid:78d286f2-0e97-47c3-aaeb-09ef9d9dc541",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "ACA-py",
                "rowId": "MUST not verify if \"proof.type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4429,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 162,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected status code 400 or 422.: expected 500 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 500,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Expected status code 400 or 422.: expected 500 to be one of [ 400, 422 ]\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:15:26)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:120:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.created\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofCreatedVc = klona(validVc);\n          delete noProofCreatedVc.proof.created;\n          const body = createRequestBody({vc: noProofCreatedVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "GxzXjrrn6fYdu6CdWfWRT",
              "ctx": null,
              "_testId": "urn:uuid:55987988-ade3-47db-a2e9-6f566c103ed9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "ACA-py",
                "rowId": "MUST not verify if \"proof.created\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4592,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 179,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected status code 400 or 422.: expected 500 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 500,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Expected status code 400 or 422.: expected 500 to be one of [ 400, 422 ]\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:15:26)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:132:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.verificationMethod\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofVerificationMethodVc = klona(validVc);\n          delete noProofVerificationMethodVc.proof.verificationMethod;\n          const body = createRequestBody({vc: noProofVerificationMethodVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "GxzXjrrn6fYdu6CdWfWRT",
              "ctx": null,
              "_testId": "urn:uuid:53f6666a-3716-4a09-bb50-eda7c7d572ab",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "ACA-py",
                "rowId": "MUST not verify if \"proof.verificationMethod\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4772,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 258,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected status code 400 or 422.: expected 500 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 500,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Expected status code 400 or 422.: expected 500 to be one of [ 400, 422 ]\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:15:26)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:144:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofValue\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofValueVc = klona(validVc);\n          delete noProofValueVc.proof.proofValue;\n          const body = createRequestBody({vc: noProofValueVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "GxzXjrrn6fYdu6CdWfWRT",
              "ctx": null,
              "_testId": "urn:uuid:0b7f90c4-73db-41aa-ac70-f531e6d9cc37",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "ACA-py",
                "rowId": "MUST not verify if \"proof.proofValue\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5030,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 203,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected status code 400 or 422.: expected 500 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 500,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Expected status code 400 or 422.: expected 500 to be one of [ 400, 422 ]\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:15:26)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:156:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofPurpose\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofPurposeVc = klona(validVc);\n          delete noProofPurposeVc.proof.proofPurpose;\n          const body = createRequestBody({vc: noProofPurposeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "GxzXjrrn6fYdu6CdWfWRT",
              "ctx": null,
              "_testId": "urn:uuid:39da9a3b-7e3f-4b89-b226-f8cf31d99060",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "ACA-py",
                "rowId": "MUST not verify if \"proof.proofPurpose\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5233,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 196,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected status code 400 or 422.: expected 500 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 500,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Expected status code 400 or 422.: expected 500 to be one of [ 400, 422 ]\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:15:26)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:168:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidContextTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidContextType of invalidContextTypes) {\n          copyVc['@context'] = invalidContextType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "GxzXjrrn6fYdu6CdWfWRT",
              "ctx": null,
              "_testId": "urn:uuid:3cf9e570-7a91-49b3-8464-7555852c0b61",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "ACA-py",
                "rowId": "MUST not verify if \"@context\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5430,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 207,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected status code 400 or 422.: expected 500 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 500,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Expected status code 400 or 422.: expected 500 to be one of [ 400, 422 ]\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:15:26)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:181:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" items are not strings or objects.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidContextItemTypes = [[], null, undefined, 10, true];\n          for(const invalidContextItemType of invalidContextItemTypes) {\n            copyVc['@context'] = [invalidContextItemType];\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "GxzXjrrn6fYdu6CdWfWRT",
              "ctx": null,
              "_testId": "urn:uuid:aa2a54da-97fa-4779-901f-7ed6f47a90fb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "ACA-py",
                "rowId": "MUST not verify if \"@context\" items are not strings or objects."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5639,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 319,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected status code 400 or 422.: expected 500 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 500,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Expected status code 400 or 422.: expected 500 to be one of [ 400, 422 ]\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:15:26)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:196:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidType of invalidTypes) {\n          copyVc.type = invalidType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "GxzXjrrn6fYdu6CdWfWRT",
              "ctx": null,
              "_testId": "urn:uuid:c2b17641-9f6f-4f74-b99d-fba6bfa79e76",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "ACA-py",
                "rowId": "MUST not verify if \"type\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5958,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 270,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected status code 400 or 422.: expected 500 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 500,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Expected status code 400 or 422.: expected 500 to be one of [ 400, 422 ]\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:15:26)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:210:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" items are not strings.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypeItemTypes = [[], {}, null, undefined, 10, true];\n        for(const invalidItemType of invalidTypeItemTypes) {\n          copyVc.type = [invalidItemType];\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "GxzXjrrn6fYdu6CdWfWRT",
              "ctx": null,
              "_testId": "urn:uuid:17ffb062-9afd-4417-9d60-4bbcddd50c90",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "ACA-py",
                "rowId": "MUST not verify if \"type\" items are not strings."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6228,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 304,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected status code 400 or 422.: expected 500 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 500,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Expected status code 400 or 422.: expected 500 to be one of [ 400, 422 ]\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:15:26)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:224:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" is not an object or a string.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidIssuerTypes = [[], null, undefined, 10, true];\n          for(const invalidIssuerType of invalidIssuerTypes) {\n            copyVc.issuer = invalidIssuerType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "GxzXjrrn6fYdu6CdWfWRT",
              "ctx": null,
              "_testId": "urn:uuid:8a86bc72-ff0a-4514-9d6f-016d96f2f746",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "ACA-py",
                "rowId": "MUST not verify if \"issuer\" is not an object or a string."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6533,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 204,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected status code 400 or 422.: expected 500 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 500,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Expected status code 400 or 422.: expected 500 to be one of [ 400, 422 ]\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:15:26)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:239:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" is not an object.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidCredentialSubjectTypes = [\n            'string', null, undefined, 10, true, []\n          ];\n          for(const invalidType of invalidCredentialSubjectTypes) {\n            copyVc.credentialSubject = invalidType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "GxzXjrrn6fYdu6CdWfWRT",
              "ctx": null,
              "_testId": "urn:uuid:bebe4c3e-1117-474a-a3fa-95c14ee7f7ff",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "ACA-py",
                "rowId": "MUST not verify if \"credentialSubject\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6738,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 194,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected status code 400 or 422.: expected 500 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 500,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Expected status code 400 or 422.: expected 500 to be one of [ 400, 422 ]\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:15:26)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:256:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" is not an object.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidProofTypes = ['string', null, undefined, 10, true, []];\n        for(const invalidProofType of invalidProofTypes) {\n          copyVc.proof = invalidProofType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "GxzXjrrn6fYdu6CdWfWRT",
              "ctx": null,
              "_testId": "urn:uuid:f2b58256-8dfd-471c-9928-2801bdeb5930",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "ACA-py",
                "rowId": "MUST not verify if \"proof\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6932,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 199,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected status code 400 or 422.: expected 500 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 500,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Expected status code 400 or 422.: expected 500 to be one of [ 400, 422 ]\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:15:26)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:270:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "GUekxwv0jYJVenrY178j3",
          "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
          "_testId": "urn:uuid:d0afa85c-c354-4337-931c-79c724c38a55"
        },
        {
          "title": "apicatalog.com",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC.",
              "body": "async function() {\n        // this tells the test report which cell in the interop matrix\n        // the result goes in\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({vc: validVc});\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error);\n        should.exist(result);\n        should.exist(result.status);\n        result.status.should.equal(200);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "KfVxuXJq7Q8gTujeU9KkI",
              "ctx": null,
              "_testId": "urn:uuid:a99b720b-a812-4215-9a23-4f9312a5c406",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "MUST verify a valid VC."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7131,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 96,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",\"https://www.w3.org/ns/credentials/examples/v2\",\"https://w3id.org/security/suites/ed25519-2020/v1\"],\"id\":\"urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33\",\"type\":[\"VerifiableCredential\",\"AlumniCredential\"],\"name\":\"Alumni Credential\",\"description\":\"A minimum viable example of an Alumni Credential.\",\"issuer\":\"https://vc.example/issuers/5678\",\"validFrom\":\"2023-01-01T00:00:00Z\",\"credentialSubject\":{\"id\":\"did:example:abcdefgh\",\"alumniOf\":\"The School of Examples\"},\"proof\":{\"type\":\"Ed25519Signature2020\",\"created\":\"2023-02-24T23:36:38Z\",\"verificationMethod\":\"did:key:z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2#z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z57Mm1vboMtZiCyJ4aReZsv8co4Re64Y8GEjL1ZARzMbXZgkARFLqFs1P345NpPGG2hgCrS4nNdvJhpwnrNyG3kEF\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          "https://www.w3.org/ns/credentials/examples/v2",
                          "https://w3id.org/security/suites/ed25519-2020/v1"
                        ],
                        "id": "urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33",
                        "type": [
                          "VerifiableCredential",
                          "AlumniCredential"
                        ],
                        "name": "Alumni Credential",
                        "description": "A minimum viable example of an Alumni Credential.",
                        "issuer": "https://vc.example/issuers/5678",
                        "validFrom": "2023-01-01T00:00:00Z",
                        "credentialSubject": {
                          "id": "did:example:abcdefgh",
                          "alumniOf": "The School of Examples"
                        },
                        "proof": {
                          "type": "Ed25519Signature2020",
                          "created": "2023-02-24T23:36:38Z",
                          "verificationMethod": "did:key:z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2#z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z57Mm1vboMtZiCyJ4aReZsv8co4Re64Y8GEjL1ZARzMbXZgkARFLqFs1P345NpPGG2hgCrS4nNdvJhpwnrNyG3kEF"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.apicatalog.com/credentials/verify",
                  "status": 404
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:48:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noContextVc = klona(validVc);\n          delete noContextVc['@context'];\n          const body = createRequestBody({vc: noContextVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "KfVxuXJq7Q8gTujeU9KkI",
              "ctx": null,
              "_testId": "urn:uuid:b1f63de7-e696-4a6f-85b0-17f7277c5783",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "MUST not verify if \"@context\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7229,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 21,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected status code 400 or 422.: expected 404 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 404,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Expected status code 400 or 422.: expected 404 to be one of [ 400, 422 ]\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:15:26)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:63:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noTypeVc = klona(validVc);\n        delete noTypeVc.type;\n        const body = createRequestBody({vc: noTypeVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "KfVxuXJq7Q8gTujeU9KkI",
              "ctx": null,
              "_testId": "urn:uuid:b1a45488-34a6-4a73-89c5-e4856b76052c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "MUST not verify if \"type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7250,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 19,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected status code 400 or 422.: expected 404 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 404,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Expected status code 400 or 422.: expected 404 to be one of [ 400, 422 ]\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:15:26)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:74:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noIssuerVc = klona(validVc);\n        delete noIssuerVc.issuer;\n        const body = createRequestBody({vc: noIssuerVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "KfVxuXJq7Q8gTujeU9KkI",
              "ctx": null,
              "_testId": "urn:uuid:0e116be9-e138-4f31-90b6-80d3e493025c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "MUST not verify if \"issuer\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7269,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 20,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected status code 400 or 422.: expected 404 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 404,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Expected status code 400 or 422.: expected 404 to be one of [ 400, 422 ]\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:15:26)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:85:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noCredentialSubjectVc = klona(validVc);\n          delete noCredentialSubjectVc.credentialSubject;\n          const body = createRequestBody({vc: noCredentialSubjectVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "KfVxuXJq7Q8gTujeU9KkI",
              "ctx": null,
              "_testId": "urn:uuid:62c4872c-412e-40a4-bc80-496f0ba52bf2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "MUST not verify if \"credentialSubject\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7289,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 20,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected status code 400 or 422.: expected 404 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 404,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Expected status code 400 or 422.: expected 404 to be one of [ 400, 422 ]\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:15:26)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:97:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noProofVc = klona(validVc);\n        delete noProofVc.proof;\n        const body = createRequestBody({vc: noProofVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "KfVxuXJq7Q8gTujeU9KkI",
              "ctx": null,
              "_testId": "urn:uuid:936b95d4-93fb-491a-8aa7-df0aa311cd76",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "MUST not verify if \"proof\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7309,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 20,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected status code 400 or 422.: expected 404 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 404,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Expected status code 400 or 422.: expected 404 to be one of [ 400, 422 ]\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:15:26)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:108:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.type\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofTypeVc = klona(validVc);\n          delete noProofTypeVc.proof.type;\n          const body = createRequestBody({vc: noProofTypeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "KfVxuXJq7Q8gTujeU9KkI",
              "ctx": null,
              "_testId": "urn:uuid:3ed314d3-233c-436b-85ee-10acf91079dc",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "MUST not verify if \"proof.type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7329,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 20,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected status code 400 or 422.: expected 404 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 404,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Expected status code 400 or 422.: expected 404 to be one of [ 400, 422 ]\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:15:26)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:120:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.created\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofCreatedVc = klona(validVc);\n          delete noProofCreatedVc.proof.created;\n          const body = createRequestBody({vc: noProofCreatedVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "KfVxuXJq7Q8gTujeU9KkI",
              "ctx": null,
              "_testId": "urn:uuid:9b40aec5-cc02-4bcb-b49b-1cb668287343",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "MUST not verify if \"proof.created\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7349,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 20,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected status code 400 or 422.: expected 404 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 404,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Expected status code 400 or 422.: expected 404 to be one of [ 400, 422 ]\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:15:26)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:132:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.verificationMethod\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofVerificationMethodVc = klona(validVc);\n          delete noProofVerificationMethodVc.proof.verificationMethod;\n          const body = createRequestBody({vc: noProofVerificationMethodVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "KfVxuXJq7Q8gTujeU9KkI",
              "ctx": null,
              "_testId": "urn:uuid:3727b3ff-b326-4eb7-ba24-bac8fa7e8d29",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "MUST not verify if \"proof.verificationMethod\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7369,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 20,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected status code 400 or 422.: expected 404 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 404,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Expected status code 400 or 422.: expected 404 to be one of [ 400, 422 ]\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:15:26)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:144:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofValue\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofValueVc = klona(validVc);\n          delete noProofValueVc.proof.proofValue;\n          const body = createRequestBody({vc: noProofValueVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "KfVxuXJq7Q8gTujeU9KkI",
              "ctx": null,
              "_testId": "urn:uuid:ed03880e-6c2d-4e31-b52f-03cdd30cb0fb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "MUST not verify if \"proof.proofValue\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7390,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 19,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected status code 400 or 422.: expected 404 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 404,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Expected status code 400 or 422.: expected 404 to be one of [ 400, 422 ]\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:15:26)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:156:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofPurpose\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofPurposeVc = klona(validVc);\n          delete noProofPurposeVc.proof.proofPurpose;\n          const body = createRequestBody({vc: noProofPurposeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "KfVxuXJq7Q8gTujeU9KkI",
              "ctx": null,
              "_testId": "urn:uuid:d45def1d-018d-45a5-afdd-8e21bd9a5bd0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "MUST not verify if \"proof.proofPurpose\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7409,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 19,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected status code 400 or 422.: expected 404 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 404,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Expected status code 400 or 422.: expected 404 to be one of [ 400, 422 ]\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:15:26)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:168:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidContextTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidContextType of invalidContextTypes) {\n          copyVc['@context'] = invalidContextType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "KfVxuXJq7Q8gTujeU9KkI",
              "ctx": null,
              "_testId": "urn:uuid:76675b8d-c984-4d6b-a33c-149fcbe8194d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "MUST not verify if \"@context\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7428,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 18,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected status code 400 or 422.: expected 404 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 404,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Expected status code 400 or 422.: expected 404 to be one of [ 400, 422 ]\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:15:26)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:181:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" items are not strings or objects.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidContextItemTypes = [[], null, undefined, 10, true];\n          for(const invalidContextItemType of invalidContextItemTypes) {\n            copyVc['@context'] = [invalidContextItemType];\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "KfVxuXJq7Q8gTujeU9KkI",
              "ctx": null,
              "_testId": "urn:uuid:5a4366b4-bbe6-4a98-9cbb-b34f2f6d3bb0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "MUST not verify if \"@context\" items are not strings or objects."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7447,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 20,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected status code 400 or 422.: expected 404 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 404,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Expected status code 400 or 422.: expected 404 to be one of [ 400, 422 ]\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:15:26)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:196:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidType of invalidTypes) {\n          copyVc.type = invalidType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "KfVxuXJq7Q8gTujeU9KkI",
              "ctx": null,
              "_testId": "urn:uuid:11e0a396-77cd-4bde-a3fb-d0bb86c20e3e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "MUST not verify if \"type\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7468,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 19,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected status code 400 or 422.: expected 404 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 404,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Expected status code 400 or 422.: expected 404 to be one of [ 400, 422 ]\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:15:26)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:210:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" items are not strings.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypeItemTypes = [[], {}, null, undefined, 10, true];\n        for(const invalidItemType of invalidTypeItemTypes) {\n          copyVc.type = [invalidItemType];\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "KfVxuXJq7Q8gTujeU9KkI",
              "ctx": null,
              "_testId": "urn:uuid:44397367-6008-4390-81e9-ffaaf10e2371",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "MUST not verify if \"type\" items are not strings."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7486,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 19,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected status code 400 or 422.: expected 404 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 404,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Expected status code 400 or 422.: expected 404 to be one of [ 400, 422 ]\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:15:26)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:224:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" is not an object or a string.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidIssuerTypes = [[], null, undefined, 10, true];\n          for(const invalidIssuerType of invalidIssuerTypes) {\n            copyVc.issuer = invalidIssuerType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "KfVxuXJq7Q8gTujeU9KkI",
              "ctx": null,
              "_testId": "urn:uuid:25aae1cf-e31f-4b47-8a08-6ad87aae9b2e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "MUST not verify if \"issuer\" is not an object or a string."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7505,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 19,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected status code 400 or 422.: expected 404 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 404,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Expected status code 400 or 422.: expected 404 to be one of [ 400, 422 ]\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:15:26)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:239:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" is not an object.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidCredentialSubjectTypes = [\n            'string', null, undefined, 10, true, []\n          ];\n          for(const invalidType of invalidCredentialSubjectTypes) {\n            copyVc.credentialSubject = invalidType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "KfVxuXJq7Q8gTujeU9KkI",
              "ctx": null,
              "_testId": "urn:uuid:e74141b8-a2dc-4f1d-b49c-244ce18cf751",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "MUST not verify if \"credentialSubject\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7524,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 19,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected status code 400 or 422.: expected 404 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 404,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Expected status code 400 or 422.: expected 404 to be one of [ 400, 422 ]\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:15:26)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:256:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" is not an object.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidProofTypes = ['string', null, undefined, 10, true, []];\n        for(const invalidProofType of invalidProofTypes) {\n          copyVc.proof = invalidProofType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "KfVxuXJq7Q8gTujeU9KkI",
              "ctx": null,
              "_testId": "urn:uuid:3808de46-e102-4379-899e-60996d084e22",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "MUST not verify if \"proof\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7544,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 21,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected status code 400 or 422.: expected 404 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 404,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Expected status code 400 or 422.: expected 404 to be one of [ 400, 422 ]\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:15:26)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:270:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "GUekxwv0jYJVenrY178j3",
          "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
          "_testId": "urn:uuid:6752b1cb-ce88-44e6-ad3e-54af7ce0e4f1"
        },
        {
          "title": "Danube Tech",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC.",
              "body": "async function() {\n        // this tells the test report which cell in the interop matrix\n        // the result goes in\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({vc: validVc});\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error);\n        should.exist(result);\n        should.exist(result.status);\n        result.status.should.equal(200);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "WVyPSaO_o-99bqJElog3P",
              "ctx": null,
              "_testId": "urn:uuid:3c7e49aa-d07b-4f11-88c2-2110aa600fca",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST verify a valid VC."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7565,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1046,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",\"https://www.w3.org/ns/credentials/examples/v2\",\"https://w3id.org/security/suites/ed25519-2020/v1\"],\"id\":\"urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33\",\"type\":[\"VerifiableCredential\",\"AlumniCredential\"],\"name\":\"Alumni Credential\",\"description\":\"A minimum viable example of an Alumni Credential.\",\"issuer\":\"https://vc.example/issuers/5678\",\"validFrom\":\"2023-01-01T00:00:00Z\",\"credentialSubject\":{\"id\":\"did:example:abcdefgh\",\"alumniOf\":\"The School of Examples\"},\"proof\":{\"type\":\"Ed25519Signature2020\",\"created\":\"2023-02-24T23:36:38Z\",\"verificationMethod\":\"did:key:z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2#z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z57Mm1vboMtZiCyJ4aReZsv8co4Re64Y8GEjL1ZARzMbXZgkARFLqFs1P345NpPGG2hgCrS4nNdvJhpwnrNyG3kEF\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          "https://www.w3.org/ns/credentials/examples/v2",
                          "https://w3id.org/security/suites/ed25519-2020/v1"
                        ],
                        "id": "urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33",
                        "type": [
                          "VerifiableCredential",
                          "AlumniCredential"
                        ],
                        "name": "Alumni Credential",
                        "description": "A minimum viable example of an Alumni Credential.",
                        "issuer": "https://vc.example/issuers/5678",
                        "validFrom": "2023-01-01T00:00:00Z",
                        "credentialSubject": {
                          "id": "did:example:abcdefgh",
                          "alumniOf": "The School of Examples"
                        },
                        "proof": {
                          "type": "Ed25519Signature2020",
                          "created": "2023-02-24T23:36:38Z",
                          "verificationMethod": "did:key:z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2#z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z57Mm1vboMtZiCyJ4aReZsv8co4Re64Y8GEjL1ZARzMbXZgkARFLqFs1P345NpPGG2hgCrS4nNdvJhpwnrNyG3kEF"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://univerifier.io/1.0/credentials/verify",
                  "status": 400,
                  "data": {
                    "checks": []
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:48:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noContextVc = klona(validVc);\n          delete noContextVc['@context'];\n          const body = createRequestBody({vc: noContextVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "WVyPSaO_o-99bqJElog3P",
              "ctx": null,
              "_testId": "urn:uuid:13952c27-73ec-4959-a636-1c38f643ecc4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST not verify if \"@context\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8611,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 131,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noTypeVc = klona(validVc);\n        delete noTypeVc.type;\n        const body = createRequestBody({vc: noTypeVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "WVyPSaO_o-99bqJElog3P",
              "ctx": null,
              "_testId": "urn:uuid:3104cf88-7c56-4661-ac8d-54f548231cd1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST not verify if \"type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8743,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 609,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noIssuerVc = klona(validVc);\n        delete noIssuerVc.issuer;\n        const body = createRequestBody({vc: noIssuerVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "WVyPSaO_o-99bqJElog3P",
              "ctx": null,
              "_testId": "urn:uuid:484ab1dc-401e-446b-9276-52a8a9b364ee",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST not verify if \"issuer\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9352,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 400,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noCredentialSubjectVc = klona(validVc);\n          delete noCredentialSubjectVc.credentialSubject;\n          const body = createRequestBody({vc: noCredentialSubjectVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "WVyPSaO_o-99bqJElog3P",
              "ctx": null,
              "_testId": "urn:uuid:84ef6475-33e2-4963-881d-95a46cef5a91",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST not verify if \"credentialSubject\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9753,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 409,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noProofVc = klona(validVc);\n        delete noProofVc.proof;\n        const body = createRequestBody({vc: noProofVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "WVyPSaO_o-99bqJElog3P",
              "ctx": null,
              "_testId": "urn:uuid:753eedae-536a-482f-a9cb-8290dfdc9d88",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST not verify if \"proof\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10163,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 396,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.type\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofTypeVc = klona(validVc);\n          delete noProofTypeVc.proof.type;\n          const body = createRequestBody({vc: noProofTypeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "WVyPSaO_o-99bqJElog3P",
              "ctx": null,
              "_testId": "urn:uuid:b9ba6f68-2f7c-4e86-8edc-43d0f6f838fd",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST not verify if \"proof.type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10559,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 407,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.created\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofCreatedVc = klona(validVc);\n          delete noProofCreatedVc.proof.created;\n          const body = createRequestBody({vc: noProofCreatedVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "WVyPSaO_o-99bqJElog3P",
              "ctx": null,
              "_testId": "urn:uuid:a445f166-2353-4a71-ac1d-837c7707ef34",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST not verify if \"proof.created\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10967,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 389,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.verificationMethod\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofVerificationMethodVc = klona(validVc);\n          delete noProofVerificationMethodVc.proof.verificationMethod;\n          const body = createRequestBody({vc: noProofVerificationMethodVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "WVyPSaO_o-99bqJElog3P",
              "ctx": null,
              "_testId": "urn:uuid:9ef8ab5b-f2f7-4a07-a2c9-12801da006c3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST not verify if \"proof.verificationMethod\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11356,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 392,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofValue\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofValueVc = klona(validVc);\n          delete noProofValueVc.proof.proofValue;\n          const body = createRequestBody({vc: noProofValueVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "WVyPSaO_o-99bqJElog3P",
              "ctx": null,
              "_testId": "urn:uuid:3deb8127-c667-4b2b-a60c-816e59c06706",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST not verify if \"proof.proofValue\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11749,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 421,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofPurpose\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofPurposeVc = klona(validVc);\n          delete noProofPurposeVc.proof.proofPurpose;\n          const body = createRequestBody({vc: noProofPurposeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "WVyPSaO_o-99bqJElog3P",
              "ctx": null,
              "_testId": "urn:uuid:e0cbf522-05a8-43c3-822b-f7038864c73a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST not verify if \"proof.proofPurpose\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 12170,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 391,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidContextTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidContextType of invalidContextTypes) {\n          copyVc['@context'] = invalidContextType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "WVyPSaO_o-99bqJElog3P",
              "ctx": null,
              "_testId": "urn:uuid:177e4b82-de4d-471f-a535-2257d08496b3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST not verify if \"@context\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 12560,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1265,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" items are not strings or objects.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidContextItemTypes = [[], null, undefined, 10, true];\n          for(const invalidContextItemType of invalidContextItemTypes) {\n            copyVc['@context'] = [invalidContextItemType];\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "WVyPSaO_o-99bqJElog3P",
              "ctx": null,
              "_testId": "urn:uuid:1cb027bf-67d2-4f49-9e55-0d38db9c3c98",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST not verify if \"@context\" items are not strings or objects."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13826,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 655,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidType of invalidTypes) {\n          copyVc.type = invalidType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "WVyPSaO_o-99bqJElog3P",
              "ctx": null,
              "_testId": "urn:uuid:c51acc94-9398-402f-a07e-fb22c7298a90",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST not verify if \"type\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14481,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2576,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" items are not strings.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypeItemTypes = [[], {}, null, undefined, 10, true];\n        for(const invalidItemType of invalidTypeItemTypes) {\n          copyVc.type = [invalidItemType];\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "WVyPSaO_o-99bqJElog3P",
              "ctx": null,
              "_testId": "urn:uuid:60db1cac-4aa7-4426-b7d2-2a6e52174414",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST not verify if \"type\" items are not strings."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17057,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2550,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" is not an object or a string.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidIssuerTypes = [[], null, undefined, 10, true];\n          for(const invalidIssuerType of invalidIssuerTypes) {\n            copyVc.issuer = invalidIssuerType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "WVyPSaO_o-99bqJElog3P",
              "ctx": null,
              "_testId": "urn:uuid:ae31d99e-e952-4dd5-bafa-2ab328015b04",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST not verify if \"issuer\" is not an object or a string."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19606,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1974,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" is not an object.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidCredentialSubjectTypes = [\n            'string', null, undefined, 10, true, []\n          ];\n          for(const invalidType of invalidCredentialSubjectTypes) {\n            copyVc.credentialSubject = invalidType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "WVyPSaO_o-99bqJElog3P",
              "ctx": null,
              "_testId": "urn:uuid:3a7cf1a6-22d9-4728-8fea-422a432a62cd",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST not verify if \"credentialSubject\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21581,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1625,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" is not an object.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidProofTypes = ['string', null, undefined, 10, true, []];\n        for(const invalidProofType of invalidProofTypes) {\n          copyVc.proof = invalidProofType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "WVyPSaO_o-99bqJElog3P",
              "ctx": null,
              "_testId": "urn:uuid:87d9f163-2c12-4c64-91ec-a8d7ff935436",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST not verify if \"proof\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 23206,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 861,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "GUekxwv0jYJVenrY178j3",
          "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
          "_testId": "urn:uuid:f4413f10-d198-4e83-b07b-6c8f955b7b3e"
        },
        {
          "title": "Digital Bazaar",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC.",
              "body": "async function() {\n        // this tells the test report which cell in the interop matrix\n        // the result goes in\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({vc: validVc});\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error);\n        should.exist(result);\n        should.exist(result.status);\n        result.status.should.equal(200);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "KhZ7riDdYoRBHWyi6nR1w",
              "ctx": null,
              "_testId": "urn:uuid:0701bf50-e629-4ce7-aa45-8a765ee31fc3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST verify a valid VC."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 24068,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 748,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          "https://www.w3.org/ns/credentials/examples/v2",
                          "https://w3id.org/security/suites/ed25519-2020/v1"
                        ],
                        "id": "urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33",
                        "type": [
                          "VerifiableCredential",
                          "AlumniCredential"
                        ],
                        "name": "Alumni Credential",
                        "description": "A minimum viable example of an Alumni Credential.",
                        "issuer": "https://vc.example/issuers/5678",
                        "validFrom": "2023-01-01T00:00:00Z",
                        "credentialSubject": {
                          "id": "did:example:abcdefgh",
                          "alumniOf": "The School of Examples"
                        },
                        "proof": {
                          "type": "Ed25519Signature2020",
                          "created": "2023-02-24T23:36:38Z",
                          "verificationMethod": "did:key:z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2#z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z57Mm1vboMtZiCyJ4aReZsv8co4Re64Y8GEjL1ZARzMbXZgkARFLqFs1P345NpPGG2hgCrS4nNdvJhpwnrNyG3kEF"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half",
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",\"https://www.w3.org/ns/credentials/examples/v2\",\"https://w3id.org/security/suites/ed25519-2020/v1\"],\"id\":\"urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33\",\"type\":[\"VerifiableCredential\",\"AlumniCredential\"],\"name\":\"Alumni Credential\",\"description\":\"A minimum viable example of an Alumni Credential.\",\"issuer\":\"https://vc.example/issuers/5678\",\"validFrom\":\"2023-01-01T00:00:00Z\",\"credentialSubject\":{\"id\":\"did:example:abcdefgh\",\"alumniOf\":\"The School of Examples\"},\"proof\":{\"type\":\"Ed25519Signature2020\",\"created\":\"2023-02-24T23:36:38Z\",\"verificationMethod\":\"did:key:z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2#z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z57Mm1vboMtZiCyJ4aReZsv8co4Re64Y8GEjL1ZARzMbXZgkARFLqFs1P345NpPGG2hgCrS4nNdvJhpwnrNyG3kEF\"}},\"options\":{\"checks\":[\"proof\"]}}"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc2.veresverifier.dev/verifiers/z19oNgowF5rQkDPiajxdD1uTG/credentials/verify",
                  "status": 400,
                  "data": {
                    "verified": false,
                    "results": [
                      {
                        "proof": {
                          "@context": [
                            "https://www.w3.org/ns/credentials/v2",
                            "https://www.w3.org/ns/credentials/examples/v2",
                            "https://w3id.org/security/suites/ed25519-2020/v1"
                          ],
                          "type": "Ed25519Signature2020",
                          "created": "2023-02-24T23:36:38Z",
                          "verificationMethod": "did:key:z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2#z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z57Mm1vboMtZiCyJ4aReZsv8co4Re64Y8GEjL1ZARzMbXZgkARFLqFs1P345NpPGG2hgCrS4nNdvJhpwnrNyG3kEF"
                        },
                        "verified": false,
                        "verificationMethod": {
                          "@context": "https://w3id.org/security/suites/ed25519-2020/v1",
                          "id": "did:key:z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2#z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2",
                          "type": "Ed25519VerificationKey2020",
                          "controller": "did:key:z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2",
                          "publicKeyMultibase": "z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2"
                        },
                        "error": {
                          "name": "VerificationError",
                          "message": "Credential issuer must match the verification method controller."
                        },
                        "purposeResult": {
                          "valid": false,
                          "error": {
                            "name": "Error",
                            "message": "Credential issuer must match the verification method controller.",
                            "stack": "Error: Credential issuer must match the verification method controller.\n    at CredentialIssuancePurpose.validate (file:///home/node/app/node_modules/@digitalbazaar/vc/lib/CredentialIssuancePurpose.js:70:15)\n    at async /home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:305:27\n    at async Promise.all (index 0)\n    at async _verify (/home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:291:3)\n    at async ProofSet.verify (/home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:191:23)\n    at async Object.verify (/home/node/app/node_modules/jsonld-signatures/lib/jsonld-signatures.js:169:18)\n    at async _verifyCredential (file:///home/node/app/node_modules/@digitalbazaar/vc/lib/index.js:346:18)\n    at async Module.verifyCredential (file:///home/node/app/node_modules/@digitalbazaar/vc/lib/index.js:291:12)\n    at async Module.verifyCredential (file:///home/node/app/node_modules/@bedrock/vc-verifier/lib/di.js:17:18)\n    at async file:///home/node/app/node_modules/@bedrock/vc-verifier/lib/http.js:84:24"
                          }
                        }
                      }
                    ],
                    "error": {
                      "name": "VerificationError",
                      "errors": [
                        {
                          "name": "Error",
                          "message": "Credential issuer must match the verification method controller.",
                          "stack": "Error: Credential issuer must match the verification method controller.\n    at CredentialIssuancePurpose.validate (file:///home/node/app/node_modules/@digitalbazaar/vc/lib/CredentialIssuancePurpose.js:70:15)\n    at async /home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:305:27\n    at async Promise.all (index 0)\n    at async _verify (/home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:291:3)\n    at async ProofSet.verify (/home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:191:23)\n    at async Object.verify (/home/node/app/node_modules/jsonld-signatures/lib/jsonld-signatures.js:169:18)\n    at async _verifyCredential (file:///home/node/app/node_modules/@digitalbazaar/vc/lib/index.js:346:18)\n    at async Module.verifyCredential (file:///home/node/app/node_modules/@digitalbazaar/vc/lib/index.js:291:12)\n    at async Module.verifyCredential (file:///home/node/app/node_modules/@bedrock/vc-verifier/lib/di.js:17:18)\n    at async file:///home/node/app/node_modules/@bedrock/vc-verifier/lib/http.js:84:24"
                        }
                      ],
                      "message": "Verification error(s)."
                    },
                    "checks": [
                      {
                        "check": [
                          "proof"
                        ],
                        "id": "urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33",
                        "error": "Credential issuer must match the verification method controller.",
                        "verificationMethod": "did:key:z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2#z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2"
                      }
                    ]
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:48:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noContextVc = klona(validVc);\n          delete noContextVc['@context'];\n          const body = createRequestBody({vc: noContextVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "KhZ7riDdYoRBHWyi6nR1w",
              "ctx": null,
              "_testId": "urn:uuid:a8c30367-18cf-4e30-8afd-f64c270dd8b7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST not verify if \"@context\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 24816,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 49,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noTypeVc = klona(validVc);\n        delete noTypeVc.type;\n        const body = createRequestBody({vc: noTypeVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "KhZ7riDdYoRBHWyi6nR1w",
              "ctx": null,
              "_testId": "urn:uuid:855d9223-ae60-4f85-b148-6fafab8e2f8b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST not verify if \"type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 24866,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 46,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noIssuerVc = klona(validVc);\n        delete noIssuerVc.issuer;\n        const body = createRequestBody({vc: noIssuerVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "KhZ7riDdYoRBHWyi6nR1w",
              "ctx": null,
              "_testId": "urn:uuid:1d05cc44-2fd1-471d-a546-1f3e8bee510e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST not verify if \"issuer\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 24912,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 47,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noCredentialSubjectVc = klona(validVc);\n          delete noCredentialSubjectVc.credentialSubject;\n          const body = createRequestBody({vc: noCredentialSubjectVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "KhZ7riDdYoRBHWyi6nR1w",
              "ctx": null,
              "_testId": "urn:uuid:5d4a56b7-5709-4331-909d-08857e6d422f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST not verify if \"credentialSubject\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 24959,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 47,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noProofVc = klona(validVc);\n        delete noProofVc.proof;\n        const body = createRequestBody({vc: noProofVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "KhZ7riDdYoRBHWyi6nR1w",
              "ctx": null,
              "_testId": "urn:uuid:392ff33a-a7c5-4ed1-9090-3cc6738de2aa",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST not verify if \"proof\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25006,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 51,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.type\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofTypeVc = klona(validVc);\n          delete noProofTypeVc.proof.type;\n          const body = createRequestBody({vc: noProofTypeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "KhZ7riDdYoRBHWyi6nR1w",
              "ctx": null,
              "_testId": "urn:uuid:a2dcbc29-939f-42c2-a4b7-9267f0837c65",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST not verify if \"proof.type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25057,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 189,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.created\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofCreatedVc = klona(validVc);\n          delete noProofCreatedVc.proof.created;\n          const body = createRequestBody({vc: noProofCreatedVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "KhZ7riDdYoRBHWyi6nR1w",
              "ctx": null,
              "_testId": "urn:uuid:62de57df-9651-4683-8b7c-a93c38d8022a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST not verify if \"proof.created\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25246,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 62,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.verificationMethod\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofVerificationMethodVc = klona(validVc);\n          delete noProofVerificationMethodVc.proof.verificationMethod;\n          const body = createRequestBody({vc: noProofVerificationMethodVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "KhZ7riDdYoRBHWyi6nR1w",
              "ctx": null,
              "_testId": "urn:uuid:b6214777-02b1-454f-87cf-107d3cce4ada",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST not verify if \"proof.verificationMethod\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25308,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 185,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofValue\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofValueVc = klona(validVc);\n          delete noProofValueVc.proof.proofValue;\n          const body = createRequestBody({vc: noProofValueVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "KhZ7riDdYoRBHWyi6nR1w",
              "ctx": null,
              "_testId": "urn:uuid:4b9a2599-117a-4f16-9a18-78fd0eda6fbb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST not verify if \"proof.proofValue\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25493,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 53,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofPurpose\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofPurposeVc = klona(validVc);\n          delete noProofPurposeVc.proof.proofPurpose;\n          const body = createRequestBody({vc: noProofPurposeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "KhZ7riDdYoRBHWyi6nR1w",
              "ctx": null,
              "_testId": "urn:uuid:39774547-3e1a-4ebd-94ec-a1ad7354910d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST not verify if \"proof.proofPurpose\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25547,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 51,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidContextTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidContextType of invalidContextTypes) {\n          copyVc['@context'] = invalidContextType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "KhZ7riDdYoRBHWyi6nR1w",
              "ctx": null,
              "_testId": "urn:uuid:a2c0366c-3f4a-4a11-88c8-dc030fd5f352",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST not verify if \"@context\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25598,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 269,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" items are not strings or objects.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidContextItemTypes = [[], null, undefined, 10, true];\n          for(const invalidContextItemType of invalidContextItemTypes) {\n            copyVc['@context'] = [invalidContextItemType];\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "KhZ7riDdYoRBHWyi6nR1w",
              "ctx": null,
              "_testId": "urn:uuid:d69d81ca-e066-438d-952d-bcf78c18f660",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST not verify if \"@context\" items are not strings or objects."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25866,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 229,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidType of invalidTypes) {\n          copyVc.type = invalidType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "KhZ7riDdYoRBHWyi6nR1w",
              "ctx": null,
              "_testId": "urn:uuid:a033ec5d-aea6-406d-b393-39d2226409e6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST not verify if \"type\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26096,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 262,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" items are not strings.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypeItemTypes = [[], {}, null, undefined, 10, true];\n        for(const invalidItemType of invalidTypeItemTypes) {\n          copyVc.type = [invalidItemType];\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "KhZ7riDdYoRBHWyi6nR1w",
              "ctx": null,
              "_testId": "urn:uuid:ede56ee8-dd98-4eaf-beae-5ff6d664a734",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST not verify if \"type\" items are not strings."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26357,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 260,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" is not an object or a string.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidIssuerTypes = [[], null, undefined, 10, true];\n          for(const invalidIssuerType of invalidIssuerTypes) {\n            copyVc.issuer = invalidIssuerType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "KhZ7riDdYoRBHWyi6nR1w",
              "ctx": null,
              "_testId": "urn:uuid:1dbb5678-d7c0-43c6-b02d-83e454cca8dc",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST not verify if \"issuer\" is not an object or a string."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26617,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 215,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" is not an object.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidCredentialSubjectTypes = [\n            'string', null, undefined, 10, true, []\n          ];\n          for(const invalidType of invalidCredentialSubjectTypes) {\n            copyVc.credentialSubject = invalidType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "KhZ7riDdYoRBHWyi6nR1w",
              "ctx": null,
              "_testId": "urn:uuid:9efd8779-0b9c-4fe0-980c-f6fe7c24bbbc",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST not verify if \"credentialSubject\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26833,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 269,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" is not an object.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidProofTypes = ['string', null, undefined, 10, true, []];\n        for(const invalidProofType of invalidProofTypes) {\n          copyVc.proof = invalidProofType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "KhZ7riDdYoRBHWyi6nR1w",
              "ctx": null,
              "_testId": "urn:uuid:6fc90d64-d74f-4af8-a36f-d34b35364da1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST not verify if \"proof\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27101,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 272,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "GUekxwv0jYJVenrY178j3",
          "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
          "_testId": "urn:uuid:c19450ec-520e-4e62-9021-f397a227e735"
        },
        {
          "title": "Digital Credentials Consortium",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC.",
              "body": "async function() {\n        // this tells the test report which cell in the interop matrix\n        // the result goes in\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({vc: validVc});\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error);\n        should.exist(result);\n        should.exist(result.status);\n        result.status.should.equal(200);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "bfe5DH-bYGqh4ddPcLhb8",
              "ctx": null,
              "_testId": "urn:uuid:e56f641c-76b9-471c-9c91-f17efc104c8c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Credentials Consortium",
                "rowId": "MUST verify a valid VC."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27374,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 281,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected HTTPError: An error occurred in the signi… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",\"https://www.w3.org/ns/credentials/examples/v2\",\"https://w3id.org/security/suites/ed25519-2020/v1\"],\"id\":\"urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33\",\"type\":[\"VerifiableCredential\",\"AlumniCredential\"],\"name\":\"Alumni Credential\",\"description\":\"A minimum viable example of an Alumni Credential.\",\"issuer\":\"https://vc.example/issuers/5678\",\"validFrom\":\"2023-01-01T00:00:00Z\",\"credentialSubject\":{\"id\":\"did:example:abcdefgh\",\"alumniOf\":\"The School of Examples\"},\"proof\":{\"type\":\"Ed25519Signature2020\",\"created\":\"2023-02-24T23:36:38Z\",\"verificationMethod\":\"did:key:z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2#z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z57Mm1vboMtZiCyJ4aReZsv8co4Re64Y8GEjL1ZARzMbXZgkARFLqFs1P345NpPGG2hgCrS4nNdvJhpwnrNyG3kEF\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          "https://www.w3.org/ns/credentials/examples/v2",
                          "https://w3id.org/security/suites/ed25519-2020/v1"
                        ],
                        "id": "urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33",
                        "type": [
                          "VerifiableCredential",
                          "AlumniCredential"
                        ],
                        "name": "Alumni Credential",
                        "description": "A minimum viable example of an Alumni Credential.",
                        "issuer": "https://vc.example/issuers/5678",
                        "validFrom": "2023-01-01T00:00:00Z",
                        "credentialSubject": {
                          "id": "did:example:abcdefgh",
                          "alumniOf": "The School of Examples"
                        },
                        "proof": {
                          "type": "Ed25519Signature2020",
                          "created": "2023-02-24T23:36:38Z",
                          "verificationMethod": "did:key:z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2#z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z57Mm1vboMtZiCyJ4aReZsv8co4Re64Y8GEjL1ZARzMbXZgkARFLqFs1P345NpPGG2hgCrS4nNdvJhpwnrNyG3kEF"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://test-issuer.dcconsortium.org/verifier/credentials/verify",
                  "status": 400,
                  "data": {
                    "code": 400,
                    "message": "An error occurred in the signing-service: invalid input! See the logs for full details. If you are using docker compose, view the logs with 'docker compose logs', and just the signing service logs with: 'docker compose logs signing-service'"
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: expected HTTPError: An error occurred in the signi… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:48:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noContextVc = klona(validVc);\n          delete noContextVc['@context'];\n          const body = createRequestBody({vc: noContextVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "bfe5DH-bYGqh4ddPcLhb8",
              "ctx": null,
              "_testId": "urn:uuid:88428e2a-3f8a-4e51-bd2a-77b1ee11e776",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Credentials Consortium",
                "rowId": "MUST not verify if \"@context\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27657,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 21,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noTypeVc = klona(validVc);\n        delete noTypeVc.type;\n        const body = createRequestBody({vc: noTypeVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "bfe5DH-bYGqh4ddPcLhb8",
              "ctx": null,
              "_testId": "urn:uuid:7a302237-c64a-4fc9-8728-f3f7e6d12398",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Credentials Consortium",
                "rowId": "MUST not verify if \"type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27680,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 20,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noIssuerVc = klona(validVc);\n        delete noIssuerVc.issuer;\n        const body = createRequestBody({vc: noIssuerVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "bfe5DH-bYGqh4ddPcLhb8",
              "ctx": null,
              "_testId": "urn:uuid:c5ded783-a23f-4835-ba28-515d513c8d84",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Credentials Consortium",
                "rowId": "MUST not verify if \"issuer\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27701,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 20,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noCredentialSubjectVc = klona(validVc);\n          delete noCredentialSubjectVc.credentialSubject;\n          const body = createRequestBody({vc: noCredentialSubjectVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "bfe5DH-bYGqh4ddPcLhb8",
              "ctx": null,
              "_testId": "urn:uuid:63727ddc-65b3-47ec-be4b-2e9cbce16bcc",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Credentials Consortium",
                "rowId": "MUST not verify if \"credentialSubject\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27722,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 21,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noProofVc = klona(validVc);\n        delete noProofVc.proof;\n        const body = createRequestBody({vc: noProofVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "bfe5DH-bYGqh4ddPcLhb8",
              "ctx": null,
              "_testId": "urn:uuid:087f9db7-5147-4ed7-9ddf-5c973f32e9dc",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Credentials Consortium",
                "rowId": "MUST not verify if \"proof\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27743,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 20,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.type\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofTypeVc = klona(validVc);\n          delete noProofTypeVc.proof.type;\n          const body = createRequestBody({vc: noProofTypeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "bfe5DH-bYGqh4ddPcLhb8",
              "ctx": null,
              "_testId": "urn:uuid:f44c1437-a880-4a45-8fd6-78fc61eca60a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Credentials Consortium",
                "rowId": "MUST not verify if \"proof.type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27763,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 20,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.created\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofCreatedVc = klona(validVc);\n          delete noProofCreatedVc.proof.created;\n          const body = createRequestBody({vc: noProofCreatedVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "bfe5DH-bYGqh4ddPcLhb8",
              "ctx": null,
              "_testId": "urn:uuid:9f3fdda1-8c79-4b08-9e45-fd01901708b8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Credentials Consortium",
                "rowId": "MUST not verify if \"proof.created\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27784,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 53,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.verificationMethod\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofVerificationMethodVc = klona(validVc);\n          delete noProofVerificationMethodVc.proof.verificationMethod;\n          const body = createRequestBody({vc: noProofVerificationMethodVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "bfe5DH-bYGqh4ddPcLhb8",
              "ctx": null,
              "_testId": "urn:uuid:2e520dbd-ecb3-4bb6-93f5-8cbc0cfa76bb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Credentials Consortium",
                "rowId": "MUST not verify if \"proof.verificationMethod\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27837,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 56,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofValue\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofValueVc = klona(validVc);\n          delete noProofValueVc.proof.proofValue;\n          const body = createRequestBody({vc: noProofValueVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "bfe5DH-bYGqh4ddPcLhb8",
              "ctx": null,
              "_testId": "urn:uuid:08161dd6-41f2-4dd8-9873-78dc69328863",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Credentials Consortium",
                "rowId": "MUST not verify if \"proof.proofValue\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27894,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 58,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofPurpose\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofPurposeVc = klona(validVc);\n          delete noProofPurposeVc.proof.proofPurpose;\n          const body = createRequestBody({vc: noProofPurposeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "bfe5DH-bYGqh4ddPcLhb8",
              "ctx": null,
              "_testId": "urn:uuid:91ac334f-ff2e-4dcb-ac88-4d4dee17e081",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Credentials Consortium",
                "rowId": "MUST not verify if \"proof.proofPurpose\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27953,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 22,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidContextTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidContextType of invalidContextTypes) {\n          copyVc['@context'] = invalidContextType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "bfe5DH-bYGqh4ddPcLhb8",
              "ctx": null,
              "_testId": "urn:uuid:b036ac0d-1d50-4a5b-acb6-bee66d0aec07",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Credentials Consortium",
                "rowId": "MUST not verify if \"@context\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27976,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 366,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" items are not strings or objects.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidContextItemTypes = [[], null, undefined, 10, true];\n          for(const invalidContextItemType of invalidContextItemTypes) {\n            copyVc['@context'] = [invalidContextItemType];\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "bfe5DH-bYGqh4ddPcLhb8",
              "ctx": null,
              "_testId": "urn:uuid:7ac27801-1901-49de-bd3a-7c29365f8cbd",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Credentials Consortium",
                "rowId": "MUST not verify if \"@context\" items are not strings or objects."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28342,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 100,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidType of invalidTypes) {\n          copyVc.type = invalidType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "bfe5DH-bYGqh4ddPcLhb8",
              "ctx": null,
              "_testId": "urn:uuid:9af5a5b0-10d9-4f31-b56c-b84ac301b1c9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Credentials Consortium",
                "rowId": "MUST not verify if \"type\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28442,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 122,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" items are not strings.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypeItemTypes = [[], {}, null, undefined, 10, true];\n        for(const invalidItemType of invalidTypeItemTypes) {\n          copyVc.type = [invalidItemType];\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "bfe5DH-bYGqh4ddPcLhb8",
              "ctx": null,
              "_testId": "urn:uuid:8db28838-b918-4183-a06d-c9763fa0267e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Credentials Consortium",
                "rowId": "MUST not verify if \"type\" items are not strings."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28565,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 122,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" is not an object or a string.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidIssuerTypes = [[], null, undefined, 10, true];\n          for(const invalidIssuerType of invalidIssuerTypes) {\n            copyVc.issuer = invalidIssuerType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "bfe5DH-bYGqh4ddPcLhb8",
              "ctx": null,
              "_testId": "urn:uuid:936bde19-ac98-451d-b2b1-bb7ae342050f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Credentials Consortium",
                "rowId": "MUST not verify if \"issuer\" is not an object or a string."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28688,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 101,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" is not an object.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidCredentialSubjectTypes = [\n            'string', null, undefined, 10, true, []\n          ];\n          for(const invalidType of invalidCredentialSubjectTypes) {\n            copyVc.credentialSubject = invalidType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "bfe5DH-bYGqh4ddPcLhb8",
              "ctx": null,
              "_testId": "urn:uuid:fc8e0ad7-ef0a-4b4b-9e75-800e981fea33",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Credentials Consortium",
                "rowId": "MUST not verify if \"credentialSubject\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28789,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 163,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" is not an object.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidProofTypes = ['string', null, undefined, 10, true, []];\n        for(const invalidProofType of invalidProofTypes) {\n          copyVc.proof = invalidProofType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "bfe5DH-bYGqh4ddPcLhb8",
              "ctx": null,
              "_testId": "urn:uuid:c3c25fcf-3ab8-4365-bd3b-6b871838d2d8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Credentials Consortium",
                "rowId": "MUST not verify if \"proof\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28953,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 122,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "GUekxwv0jYJVenrY178j3",
          "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
          "_testId": "urn:uuid:79ef4146-f88d-495a-9cb7-ab2badadcee0"
        },
        {
          "title": "EWF",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC.",
              "body": "async function() {\n        // this tells the test report which cell in the interop matrix\n        // the result goes in\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({vc: validVc});\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error);\n        should.exist(result);\n        should.exist(result.status);\n        result.status.should.equal(200);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "c28B6BA2yLEthC9IBC0y9",
              "ctx": null,
              "_testId": "urn:uuid:a680fe92-6bcc-414c-b395-5f25df734b42",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "MUST verify a valid VC."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29075,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 300,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected HTTPError { …(7) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",\"https://www.w3.org/ns/credentials/examples/v2\",\"https://w3id.org/security/suites/ed25519-2020/v1\"],\"id\":\"urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33\",\"type\":[\"VerifiableCredential\",\"AlumniCredential\"],\"name\":\"Alumni Credential\",\"description\":\"A minimum viable example of an Alumni Credential.\",\"issuer\":\"https://vc.example/issuers/5678\",\"validFrom\":\"2023-01-01T00:00:00Z\",\"credentialSubject\":{\"id\":\"did:example:abcdefgh\",\"alumniOf\":\"The School of Examples\"},\"proof\":{\"type\":\"Ed25519Signature2020\",\"created\":\"2023-02-24T23:36:38Z\",\"verificationMethod\":\"did:key:z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2#z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z57Mm1vboMtZiCyJ4aReZsv8co4Re64Y8GEjL1ZARzMbXZgkARFLqFs1P345NpPGG2hgCrS4nNdvJhpwnrNyG3kEF\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          "https://www.w3.org/ns/credentials/examples/v2",
                          "https://w3id.org/security/suites/ed25519-2020/v1"
                        ],
                        "id": "urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33",
                        "type": [
                          "VerifiableCredential",
                          "AlumniCredential"
                        ],
                        "name": "Alumni Credential",
                        "description": "A minimum viable example of an Alumni Credential.",
                        "issuer": "https://vc.example/issuers/5678",
                        "validFrom": "2023-01-01T00:00:00Z",
                        "credentialSubject": {
                          "id": "did:example:abcdefgh",
                          "alumniOf": "The School of Examples"
                        },
                        "proof": {
                          "type": "Ed25519Signature2020",
                          "created": "2023-02-24T23:36:38Z",
                          "verificationMethod": "did:key:z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2#z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z57Mm1vboMtZiCyJ4aReZsv8co4Re64Y8GEjL1ZARzMbXZgkARFLqFs1P345NpPGG2hgCrS4nNdvJhpwnrNyG3kEF"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc-api-dev.energyweb.org/v1/vc-api/credentials/verify",
                  "status": 400,
                  "data": {
                    "message": [
                      "verifiableCredential.issuanceDate must be a valid ISO 8601 date string"
                    ],
                    "error": "Bad Request",
                    "statusCode": 400
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: expected HTTPError { …(7) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:48:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noContextVc = klona(validVc);\n          delete noContextVc['@context'];\n          const body = createRequestBody({vc: noContextVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "c28B6BA2yLEthC9IBC0y9",
              "ctx": null,
              "_testId": "urn:uuid:da248415-6e5f-494c-aa00-ae4c4b3c3325",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "MUST not verify if \"@context\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29377,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 60,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noTypeVc = klona(validVc);\n        delete noTypeVc.type;\n        const body = createRequestBody({vc: noTypeVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "c28B6BA2yLEthC9IBC0y9",
              "ctx": null,
              "_testId": "urn:uuid:fbf1c5da-fd7c-4e14-958e-1d7575a7e848",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "MUST not verify if \"type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29437,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 60,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noIssuerVc = klona(validVc);\n        delete noIssuerVc.issuer;\n        const body = createRequestBody({vc: noIssuerVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "c28B6BA2yLEthC9IBC0y9",
              "ctx": null,
              "_testId": "urn:uuid:39c30d76-f5f6-4e79-adf4-4a50c82274f4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "MUST not verify if \"issuer\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29497,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 60,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noCredentialSubjectVc = klona(validVc);\n          delete noCredentialSubjectVc.credentialSubject;\n          const body = createRequestBody({vc: noCredentialSubjectVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "c28B6BA2yLEthC9IBC0y9",
              "ctx": null,
              "_testId": "urn:uuid:4cb7b96c-717d-4c3f-9d86-ab9b119b0ed5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "MUST not verify if \"credentialSubject\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29557,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 60,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noProofVc = klona(validVc);\n        delete noProofVc.proof;\n        const body = createRequestBody({vc: noProofVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "c28B6BA2yLEthC9IBC0y9",
              "ctx": null,
              "_testId": "urn:uuid:c00b80ea-e3fb-48cd-ad0e-61802241b9d1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "MUST not verify if \"proof\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29618,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 57,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.type\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofTypeVc = klona(validVc);\n          delete noProofTypeVc.proof.type;\n          const body = createRequestBody({vc: noProofTypeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "c28B6BA2yLEthC9IBC0y9",
              "ctx": null,
              "_testId": "urn:uuid:b5c145bf-c04c-434c-bb0f-a0d985fe5340",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "MUST not verify if \"proof.type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29676,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 58,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.created\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofCreatedVc = klona(validVc);\n          delete noProofCreatedVc.proof.created;\n          const body = createRequestBody({vc: noProofCreatedVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "c28B6BA2yLEthC9IBC0y9",
              "ctx": null,
              "_testId": "urn:uuid:957fc4dd-45c6-4425-8507-517b65e5cbaf",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "MUST not verify if \"proof.created\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29735,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 62,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.verificationMethod\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofVerificationMethodVc = klona(validVc);\n          delete noProofVerificationMethodVc.proof.verificationMethod;\n          const body = createRequestBody({vc: noProofVerificationMethodVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "c28B6BA2yLEthC9IBC0y9",
              "ctx": null,
              "_testId": "urn:uuid:5e047bb9-cae8-4151-a45f-c7d8c92e24d1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "MUST not verify if \"proof.verificationMethod\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29798,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 62,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofValue\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofValueVc = klona(validVc);\n          delete noProofValueVc.proof.proofValue;\n          const body = createRequestBody({vc: noProofValueVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "c28B6BA2yLEthC9IBC0y9",
              "ctx": null,
              "_testId": "urn:uuid:ef6b5252-d7ef-445e-8567-da6edba93b4e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "MUST not verify if \"proof.proofValue\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29860,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 59,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofPurpose\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofPurposeVc = klona(validVc);\n          delete noProofPurposeVc.proof.proofPurpose;\n          const body = createRequestBody({vc: noProofPurposeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "c28B6BA2yLEthC9IBC0y9",
              "ctx": null,
              "_testId": "urn:uuid:0a7f34b1-ee17-4828-a3f4-02f3a668a49b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "MUST not verify if \"proof.proofPurpose\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29919,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 61,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidContextTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidContextType of invalidContextTypes) {\n          copyVc['@context'] = invalidContextType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "c28B6BA2yLEthC9IBC0y9",
              "ctx": null,
              "_testId": "urn:uuid:c8cabd0b-f5b6-4cf2-81b1-60a6649052a0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "MUST not verify if \"@context\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29981,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 523,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" items are not strings or objects.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidContextItemTypes = [[], null, undefined, 10, true];\n          for(const invalidContextItemType of invalidContextItemTypes) {\n            copyVc['@context'] = [invalidContextItemType];\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "c28B6BA2yLEthC9IBC0y9",
              "ctx": null,
              "_testId": "urn:uuid:f5267906-19fd-4239-8fa2-d814aa8e9b28",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "MUST not verify if \"@context\" items are not strings or objects."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30504,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 310,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidType of invalidTypes) {\n          copyVc.type = invalidType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "c28B6BA2yLEthC9IBC0y9",
              "ctx": null,
              "_testId": "urn:uuid:341de9c3-0add-4752-9755-f544d3726e9f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "MUST not verify if \"type\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30813,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 359,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" items are not strings.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypeItemTypes = [[], {}, null, undefined, 10, true];\n        for(const invalidItemType of invalidTypeItemTypes) {\n          copyVc.type = [invalidItemType];\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "c28B6BA2yLEthC9IBC0y9",
              "ctx": null,
              "_testId": "urn:uuid:fc48cc4a-99b7-4ac7-b193-ddaf5d5e3681",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "MUST not verify if \"type\" items are not strings."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31172,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 363,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" is not an object or a string.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidIssuerTypes = [[], null, undefined, 10, true];\n          for(const invalidIssuerType of invalidIssuerTypes) {\n            copyVc.issuer = invalidIssuerType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "c28B6BA2yLEthC9IBC0y9",
              "ctx": null,
              "_testId": "urn:uuid:58c29058-1d33-44b3-8941-0a2a51b4d89c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "MUST not verify if \"issuer\" is not an object or a string."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31536,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 291,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" is not an object.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidCredentialSubjectTypes = [\n            'string', null, undefined, 10, true, []\n          ];\n          for(const invalidType of invalidCredentialSubjectTypes) {\n            copyVc.credentialSubject = invalidType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "c28B6BA2yLEthC9IBC0y9",
              "ctx": null,
              "_testId": "urn:uuid:d04447a7-a507-4544-a110-9de4fd01a06b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "MUST not verify if \"credentialSubject\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31827,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 363,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" is not an object.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidProofTypes = ['string', null, undefined, 10, true, []];\n        for(const invalidProofType of invalidProofTypes) {\n          copyVc.proof = invalidProofType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "c28B6BA2yLEthC9IBC0y9",
              "ctx": null,
              "_testId": "urn:uuid:3abf7134-3478-4cca-8caa-ea47fcc1ea30",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "MUST not verify if \"proof\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32191,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 374,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "GUekxwv0jYJVenrY178j3",
          "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
          "_testId": "urn:uuid:f393e89e-4130-4abf-b3db-17cfd2e6646e"
        },
        {
          "title": "Gen Digital",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC.",
              "body": "async function() {\n        // this tells the test report which cell in the interop matrix\n        // the result goes in\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({vc: validVc});\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error);\n        should.exist(result);\n        should.exist(result.status);\n        result.status.should.equal(200);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "SFExdScoyLNRqQxssdJPY",
              "ctx": null,
              "_testId": "urn:uuid:77b93c14-2589-43b0-82fe-0ac28a6a056b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Gen Digital",
                "rowId": "MUST verify a valid VC."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32566,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 317,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",\"https://www.w3.org/ns/credentials/examples/v2\",\"https://w3id.org/security/suites/ed25519-2020/v1\"],\"id\":\"urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33\",\"type\":[\"VerifiableCredential\",\"AlumniCredential\"],\"name\":\"Alumni Credential\",\"description\":\"A minimum viable example of an Alumni Credential.\",\"issuer\":\"https://vc.example/issuers/5678\",\"validFrom\":\"2023-01-01T00:00:00Z\",\"credentialSubject\":{\"id\":\"did:example:abcdefgh\",\"alumniOf\":\"The School of Examples\"},\"proof\":{\"type\":\"Ed25519Signature2020\",\"created\":\"2023-02-24T23:36:38Z\",\"verificationMethod\":\"did:key:z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2#z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z57Mm1vboMtZiCyJ4aReZsv8co4Re64Y8GEjL1ZARzMbXZgkARFLqFs1P345NpPGG2hgCrS4nNdvJhpwnrNyG3kEF\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          "https://www.w3.org/ns/credentials/examples/v2",
                          "https://w3id.org/security/suites/ed25519-2020/v1"
                        ],
                        "id": "urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33",
                        "type": [
                          "VerifiableCredential",
                          "AlumniCredential"
                        ],
                        "name": "Alumni Credential",
                        "description": "A minimum viable example of an Alumni Credential.",
                        "issuer": "https://vc.example/issuers/5678",
                        "validFrom": "2023-01-01T00:00:00Z",
                        "credentialSubject": {
                          "id": "did:example:abcdefgh",
                          "alumniOf": "The School of Examples"
                        },
                        "proof": {
                          "type": "Ed25519Signature2020",
                          "created": "2023-02-24T23:36:38Z",
                          "verificationMethod": "did:key:z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2#z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z57Mm1vboMtZiCyJ4aReZsv8co4Re64Y8GEjL1ZARzMbXZgkARFLqFs1P345NpPGG2hgCrS4nNdvJhpwnrNyG3kEF"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://krakend-k8s-dev3.dev.dts-dsa.com/vcs/verifier/profiles/25c3a9cd-2a45-418e-9200-f7e8a24d1a43/v1.latest/credentials/verify",
                  "status": 400,
                  "data": {
                    "checks": [
                      {
                        "check": "proof",
                        "error": "verifiable credential proof check error : check embedded proof: check linked data proof: proof invalid public key id: resolve DID https://vc.example/issuers/5678: wrong format did input: https://vc.example/issuers/5678",
                        "verificationMethod": ""
                      }
                    ]
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:48:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noContextVc = klona(validVc);\n          delete noContextVc['@context'];\n          const body = createRequestBody({vc: noContextVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "SFExdScoyLNRqQxssdJPY",
              "ctx": null,
              "_testId": "urn:uuid:ac299579-de1d-4dd3-8fb7-0d102a3245f7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Gen Digital",
                "rowId": "MUST not verify if \"@context\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32883,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 18,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noTypeVc = klona(validVc);\n        delete noTypeVc.type;\n        const body = createRequestBody({vc: noTypeVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "SFExdScoyLNRqQxssdJPY",
              "ctx": null,
              "_testId": "urn:uuid:856d8939-34e5-445a-81fc-05b59787de54",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Gen Digital",
                "rowId": "MUST not verify if \"type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32901,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 17,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noIssuerVc = klona(validVc);\n        delete noIssuerVc.issuer;\n        const body = createRequestBody({vc: noIssuerVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "SFExdScoyLNRqQxssdJPY",
              "ctx": null,
              "_testId": "urn:uuid:7df6a162-9faa-473e-9750-a88fdc72c3d1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Gen Digital",
                "rowId": "MUST not verify if \"issuer\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32918,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 17,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noCredentialSubjectVc = klona(validVc);\n          delete noCredentialSubjectVc.credentialSubject;\n          const body = createRequestBody({vc: noCredentialSubjectVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "SFExdScoyLNRqQxssdJPY",
              "ctx": null,
              "_testId": "urn:uuid:115bfb71-f912-4076-8bc7-144f50b66e37",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Gen Digital",
                "rowId": "MUST not verify if \"credentialSubject\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32936,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 18,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noProofVc = klona(validVc);\n        delete noProofVc.proof;\n        const body = createRequestBody({vc: noProofVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "SFExdScoyLNRqQxssdJPY",
              "ctx": null,
              "_testId": "urn:uuid:8a5b937a-3dc5-43d9-96bf-833a7c9f7072",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Gen Digital",
                "rowId": "MUST not verify if \"proof\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32953,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 21,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.type\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofTypeVc = klona(validVc);\n          delete noProofTypeVc.proof.type;\n          const body = createRequestBody({vc: noProofTypeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "SFExdScoyLNRqQxssdJPY",
              "ctx": null,
              "_testId": "urn:uuid:b8efd798-3f94-485f-8bc5-d96e118a0109",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Gen Digital",
                "rowId": "MUST not verify if \"proof.type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32974,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 17,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.created\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofCreatedVc = klona(validVc);\n          delete noProofCreatedVc.proof.created;\n          const body = createRequestBody({vc: noProofCreatedVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "SFExdScoyLNRqQxssdJPY",
              "ctx": null,
              "_testId": "urn:uuid:2e8111ea-1794-4372-b54d-77373427b54e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Gen Digital",
                "rowId": "MUST not verify if \"proof.created\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32992,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 21,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.verificationMethod\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofVerificationMethodVc = klona(validVc);\n          delete noProofVerificationMethodVc.proof.verificationMethod;\n          const body = createRequestBody({vc: noProofVerificationMethodVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "SFExdScoyLNRqQxssdJPY",
              "ctx": null,
              "_testId": "urn:uuid:0d6fb625-d90e-451b-b6b2-30148b627e4c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Gen Digital",
                "rowId": "MUST not verify if \"proof.verificationMethod\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33013,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 18,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofValue\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofValueVc = klona(validVc);\n          delete noProofValueVc.proof.proofValue;\n          const body = createRequestBody({vc: noProofValueVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "SFExdScoyLNRqQxssdJPY",
              "ctx": null,
              "_testId": "urn:uuid:a9a33563-a921-4d9f-83f1-c5598497f4ec",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Gen Digital",
                "rowId": "MUST not verify if \"proof.proofValue\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33033,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 22,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofPurpose\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofPurposeVc = klona(validVc);\n          delete noProofPurposeVc.proof.proofPurpose;\n          const body = createRequestBody({vc: noProofPurposeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "SFExdScoyLNRqQxssdJPY",
              "ctx": null,
              "_testId": "urn:uuid:d199cf9e-dd25-44dc-9dce-d1e61a91aa15",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Gen Digital",
                "rowId": "MUST not verify if \"proof.proofPurpose\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33056,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 18,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidContextTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidContextType of invalidContextTypes) {\n          copyVc['@context'] = invalidContextType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "SFExdScoyLNRqQxssdJPY",
              "ctx": null,
              "_testId": "urn:uuid:6d0d5e6b-2104-4e20-98b7-f31b60f20bda",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Gen Digital",
                "rowId": "MUST not verify if \"@context\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33074,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 135,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" items are not strings or objects.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidContextItemTypes = [[], null, undefined, 10, true];\n          for(const invalidContextItemType of invalidContextItemTypes) {\n            copyVc['@context'] = [invalidContextItemType];\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "SFExdScoyLNRqQxssdJPY",
              "ctx": null,
              "_testId": "urn:uuid:cf3396ec-1c4c-4c06-affc-1a234f13ba90",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Gen Digital",
                "rowId": "MUST not verify if \"@context\" items are not strings or objects."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33209,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 82,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidType of invalidTypes) {\n          copyVc.type = invalidType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "SFExdScoyLNRqQxssdJPY",
              "ctx": null,
              "_testId": "urn:uuid:4fbee0c5-5c4d-4d19-9191-e81d4316fd6d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Gen Digital",
                "rowId": "MUST not verify if \"type\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33291,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 101,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" items are not strings.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypeItemTypes = [[], {}, null, undefined, 10, true];\n        for(const invalidItemType of invalidTypeItemTypes) {\n          copyVc.type = [invalidItemType];\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "SFExdScoyLNRqQxssdJPY",
              "ctx": null,
              "_testId": "urn:uuid:290bdbff-ffc0-4ee0-8f1c-89f0c1f6ffa2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Gen Digital",
                "rowId": "MUST not verify if \"type\" items are not strings."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33392,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 101,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" is not an object or a string.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidIssuerTypes = [[], null, undefined, 10, true];\n          for(const invalidIssuerType of invalidIssuerTypes) {\n            copyVc.issuer = invalidIssuerType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "SFExdScoyLNRqQxssdJPY",
              "ctx": null,
              "_testId": "urn:uuid:e1be19ed-f2d0-40d5-90f2-70c4e5144a36",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Gen Digital",
                "rowId": "MUST not verify if \"issuer\" is not an object or a string."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33492,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 88,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" is not an object.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidCredentialSubjectTypes = [\n            'string', null, undefined, 10, true, []\n          ];\n          for(const invalidType of invalidCredentialSubjectTypes) {\n            copyVc.credentialSubject = invalidType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "SFExdScoyLNRqQxssdJPY",
              "ctx": null,
              "_testId": "urn:uuid:66fc3149-08fe-4cd1-a4f7-a7de4fdde991",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Gen Digital",
                "rowId": "MUST not verify if \"credentialSubject\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33580,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 103,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" is not an object.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidProofTypes = ['string', null, undefined, 10, true, []];\n        for(const invalidProofType of invalidProofTypes) {\n          copyVc.proof = invalidProofType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "SFExdScoyLNRqQxssdJPY",
              "ctx": null,
              "_testId": "urn:uuid:56f9ba00-6282-420f-a3ab-cc1bdc943b4b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Gen Digital",
                "rowId": "MUST not verify if \"proof\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33684,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 103,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "GUekxwv0jYJVenrY178j3",
          "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
          "_testId": "urn:uuid:9b6b6d1c-5aa7-470e-b7ff-698887cf7417"
        },
        {
          "title": "LearnCard",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC.",
              "body": "async function() {\n        // this tells the test report which cell in the interop matrix\n        // the result goes in\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({vc: validVc});\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error);\n        should.exist(result);\n        should.exist(result.status);\n        result.status.should.equal(200);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "LRsbuCXWcbxtK3ce5bVNh",
              "ctx": null,
              "_testId": "urn:uuid:2570a980-80b3-4a9a-8c73-63d01b3bde92",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "MUST verify a valid VC."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33787,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 270,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",\"https://www.w3.org/ns/credentials/examples/v2\",\"https://w3id.org/security/suites/ed25519-2020/v1\"],\"id\":\"urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33\",\"type\":[\"VerifiableCredential\",\"AlumniCredential\"],\"name\":\"Alumni Credential\",\"description\":\"A minimum viable example of an Alumni Credential.\",\"issuer\":\"https://vc.example/issuers/5678\",\"validFrom\":\"2023-01-01T00:00:00Z\",\"credentialSubject\":{\"id\":\"did:example:abcdefgh\",\"alumniOf\":\"The School of Examples\"},\"proof\":{\"type\":\"Ed25519Signature2020\",\"created\":\"2023-02-24T23:36:38Z\",\"verificationMethod\":\"did:key:z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2#z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z57Mm1vboMtZiCyJ4aReZsv8co4Re64Y8GEjL1ZARzMbXZgkARFLqFs1P345NpPGG2hgCrS4nNdvJhpwnrNyG3kEF\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          "https://www.w3.org/ns/credentials/examples/v2",
                          "https://w3id.org/security/suites/ed25519-2020/v1"
                        ],
                        "id": "urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33",
                        "type": [
                          "VerifiableCredential",
                          "AlumniCredential"
                        ],
                        "name": "Alumni Credential",
                        "description": "A minimum viable example of an Alumni Credential.",
                        "issuer": "https://vc.example/issuers/5678",
                        "validFrom": "2023-01-01T00:00:00Z",
                        "credentialSubject": {
                          "id": "did:example:abcdefgh",
                          "alumniOf": "The School of Examples"
                        },
                        "proof": {
                          "type": "Ed25519Signature2020",
                          "created": "2023-02-24T23:36:38Z",
                          "verificationMethod": "did:key:z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2#z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z57Mm1vboMtZiCyJ4aReZsv8co4Re64Y8GEjL1ZARzMbXZgkARFLqFs1P345NpPGG2hgCrS4nNdvJhpwnrNyG3kEF"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://bridge.learncard.com/credentials/verify",
                  "status": 400,
                  "data": "Invalid input: [\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"verifiableCredential\",\n      \"issuanceDate\"\n    ],\n    \"message\": \"Required\"\n  }\n]"
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:48:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noContextVc = klona(validVc);\n          delete noContextVc['@context'];\n          const body = createRequestBody({vc: noContextVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "LRsbuCXWcbxtK3ce5bVNh",
              "ctx": null,
              "_testId": "urn:uuid:f424f977-1786-4bcc-a05d-ba01c556aad7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "MUST not verify if \"@context\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 34058,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 45,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noTypeVc = klona(validVc);\n        delete noTypeVc.type;\n        const body = createRequestBody({vc: noTypeVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "LRsbuCXWcbxtK3ce5bVNh",
              "ctx": null,
              "_testId": "urn:uuid:8351d63c-a0c2-4c50-bb75-29f3ebb84471",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "MUST not verify if \"type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 34103,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 38,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noIssuerVc = klona(validVc);\n        delete noIssuerVc.issuer;\n        const body = createRequestBody({vc: noIssuerVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "LRsbuCXWcbxtK3ce5bVNh",
              "ctx": null,
              "_testId": "urn:uuid:61147c1d-298c-4554-bbbd-47d582b5af2a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "MUST not verify if \"issuer\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 34142,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 46,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noCredentialSubjectVc = klona(validVc);\n          delete noCredentialSubjectVc.credentialSubject;\n          const body = createRequestBody({vc: noCredentialSubjectVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "LRsbuCXWcbxtK3ce5bVNh",
              "ctx": null,
              "_testId": "urn:uuid:bc1d0286-d539-4ba6-af60-9c3152f2d9f0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "MUST not verify if \"credentialSubject\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 34188,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 63,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noProofVc = klona(validVc);\n        delete noProofVc.proof;\n        const body = createRequestBody({vc: noProofVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "LRsbuCXWcbxtK3ce5bVNh",
              "ctx": null,
              "_testId": "urn:uuid:e2d169cb-b617-40e9-8625-689b3b0e8b65",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "MUST not verify if \"proof\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 34251,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 39,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.type\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofTypeVc = klona(validVc);\n          delete noProofTypeVc.proof.type;\n          const body = createRequestBody({vc: noProofTypeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "LRsbuCXWcbxtK3ce5bVNh",
              "ctx": null,
              "_testId": "urn:uuid:6565130a-64bc-438a-80ae-05ca038a72e1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "MUST not verify if \"proof.type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 34290,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 45,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.created\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofCreatedVc = klona(validVc);\n          delete noProofCreatedVc.proof.created;\n          const body = createRequestBody({vc: noProofCreatedVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "LRsbuCXWcbxtK3ce5bVNh",
              "ctx": null,
              "_testId": "urn:uuid:ef187b7d-06f4-4464-82ee-5ea843b3d566",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "MUST not verify if \"proof.created\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 34335,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 40,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.verificationMethod\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofVerificationMethodVc = klona(validVc);\n          delete noProofVerificationMethodVc.proof.verificationMethod;\n          const body = createRequestBody({vc: noProofVerificationMethodVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "LRsbuCXWcbxtK3ce5bVNh",
              "ctx": null,
              "_testId": "urn:uuid:b773202d-ce41-4637-8bf1-77e616e52ac3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "MUST not verify if \"proof.verificationMethod\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 34375,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 60,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofValue\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofValueVc = klona(validVc);\n          delete noProofValueVc.proof.proofValue;\n          const body = createRequestBody({vc: noProofValueVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "LRsbuCXWcbxtK3ce5bVNh",
              "ctx": null,
              "_testId": "urn:uuid:75bdf52d-231e-4fa4-92c6-b9976dc171a4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "MUST not verify if \"proof.proofValue\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 34435,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 39,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofPurpose\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofPurposeVc = klona(validVc);\n          delete noProofPurposeVc.proof.proofPurpose;\n          const body = createRequestBody({vc: noProofPurposeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "LRsbuCXWcbxtK3ce5bVNh",
              "ctx": null,
              "_testId": "urn:uuid:d1d007f5-89df-4653-9dda-a1f8250a48cf",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "MUST not verify if \"proof.proofPurpose\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 34474,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 63,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidContextTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidContextType of invalidContextTypes) {\n          copyVc['@context'] = invalidContextType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "LRsbuCXWcbxtK3ce5bVNh",
              "ctx": null,
              "_testId": "urn:uuid:24f666df-0990-47c3-855a-f07d432e35b2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "MUST not verify if \"@context\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 34538,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 361,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" items are not strings or objects.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidContextItemTypes = [[], null, undefined, 10, true];\n          for(const invalidContextItemType of invalidContextItemTypes) {\n            copyVc['@context'] = [invalidContextItemType];\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "LRsbuCXWcbxtK3ce5bVNh",
              "ctx": null,
              "_testId": "urn:uuid:96d006cf-e20a-4156-a060-244c63492760",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "MUST not verify if \"@context\" items are not strings or objects."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 34899,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 233,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidType of invalidTypes) {\n          copyVc.type = invalidType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "LRsbuCXWcbxtK3ce5bVNh",
              "ctx": null,
              "_testId": "urn:uuid:0d3c9dd1-a848-42ec-893f-f1c010649504",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "MUST not verify if \"type\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 35132,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 274,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" items are not strings.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypeItemTypes = [[], {}, null, undefined, 10, true];\n        for(const invalidItemType of invalidTypeItemTypes) {\n          copyVc.type = [invalidItemType];\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "LRsbuCXWcbxtK3ce5bVNh",
              "ctx": null,
              "_testId": "urn:uuid:02a21dba-f3da-4e1a-8a95-c005c3d29977",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "MUST not verify if \"type\" items are not strings."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 35407,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 292,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" is not an object or a string.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidIssuerTypes = [[], null, undefined, 10, true];\n          for(const invalidIssuerType of invalidIssuerTypes) {\n            copyVc.issuer = invalidIssuerType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "LRsbuCXWcbxtK3ce5bVNh",
              "ctx": null,
              "_testId": "urn:uuid:b2b7f26d-b95a-4788-b1ae-e48799aa8429",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "MUST not verify if \"issuer\" is not an object or a string."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 35698,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 236,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" is not an object.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidCredentialSubjectTypes = [\n            'string', null, undefined, 10, true, []\n          ];\n          for(const invalidType of invalidCredentialSubjectTypes) {\n            copyVc.credentialSubject = invalidType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "LRsbuCXWcbxtK3ce5bVNh",
              "ctx": null,
              "_testId": "urn:uuid:e3d51a48-32c8-491d-9641-ecc3a58b73f6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "MUST not verify if \"credentialSubject\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 35935,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 264,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" is not an object.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidProofTypes = ['string', null, undefined, 10, true, []];\n        for(const invalidProofType of invalidProofTypes) {\n          copyVc.proof = invalidProofType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "LRsbuCXWcbxtK3ce5bVNh",
              "ctx": null,
              "_testId": "urn:uuid:e8100d89-fe1a-4397-a625-366237074bbb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "MUST not verify if \"proof\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36198,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 290,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "GUekxwv0jYJVenrY178j3",
          "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
          "_testId": "urn:uuid:b36e259d-6aa6-4755-94c3-e157da7088a6"
        },
        {
          "title": "Mavennet",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC.",
              "body": "async function() {\n        // this tells the test report which cell in the interop matrix\n        // the result goes in\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({vc: validVc});\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error);\n        should.exist(result);\n        should.exist(result.status);\n        result.status.should.equal(200);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "XVhcHeGrozFAqf5Mjb4dn",
              "ctx": null,
              "_testId": "urn:uuid:f51998cc-7286-46d8-b0bc-703ff03850cd",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Mavennet",
                "rowId": "MUST verify a valid VC."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36489,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 182,
              "state": "failed",
              "err": {
                "response": {},
                "request": {},
                "options": {
                  "credentials": "same-origin",
                  "headers": {},
                  "body": {},
                  "method": "POST",
                  "agent": {
                    "_events": {},
                    "_eventsCount": 2,
                    "defaultPort": 443,
                    "protocol": "https:",
                    "options": {
                      "rejectUnauthorized": false,
                      "noDelay": true,
                      "path": null
                    },
                    "requests": {},
                    "sockets": {},
                    "freeSockets": {},
                    "keepAliveMsecs": 1000,
                    "keepAlive": false,
                    "maxSockets": null,
                    "maxFreeSockets": 256,
                    "scheduling": "lifo",
                    "maxTotalSockets": null,
                    "totalSocketCount": 0,
                    "maxCachedSessions": 100,
                    "_sessionCache": {
                      "map": {},
                      "list": []
                    }
                  },
                  "hooks": {
                    "beforeRequest": [],
                    "beforeRetry": [],
                    "beforeError": [],
                    "afterResponse": []
                  },
                  "prefixUrl": "",
                  "retry": {
                    "limit": 2,
                    "methods": [
                      "get",
                      "put",
                      "head",
                      "delete",
                      "options",
                      "trace"
                    ],
                    "statusCodes": [
                      408,
                      413,
                      429,
                      500,
                      502,
                      503,
                      504
                    ],
                    "afterStatusCodes": [
                      413,
                      429,
                      503
                    ],
                    "maxRetryAfter": null,
                    "backoffLimit": null
                  },
                  "throwHttpErrors": true,
                  "timeout": 10000,
                  "signal": {},
                  "duplex": "half"
                },
                "name": "HTTPError",
                "requestUrl": "https://api.staging.refiner.neoflow.energy/v1/auth",
                "status": 403
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noContextVc = klona(validVc);\n          delete noContextVc['@context'];\n          const body = createRequestBody({vc: noContextVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "XVhcHeGrozFAqf5Mjb4dn",
              "ctx": null,
              "_testId": "urn:uuid:1aac6b6f-b343-4050-867d-dde706a8e88d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Mavennet",
                "rowId": "MUST not verify if \"@context\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36671,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 19,
              "state": "failed",
              "err": {
                "response": {},
                "request": {},
                "options": {
                  "credentials": "same-origin",
                  "headers": {},
                  "body": {},
                  "method": "POST",
                  "agent": {
                    "_events": {},
                    "_eventsCount": 2,
                    "defaultPort": 443,
                    "protocol": "https:",
                    "options": {
                      "rejectUnauthorized": false,
                      "noDelay": true,
                      "path": null
                    },
                    "requests": {},
                    "sockets": {},
                    "freeSockets": {},
                    "keepAliveMsecs": 1000,
                    "keepAlive": false,
                    "maxSockets": null,
                    "maxFreeSockets": 256,
                    "scheduling": "lifo",
                    "maxTotalSockets": null,
                    "totalSocketCount": 0,
                    "maxCachedSessions": 100,
                    "_sessionCache": {
                      "map": {},
                      "list": []
                    }
                  },
                  "hooks": {
                    "beforeRequest": [],
                    "beforeRetry": [],
                    "beforeError": [],
                    "afterResponse": []
                  },
                  "prefixUrl": "",
                  "retry": {
                    "limit": 2,
                    "methods": [
                      "get",
                      "put",
                      "head",
                      "delete",
                      "options",
                      "trace"
                    ],
                    "statusCodes": [
                      408,
                      413,
                      429,
                      500,
                      502,
                      503,
                      504
                    ],
                    "afterStatusCodes": [
                      413,
                      429,
                      503
                    ],
                    "maxRetryAfter": null,
                    "backoffLimit": null
                  },
                  "throwHttpErrors": true,
                  "timeout": 10000,
                  "signal": {},
                  "duplex": "half"
                },
                "name": "HTTPError",
                "requestUrl": "https://api.staging.refiner.neoflow.energy/v1/auth",
                "status": 403
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noTypeVc = klona(validVc);\n        delete noTypeVc.type;\n        const body = createRequestBody({vc: noTypeVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "XVhcHeGrozFAqf5Mjb4dn",
              "ctx": null,
              "_testId": "urn:uuid:2ce5cd3a-5e9f-44f2-9f14-dd3ca60a3178",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Mavennet",
                "rowId": "MUST not verify if \"type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36692,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 17,
              "state": "failed",
              "err": {
                "response": {},
                "request": {},
                "options": {
                  "credentials": "same-origin",
                  "headers": {},
                  "body": {},
                  "method": "POST",
                  "agent": {
                    "_events": {},
                    "_eventsCount": 2,
                    "defaultPort": 443,
                    "protocol": "https:",
                    "options": {
                      "rejectUnauthorized": false,
                      "noDelay": true,
                      "path": null
                    },
                    "requests": {},
                    "sockets": {},
                    "freeSockets": {},
                    "keepAliveMsecs": 1000,
                    "keepAlive": false,
                    "maxSockets": null,
                    "maxFreeSockets": 256,
                    "scheduling": "lifo",
                    "maxTotalSockets": null,
                    "totalSocketCount": 0,
                    "maxCachedSessions": 100,
                    "_sessionCache": {
                      "map": {},
                      "list": []
                    }
                  },
                  "hooks": {
                    "beforeRequest": [],
                    "beforeRetry": [],
                    "beforeError": [],
                    "afterResponse": []
                  },
                  "prefixUrl": "",
                  "retry": {
                    "limit": 2,
                    "methods": [
                      "get",
                      "put",
                      "head",
                      "delete",
                      "options",
                      "trace"
                    ],
                    "statusCodes": [
                      408,
                      413,
                      429,
                      500,
                      502,
                      503,
                      504
                    ],
                    "afterStatusCodes": [
                      413,
                      429,
                      503
                    ],
                    "maxRetryAfter": null,
                    "backoffLimit": null
                  },
                  "throwHttpErrors": true,
                  "timeout": 10000,
                  "signal": {},
                  "duplex": "half"
                },
                "name": "HTTPError",
                "requestUrl": "https://api.staging.refiner.neoflow.energy/v1/auth",
                "status": 403
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noIssuerVc = klona(validVc);\n        delete noIssuerVc.issuer;\n        const body = createRequestBody({vc: noIssuerVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "XVhcHeGrozFAqf5Mjb4dn",
              "ctx": null,
              "_testId": "urn:uuid:b1296e6e-20b1-4533-a9f8-81e5f607179c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Mavennet",
                "rowId": "MUST not verify if \"issuer\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36709,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 16,
              "state": "failed",
              "err": {
                "response": {},
                "request": {},
                "options": {
                  "credentials": "same-origin",
                  "headers": {},
                  "body": {},
                  "method": "POST",
                  "agent": {
                    "_events": {},
                    "_eventsCount": 2,
                    "defaultPort": 443,
                    "protocol": "https:",
                    "options": {
                      "rejectUnauthorized": false,
                      "noDelay": true,
                      "path": null
                    },
                    "requests": {},
                    "sockets": {},
                    "freeSockets": {},
                    "keepAliveMsecs": 1000,
                    "keepAlive": false,
                    "maxSockets": null,
                    "maxFreeSockets": 256,
                    "scheduling": "lifo",
                    "maxTotalSockets": null,
                    "totalSocketCount": 0,
                    "maxCachedSessions": 100,
                    "_sessionCache": {
                      "map": {},
                      "list": []
                    }
                  },
                  "hooks": {
                    "beforeRequest": [],
                    "beforeRetry": [],
                    "beforeError": [],
                    "afterResponse": []
                  },
                  "prefixUrl": "",
                  "retry": {
                    "limit": 2,
                    "methods": [
                      "get",
                      "put",
                      "head",
                      "delete",
                      "options",
                      "trace"
                    ],
                    "statusCodes": [
                      408,
                      413,
                      429,
                      500,
                      502,
                      503,
                      504
                    ],
                    "afterStatusCodes": [
                      413,
                      429,
                      503
                    ],
                    "maxRetryAfter": null,
                    "backoffLimit": null
                  },
                  "throwHttpErrors": true,
                  "timeout": 10000,
                  "signal": {},
                  "duplex": "half"
                },
                "name": "HTTPError",
                "requestUrl": "https://api.staging.refiner.neoflow.energy/v1/auth",
                "status": 403
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noCredentialSubjectVc = klona(validVc);\n          delete noCredentialSubjectVc.credentialSubject;\n          const body = createRequestBody({vc: noCredentialSubjectVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "XVhcHeGrozFAqf5Mjb4dn",
              "ctx": null,
              "_testId": "urn:uuid:857b0003-08a0-416e-bb4b-c54e36ece9ea",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Mavennet",
                "rowId": "MUST not verify if \"credentialSubject\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36727,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 18,
              "state": "failed",
              "err": {
                "response": {},
                "request": {},
                "options": {
                  "credentials": "same-origin",
                  "headers": {},
                  "body": {},
                  "method": "POST",
                  "agent": {
                    "_events": {},
                    "_eventsCount": 2,
                    "defaultPort": 443,
                    "protocol": "https:",
                    "options": {
                      "rejectUnauthorized": false,
                      "noDelay": true,
                      "path": null
                    },
                    "requests": {},
                    "sockets": {},
                    "freeSockets": {},
                    "keepAliveMsecs": 1000,
                    "keepAlive": false,
                    "maxSockets": null,
                    "maxFreeSockets": 256,
                    "scheduling": "lifo",
                    "maxTotalSockets": null,
                    "totalSocketCount": 0,
                    "maxCachedSessions": 100,
                    "_sessionCache": {
                      "map": {},
                      "list": []
                    }
                  },
                  "hooks": {
                    "beforeRequest": [],
                    "beforeRetry": [],
                    "beforeError": [],
                    "afterResponse": []
                  },
                  "prefixUrl": "",
                  "retry": {
                    "limit": 2,
                    "methods": [
                      "get",
                      "put",
                      "head",
                      "delete",
                      "options",
                      "trace"
                    ],
                    "statusCodes": [
                      408,
                      413,
                      429,
                      500,
                      502,
                      503,
                      504
                    ],
                    "afterStatusCodes": [
                      413,
                      429,
                      503
                    ],
                    "maxRetryAfter": null,
                    "backoffLimit": null
                  },
                  "throwHttpErrors": true,
                  "timeout": 10000,
                  "signal": {},
                  "duplex": "half"
                },
                "name": "HTTPError",
                "requestUrl": "https://api.staging.refiner.neoflow.energy/v1/auth",
                "status": 403
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noProofVc = klona(validVc);\n        delete noProofVc.proof;\n        const body = createRequestBody({vc: noProofVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "XVhcHeGrozFAqf5Mjb4dn",
              "ctx": null,
              "_testId": "urn:uuid:c0e6f8a5-dfa4-4504-8bb2-c32068a0cf1f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Mavennet",
                "rowId": "MUST not verify if \"proof\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36745,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 17,
              "state": "failed",
              "err": {
                "response": {},
                "request": {},
                "options": {
                  "credentials": "same-origin",
                  "headers": {},
                  "body": {},
                  "method": "POST",
                  "agent": {
                    "_events": {},
                    "_eventsCount": 2,
                    "defaultPort": 443,
                    "protocol": "https:",
                    "options": {
                      "rejectUnauthorized": false,
                      "noDelay": true,
                      "path": null
                    },
                    "requests": {},
                    "sockets": {},
                    "freeSockets": {},
                    "keepAliveMsecs": 1000,
                    "keepAlive": false,
                    "maxSockets": null,
                    "maxFreeSockets": 256,
                    "scheduling": "lifo",
                    "maxTotalSockets": null,
                    "totalSocketCount": 0,
                    "maxCachedSessions": 100,
                    "_sessionCache": {
                      "map": {},
                      "list": []
                    }
                  },
                  "hooks": {
                    "beforeRequest": [],
                    "beforeRetry": [],
                    "beforeError": [],
                    "afterResponse": []
                  },
                  "prefixUrl": "",
                  "retry": {
                    "limit": 2,
                    "methods": [
                      "get",
                      "put",
                      "head",
                      "delete",
                      "options",
                      "trace"
                    ],
                    "statusCodes": [
                      408,
                      413,
                      429,
                      500,
                      502,
                      503,
                      504
                    ],
                    "afterStatusCodes": [
                      413,
                      429,
                      503
                    ],
                    "maxRetryAfter": null,
                    "backoffLimit": null
                  },
                  "throwHttpErrors": true,
                  "timeout": 10000,
                  "signal": {},
                  "duplex": "half"
                },
                "name": "HTTPError",
                "requestUrl": "https://api.staging.refiner.neoflow.energy/v1/auth",
                "status": 403
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.type\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofTypeVc = klona(validVc);\n          delete noProofTypeVc.proof.type;\n          const body = createRequestBody({vc: noProofTypeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "XVhcHeGrozFAqf5Mjb4dn",
              "ctx": null,
              "_testId": "urn:uuid:d89b731f-cd50-49bd-96a1-ad84f4dd40b5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Mavennet",
                "rowId": "MUST not verify if \"proof.type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36762,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 18,
              "state": "failed",
              "err": {
                "response": {},
                "request": {},
                "options": {
                  "credentials": "same-origin",
                  "headers": {},
                  "body": {},
                  "method": "POST",
                  "agent": {
                    "_events": {},
                    "_eventsCount": 2,
                    "defaultPort": 443,
                    "protocol": "https:",
                    "options": {
                      "rejectUnauthorized": false,
                      "noDelay": true,
                      "path": null
                    },
                    "requests": {},
                    "sockets": {},
                    "freeSockets": {},
                    "keepAliveMsecs": 1000,
                    "keepAlive": false,
                    "maxSockets": null,
                    "maxFreeSockets": 256,
                    "scheduling": "lifo",
                    "maxTotalSockets": null,
                    "totalSocketCount": 0,
                    "maxCachedSessions": 100,
                    "_sessionCache": {
                      "map": {},
                      "list": []
                    }
                  },
                  "hooks": {
                    "beforeRequest": [],
                    "beforeRetry": [],
                    "beforeError": [],
                    "afterResponse": []
                  },
                  "prefixUrl": "",
                  "retry": {
                    "limit": 2,
                    "methods": [
                      "get",
                      "put",
                      "head",
                      "delete",
                      "options",
                      "trace"
                    ],
                    "statusCodes": [
                      408,
                      413,
                      429,
                      500,
                      502,
                      503,
                      504
                    ],
                    "afterStatusCodes": [
                      413,
                      429,
                      503
                    ],
                    "maxRetryAfter": null,
                    "backoffLimit": null
                  },
                  "throwHttpErrors": true,
                  "timeout": 10000,
                  "signal": {},
                  "duplex": "half"
                },
                "name": "HTTPError",
                "requestUrl": "https://api.staging.refiner.neoflow.energy/v1/auth",
                "status": 403
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.created\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofCreatedVc = klona(validVc);\n          delete noProofCreatedVc.proof.created;\n          const body = createRequestBody({vc: noProofCreatedVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "XVhcHeGrozFAqf5Mjb4dn",
              "ctx": null,
              "_testId": "urn:uuid:20f381df-09d7-4b0b-a191-36eeb780c571",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Mavennet",
                "rowId": "MUST not verify if \"proof.created\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36781,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 17,
              "state": "failed",
              "err": {
                "response": {},
                "request": {},
                "options": {
                  "credentials": "same-origin",
                  "headers": {},
                  "body": {},
                  "method": "POST",
                  "agent": {
                    "_events": {},
                    "_eventsCount": 2,
                    "defaultPort": 443,
                    "protocol": "https:",
                    "options": {
                      "rejectUnauthorized": false,
                      "noDelay": true,
                      "path": null
                    },
                    "requests": {},
                    "sockets": {},
                    "freeSockets": {},
                    "keepAliveMsecs": 1000,
                    "keepAlive": false,
                    "maxSockets": null,
                    "maxFreeSockets": 256,
                    "scheduling": "lifo",
                    "maxTotalSockets": null,
                    "totalSocketCount": 0,
                    "maxCachedSessions": 100,
                    "_sessionCache": {
                      "map": {},
                      "list": []
                    }
                  },
                  "hooks": {
                    "beforeRequest": [],
                    "beforeRetry": [],
                    "beforeError": [],
                    "afterResponse": []
                  },
                  "prefixUrl": "",
                  "retry": {
                    "limit": 2,
                    "methods": [
                      "get",
                      "put",
                      "head",
                      "delete",
                      "options",
                      "trace"
                    ],
                    "statusCodes": [
                      408,
                      413,
                      429,
                      500,
                      502,
                      503,
                      504
                    ],
                    "afterStatusCodes": [
                      413,
                      429,
                      503
                    ],
                    "maxRetryAfter": null,
                    "backoffLimit": null
                  },
                  "throwHttpErrors": true,
                  "timeout": 10000,
                  "signal": {},
                  "duplex": "half"
                },
                "name": "HTTPError",
                "requestUrl": "https://api.staging.refiner.neoflow.energy/v1/auth",
                "status": 403
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.verificationMethod\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofVerificationMethodVc = klona(validVc);\n          delete noProofVerificationMethodVc.proof.verificationMethod;\n          const body = createRequestBody({vc: noProofVerificationMethodVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "XVhcHeGrozFAqf5Mjb4dn",
              "ctx": null,
              "_testId": "urn:uuid:632fca85-1e32-4df1-8776-2e8e3fdd1c16",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Mavennet",
                "rowId": "MUST not verify if \"proof.verificationMethod\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36798,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 13,
              "state": "failed",
              "err": {
                "response": {},
                "request": {},
                "options": {
                  "credentials": "same-origin",
                  "headers": {},
                  "body": {},
                  "method": "POST",
                  "agent": {
                    "_events": {},
                    "_eventsCount": 2,
                    "defaultPort": 443,
                    "protocol": "https:",
                    "options": {
                      "rejectUnauthorized": false,
                      "noDelay": true,
                      "path": null
                    },
                    "requests": {},
                    "sockets": {},
                    "freeSockets": {},
                    "keepAliveMsecs": 1000,
                    "keepAlive": false,
                    "maxSockets": null,
                    "maxFreeSockets": 256,
                    "scheduling": "lifo",
                    "maxTotalSockets": null,
                    "totalSocketCount": 0,
                    "maxCachedSessions": 100,
                    "_sessionCache": {
                      "map": {},
                      "list": []
                    }
                  },
                  "hooks": {
                    "beforeRequest": [],
                    "beforeRetry": [],
                    "beforeError": [],
                    "afterResponse": []
                  },
                  "prefixUrl": "",
                  "retry": {
                    "limit": 2,
                    "methods": [
                      "get",
                      "put",
                      "head",
                      "delete",
                      "options",
                      "trace"
                    ],
                    "statusCodes": [
                      408,
                      413,
                      429,
                      500,
                      502,
                      503,
                      504
                    ],
                    "afterStatusCodes": [
                      413,
                      429,
                      503
                    ],
                    "maxRetryAfter": null,
                    "backoffLimit": null
                  },
                  "throwHttpErrors": true,
                  "timeout": 10000,
                  "signal": {},
                  "duplex": "half"
                },
                "name": "HTTPError",
                "requestUrl": "https://api.staging.refiner.neoflow.energy/v1/auth",
                "status": 403
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofValue\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofValueVc = klona(validVc);\n          delete noProofValueVc.proof.proofValue;\n          const body = createRequestBody({vc: noProofValueVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "XVhcHeGrozFAqf5Mjb4dn",
              "ctx": null,
              "_testId": "urn:uuid:fc23df80-0044-4bc9-9c9e-b39c37ef6e03",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Mavennet",
                "rowId": "MUST not verify if \"proof.proofValue\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36812,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 16,
              "state": "failed",
              "err": {
                "response": {},
                "request": {},
                "options": {
                  "credentials": "same-origin",
                  "headers": {},
                  "body": {},
                  "method": "POST",
                  "agent": {
                    "_events": {},
                    "_eventsCount": 2,
                    "defaultPort": 443,
                    "protocol": "https:",
                    "options": {
                      "rejectUnauthorized": false,
                      "noDelay": true,
                      "path": null
                    },
                    "requests": {},
                    "sockets": {},
                    "freeSockets": {},
                    "keepAliveMsecs": 1000,
                    "keepAlive": false,
                    "maxSockets": null,
                    "maxFreeSockets": 256,
                    "scheduling": "lifo",
                    "maxTotalSockets": null,
                    "totalSocketCount": 0,
                    "maxCachedSessions": 100,
                    "_sessionCache": {
                      "map": {},
                      "list": []
                    }
                  },
                  "hooks": {
                    "beforeRequest": [],
                    "beforeRetry": [],
                    "beforeError": [],
                    "afterResponse": []
                  },
                  "prefixUrl": "",
                  "retry": {
                    "limit": 2,
                    "methods": [
                      "get",
                      "put",
                      "head",
                      "delete",
                      "options",
                      "trace"
                    ],
                    "statusCodes": [
                      408,
                      413,
                      429,
                      500,
                      502,
                      503,
                      504
                    ],
                    "afterStatusCodes": [
                      413,
                      429,
                      503
                    ],
                    "maxRetryAfter": null,
                    "backoffLimit": null
                  },
                  "throwHttpErrors": true,
                  "timeout": 10000,
                  "signal": {},
                  "duplex": "half"
                },
                "name": "HTTPError",
                "requestUrl": "https://api.staging.refiner.neoflow.energy/v1/auth",
                "status": 403
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofPurpose\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofPurposeVc = klona(validVc);\n          delete noProofPurposeVc.proof.proofPurpose;\n          const body = createRequestBody({vc: noProofPurposeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "XVhcHeGrozFAqf5Mjb4dn",
              "ctx": null,
              "_testId": "urn:uuid:8344caf4-8c0a-448c-aff0-6ed0206b18f7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Mavennet",
                "rowId": "MUST not verify if \"proof.proofPurpose\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36828,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 14,
              "state": "failed",
              "err": {
                "response": {},
                "request": {},
                "options": {
                  "credentials": "same-origin",
                  "headers": {},
                  "body": {},
                  "method": "POST",
                  "agent": {
                    "_events": {},
                    "_eventsCount": 2,
                    "defaultPort": 443,
                    "protocol": "https:",
                    "options": {
                      "rejectUnauthorized": false,
                      "noDelay": true,
                      "path": null
                    },
                    "requests": {},
                    "sockets": {},
                    "freeSockets": {},
                    "keepAliveMsecs": 1000,
                    "keepAlive": false,
                    "maxSockets": null,
                    "maxFreeSockets": 256,
                    "scheduling": "lifo",
                    "maxTotalSockets": null,
                    "totalSocketCount": 0,
                    "maxCachedSessions": 100,
                    "_sessionCache": {
                      "map": {},
                      "list": []
                    }
                  },
                  "hooks": {
                    "beforeRequest": [],
                    "beforeRetry": [],
                    "beforeError": [],
                    "afterResponse": []
                  },
                  "prefixUrl": "",
                  "retry": {
                    "limit": 2,
                    "methods": [
                      "get",
                      "put",
                      "head",
                      "delete",
                      "options",
                      "trace"
                    ],
                    "statusCodes": [
                      408,
                      413,
                      429,
                      500,
                      502,
                      503,
                      504
                    ],
                    "afterStatusCodes": [
                      413,
                      429,
                      503
                    ],
                    "maxRetryAfter": null,
                    "backoffLimit": null
                  },
                  "throwHttpErrors": true,
                  "timeout": 10000,
                  "signal": {},
                  "duplex": "half"
                },
                "name": "HTTPError",
                "requestUrl": "https://api.staging.refiner.neoflow.energy/v1/auth",
                "status": 403
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidContextTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidContextType of invalidContextTypes) {\n          copyVc['@context'] = invalidContextType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "XVhcHeGrozFAqf5Mjb4dn",
              "ctx": null,
              "_testId": "urn:uuid:1efea43e-d99f-4eba-ab38-4980e9b1084f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Mavennet",
                "rowId": "MUST not verify if \"@context\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36843,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 13,
              "state": "failed",
              "err": {
                "response": {},
                "request": {},
                "options": {
                  "credentials": "same-origin",
                  "headers": {},
                  "body": {},
                  "method": "POST",
                  "agent": {
                    "_events": {},
                    "_eventsCount": 2,
                    "defaultPort": 443,
                    "protocol": "https:",
                    "options": {
                      "rejectUnauthorized": false,
                      "noDelay": true,
                      "path": null
                    },
                    "requests": {},
                    "sockets": {},
                    "freeSockets": {},
                    "keepAliveMsecs": 1000,
                    "keepAlive": false,
                    "maxSockets": null,
                    "maxFreeSockets": 256,
                    "scheduling": "lifo",
                    "maxTotalSockets": null,
                    "totalSocketCount": 0,
                    "maxCachedSessions": 100,
                    "_sessionCache": {
                      "map": {},
                      "list": []
                    }
                  },
                  "hooks": {
                    "beforeRequest": [],
                    "beforeRetry": [],
                    "beforeError": [],
                    "afterResponse": []
                  },
                  "prefixUrl": "",
                  "retry": {
                    "limit": 2,
                    "methods": [
                      "get",
                      "put",
                      "head",
                      "delete",
                      "options",
                      "trace"
                    ],
                    "statusCodes": [
                      408,
                      413,
                      429,
                      500,
                      502,
                      503,
                      504
                    ],
                    "afterStatusCodes": [
                      413,
                      429,
                      503
                    ],
                    "maxRetryAfter": null,
                    "backoffLimit": null
                  },
                  "throwHttpErrors": true,
                  "timeout": 10000,
                  "signal": {},
                  "duplex": "half"
                },
                "name": "HTTPError",
                "requestUrl": "https://api.staging.refiner.neoflow.energy/v1/auth",
                "status": 403
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" items are not strings or objects.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidContextItemTypes = [[], null, undefined, 10, true];\n          for(const invalidContextItemType of invalidContextItemTypes) {\n            copyVc['@context'] = [invalidContextItemType];\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "XVhcHeGrozFAqf5Mjb4dn",
              "ctx": null,
              "_testId": "urn:uuid:05869382-7b1c-4acc-ac05-1e6f7f4509d5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Mavennet",
                "rowId": "MUST not verify if \"@context\" items are not strings or objects."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36856,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 12,
              "state": "failed",
              "err": {
                "response": {},
                "request": {},
                "options": {
                  "credentials": "same-origin",
                  "headers": {},
                  "body": {},
                  "method": "POST",
                  "agent": {
                    "_events": {},
                    "_eventsCount": 2,
                    "defaultPort": 443,
                    "protocol": "https:",
                    "options": {
                      "rejectUnauthorized": false,
                      "noDelay": true,
                      "path": null
                    },
                    "requests": {},
                    "sockets": {},
                    "freeSockets": {},
                    "keepAliveMsecs": 1000,
                    "keepAlive": false,
                    "maxSockets": null,
                    "maxFreeSockets": 256,
                    "scheduling": "lifo",
                    "maxTotalSockets": null,
                    "totalSocketCount": 0,
                    "maxCachedSessions": 100,
                    "_sessionCache": {
                      "map": {},
                      "list": []
                    }
                  },
                  "hooks": {
                    "beforeRequest": [],
                    "beforeRetry": [],
                    "beforeError": [],
                    "afterResponse": []
                  },
                  "prefixUrl": "",
                  "retry": {
                    "limit": 2,
                    "methods": [
                      "get",
                      "put",
                      "head",
                      "delete",
                      "options",
                      "trace"
                    ],
                    "statusCodes": [
                      408,
                      413,
                      429,
                      500,
                      502,
                      503,
                      504
                    ],
                    "afterStatusCodes": [
                      413,
                      429,
                      503
                    ],
                    "maxRetryAfter": null,
                    "backoffLimit": null
                  },
                  "throwHttpErrors": true,
                  "timeout": 10000,
                  "signal": {},
                  "duplex": "half"
                },
                "name": "HTTPError",
                "requestUrl": "https://api.staging.refiner.neoflow.energy/v1/auth",
                "status": 403
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidType of invalidTypes) {\n          copyVc.type = invalidType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "XVhcHeGrozFAqf5Mjb4dn",
              "ctx": null,
              "_testId": "urn:uuid:c4934e36-363e-427d-be6c-0868c07f5030",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Mavennet",
                "rowId": "MUST not verify if \"type\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36869,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 12,
              "state": "failed",
              "err": {
                "response": {},
                "request": {},
                "options": {
                  "credentials": "same-origin",
                  "headers": {},
                  "body": {},
                  "method": "POST",
                  "agent": {
                    "_events": {},
                    "_eventsCount": 2,
                    "defaultPort": 443,
                    "protocol": "https:",
                    "options": {
                      "rejectUnauthorized": false,
                      "noDelay": true,
                      "path": null
                    },
                    "requests": {},
                    "sockets": {},
                    "freeSockets": {},
                    "keepAliveMsecs": 1000,
                    "keepAlive": false,
                    "maxSockets": null,
                    "maxFreeSockets": 256,
                    "scheduling": "lifo",
                    "maxTotalSockets": null,
                    "totalSocketCount": 0,
                    "maxCachedSessions": 100,
                    "_sessionCache": {
                      "map": {},
                      "list": []
                    }
                  },
                  "hooks": {
                    "beforeRequest": [],
                    "beforeRetry": [],
                    "beforeError": [],
                    "afterResponse": []
                  },
                  "prefixUrl": "",
                  "retry": {
                    "limit": 2,
                    "methods": [
                      "get",
                      "put",
                      "head",
                      "delete",
                      "options",
                      "trace"
                    ],
                    "statusCodes": [
                      408,
                      413,
                      429,
                      500,
                      502,
                      503,
                      504
                    ],
                    "afterStatusCodes": [
                      413,
                      429,
                      503
                    ],
                    "maxRetryAfter": null,
                    "backoffLimit": null
                  },
                  "throwHttpErrors": true,
                  "timeout": 10000,
                  "signal": {},
                  "duplex": "half"
                },
                "name": "HTTPError",
                "requestUrl": "https://api.staging.refiner.neoflow.energy/v1/auth",
                "status": 403
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" items are not strings.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypeItemTypes = [[], {}, null, undefined, 10, true];\n        for(const invalidItemType of invalidTypeItemTypes) {\n          copyVc.type = [invalidItemType];\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "XVhcHeGrozFAqf5Mjb4dn",
              "ctx": null,
              "_testId": "urn:uuid:385b70f9-bcff-4c68-9dad-88d5c3564a43",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Mavennet",
                "rowId": "MUST not verify if \"type\" items are not strings."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36882,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 13,
              "state": "failed",
              "err": {
                "response": {},
                "request": {},
                "options": {
                  "credentials": "same-origin",
                  "headers": {},
                  "body": {},
                  "method": "POST",
                  "agent": {
                    "_events": {},
                    "_eventsCount": 2,
                    "defaultPort": 443,
                    "protocol": "https:",
                    "options": {
                      "rejectUnauthorized": false,
                      "noDelay": true,
                      "path": null
                    },
                    "requests": {},
                    "sockets": {},
                    "freeSockets": {},
                    "keepAliveMsecs": 1000,
                    "keepAlive": false,
                    "maxSockets": null,
                    "maxFreeSockets": 256,
                    "scheduling": "lifo",
                    "maxTotalSockets": null,
                    "totalSocketCount": 0,
                    "maxCachedSessions": 100,
                    "_sessionCache": {
                      "map": {},
                      "list": []
                    }
                  },
                  "hooks": {
                    "beforeRequest": [],
                    "beforeRetry": [],
                    "beforeError": [],
                    "afterResponse": []
                  },
                  "prefixUrl": "",
                  "retry": {
                    "limit": 2,
                    "methods": [
                      "get",
                      "put",
                      "head",
                      "delete",
                      "options",
                      "trace"
                    ],
                    "statusCodes": [
                      408,
                      413,
                      429,
                      500,
                      502,
                      503,
                      504
                    ],
                    "afterStatusCodes": [
                      413,
                      429,
                      503
                    ],
                    "maxRetryAfter": null,
                    "backoffLimit": null
                  },
                  "throwHttpErrors": true,
                  "timeout": 10000,
                  "signal": {},
                  "duplex": "half"
                },
                "name": "HTTPError",
                "requestUrl": "https://api.staging.refiner.neoflow.energy/v1/auth",
                "status": 403
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" is not an object or a string.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidIssuerTypes = [[], null, undefined, 10, true];\n          for(const invalidIssuerType of invalidIssuerTypes) {\n            copyVc.issuer = invalidIssuerType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "XVhcHeGrozFAqf5Mjb4dn",
              "ctx": null,
              "_testId": "urn:uuid:14641568-3713-46a2-95b4-88f99cdebf12",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Mavennet",
                "rowId": "MUST not verify if \"issuer\" is not an object or a string."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36896,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 13,
              "state": "failed",
              "err": {
                "response": {},
                "request": {},
                "options": {
                  "credentials": "same-origin",
                  "headers": {},
                  "body": {},
                  "method": "POST",
                  "agent": {
                    "_events": {},
                    "_eventsCount": 2,
                    "defaultPort": 443,
                    "protocol": "https:",
                    "options": {
                      "rejectUnauthorized": false,
                      "noDelay": true,
                      "path": null
                    },
                    "requests": {},
                    "sockets": {},
                    "freeSockets": {},
                    "keepAliveMsecs": 1000,
                    "keepAlive": false,
                    "maxSockets": null,
                    "maxFreeSockets": 256,
                    "scheduling": "lifo",
                    "maxTotalSockets": null,
                    "totalSocketCount": 0,
                    "maxCachedSessions": 100,
                    "_sessionCache": {
                      "map": {},
                      "list": []
                    }
                  },
                  "hooks": {
                    "beforeRequest": [],
                    "beforeRetry": [],
                    "beforeError": [],
                    "afterResponse": []
                  },
                  "prefixUrl": "",
                  "retry": {
                    "limit": 2,
                    "methods": [
                      "get",
                      "put",
                      "head",
                      "delete",
                      "options",
                      "trace"
                    ],
                    "statusCodes": [
                      408,
                      413,
                      429,
                      500,
                      502,
                      503,
                      504
                    ],
                    "afterStatusCodes": [
                      413,
                      429,
                      503
                    ],
                    "maxRetryAfter": null,
                    "backoffLimit": null
                  },
                  "throwHttpErrors": true,
                  "timeout": 10000,
                  "signal": {},
                  "duplex": "half"
                },
                "name": "HTTPError",
                "requestUrl": "https://api.staging.refiner.neoflow.energy/v1/auth",
                "status": 403
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" is not an object.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidCredentialSubjectTypes = [\n            'string', null, undefined, 10, true, []\n          ];\n          for(const invalidType of invalidCredentialSubjectTypes) {\n            copyVc.credentialSubject = invalidType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "XVhcHeGrozFAqf5Mjb4dn",
              "ctx": null,
              "_testId": "urn:uuid:cd2b0bc5-e2f3-497c-9b6f-00020a46b0c4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Mavennet",
                "rowId": "MUST not verify if \"credentialSubject\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36909,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 13,
              "state": "failed",
              "err": {
                "response": {},
                "request": {},
                "options": {
                  "credentials": "same-origin",
                  "headers": {},
                  "body": {},
                  "method": "POST",
                  "agent": {
                    "_events": {},
                    "_eventsCount": 2,
                    "defaultPort": 443,
                    "protocol": "https:",
                    "options": {
                      "rejectUnauthorized": false,
                      "noDelay": true,
                      "path": null
                    },
                    "requests": {},
                    "sockets": {},
                    "freeSockets": {},
                    "keepAliveMsecs": 1000,
                    "keepAlive": false,
                    "maxSockets": null,
                    "maxFreeSockets": 256,
                    "scheduling": "lifo",
                    "maxTotalSockets": null,
                    "totalSocketCount": 0,
                    "maxCachedSessions": 100,
                    "_sessionCache": {
                      "map": {},
                      "list": []
                    }
                  },
                  "hooks": {
                    "beforeRequest": [],
                    "beforeRetry": [],
                    "beforeError": [],
                    "afterResponse": []
                  },
                  "prefixUrl": "",
                  "retry": {
                    "limit": 2,
                    "methods": [
                      "get",
                      "put",
                      "head",
                      "delete",
                      "options",
                      "trace"
                    ],
                    "statusCodes": [
                      408,
                      413,
                      429,
                      500,
                      502,
                      503,
                      504
                    ],
                    "afterStatusCodes": [
                      413,
                      429,
                      503
                    ],
                    "maxRetryAfter": null,
                    "backoffLimit": null
                  },
                  "throwHttpErrors": true,
                  "timeout": 10000,
                  "signal": {},
                  "duplex": "half"
                },
                "name": "HTTPError",
                "requestUrl": "https://api.staging.refiner.neoflow.energy/v1/auth",
                "status": 403
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" is not an object.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidProofTypes = ['string', null, undefined, 10, true, []];\n        for(const invalidProofType of invalidProofTypes) {\n          copyVc.proof = invalidProofType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "XVhcHeGrozFAqf5Mjb4dn",
              "ctx": null,
              "_testId": "urn:uuid:09c64d2e-ddfb-4cd8-b47f-f59a1b61686e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Mavennet",
                "rowId": "MUST not verify if \"proof\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36922,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 12,
              "state": "failed",
              "err": {
                "response": {},
                "request": {},
                "options": {
                  "credentials": "same-origin",
                  "headers": {},
                  "body": {},
                  "method": "POST",
                  "agent": {
                    "_events": {},
                    "_eventsCount": 2,
                    "defaultPort": 443,
                    "protocol": "https:",
                    "options": {
                      "rejectUnauthorized": false,
                      "noDelay": true,
                      "path": null
                    },
                    "requests": {},
                    "sockets": {},
                    "freeSockets": {},
                    "keepAliveMsecs": 1000,
                    "keepAlive": false,
                    "maxSockets": null,
                    "maxFreeSockets": 256,
                    "scheduling": "lifo",
                    "maxTotalSockets": null,
                    "totalSocketCount": 0,
                    "maxCachedSessions": 100,
                    "_sessionCache": {
                      "map": {},
                      "list": []
                    }
                  },
                  "hooks": {
                    "beforeRequest": [],
                    "beforeRetry": [],
                    "beforeError": [],
                    "afterResponse": []
                  },
                  "prefixUrl": "",
                  "retry": {
                    "limit": 2,
                    "methods": [
                      "get",
                      "put",
                      "head",
                      "delete",
                      "options",
                      "trace"
                    ],
                    "statusCodes": [
                      408,
                      413,
                      429,
                      500,
                      502,
                      503,
                      504
                    ],
                    "afterStatusCodes": [
                      413,
                      429,
                      503
                    ],
                    "maxRetryAfter": null,
                    "backoffLimit": null
                  },
                  "throwHttpErrors": true,
                  "timeout": 10000,
                  "signal": {},
                  "duplex": "half"
                },
                "name": "HTTPError",
                "requestUrl": "https://api.staging.refiner.neoflow.energy/v1/auth",
                "status": 403
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "GUekxwv0jYJVenrY178j3",
          "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
          "_testId": "urn:uuid:f1c80d04-4ca4-441e-9104-fe32404f14c7"
        },
        {
          "title": "Procivis One Core",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC.",
              "body": "async function() {\n        // this tells the test report which cell in the interop matrix\n        // the result goes in\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({vc: validVc});\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error);\n        should.exist(result);\n        should.exist(result.status);\n        result.status.should.equal(200);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "0VJ519eb2h6-zOKduTF6f",
              "ctx": null,
              "_testId": "urn:uuid:2033c3bd-cc6f-4737-8f3f-989054d5bb48",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "MUST verify a valid VC."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36936,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 402,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",\"https://www.w3.org/ns/credentials/examples/v2\",\"https://w3id.org/security/suites/ed25519-2020/v1\"],\"id\":\"urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33\",\"type\":[\"VerifiableCredential\",\"AlumniCredential\"],\"name\":\"Alumni Credential\",\"description\":\"A minimum viable example of an Alumni Credential.\",\"issuer\":\"https://vc.example/issuers/5678\",\"validFrom\":\"2023-01-01T00:00:00Z\",\"credentialSubject\":{\"id\":\"did:example:abcdefgh\",\"alumniOf\":\"The School of Examples\"},\"proof\":{\"type\":\"Ed25519Signature2020\",\"created\":\"2023-02-24T23:36:38Z\",\"verificationMethod\":\"did:key:z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2#z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z57Mm1vboMtZiCyJ4aReZsv8co4Re64Y8GEjL1ZARzMbXZgkARFLqFs1P345NpPGG2hgCrS4nNdvJhpwnrNyG3kEF\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          "https://www.w3.org/ns/credentials/examples/v2",
                          "https://w3id.org/security/suites/ed25519-2020/v1"
                        ],
                        "id": "urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33",
                        "type": [
                          "VerifiableCredential",
                          "AlumniCredential"
                        ],
                        "name": "Alumni Credential",
                        "description": "A minimum viable example of an Alumni Credential.",
                        "issuer": "https://vc.example/issuers/5678",
                        "validFrom": "2023-01-01T00:00:00Z",
                        "credentialSubject": {
                          "id": "did:example:abcdefgh",
                          "alumniOf": "The School of Examples"
                        },
                        "proof": {
                          "type": "Ed25519Signature2020",
                          "created": "2023-02-24T23:36:38Z",
                          "verificationMethod": "did:key:z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2#z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z57Mm1vboMtZiCyJ4aReZsv8co4Re64Y8GEjL1ZARzMbXZgkARFLqFs1P345NpPGG2hgCrS4nNdvJhpwnrNyG3kEF"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://canivc.core.dev.procivis-one.com/vc-api/credentials/verify",
                  "status": 400,
                  "data": {
                    "errors": [
                      {
                        "status": 400,
                        "title": "Failed to deserialize the JSON body into the target type",
                        "detail": null
                      }
                    ]
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:48:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noContextVc = klona(validVc);\n          delete noContextVc['@context'];\n          const body = createRequestBody({vc: noContextVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "0VJ519eb2h6-zOKduTF6f",
              "ctx": null,
              "_testId": "urn:uuid:04bf2f91-347a-4f4d-bb7f-b5c01410c892",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "MUST not verify if \"@context\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 37338,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 110,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noTypeVc = klona(validVc);\n        delete noTypeVc.type;\n        const body = createRequestBody({vc: noTypeVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "0VJ519eb2h6-zOKduTF6f",
              "ctx": null,
              "_testId": "urn:uuid:da984144-8b56-4b19-b541-19322f4fc034",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "MUST not verify if \"type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 37449,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 110,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noIssuerVc = klona(validVc);\n        delete noIssuerVc.issuer;\n        const body = createRequestBody({vc: noIssuerVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "0VJ519eb2h6-zOKduTF6f",
              "ctx": null,
              "_testId": "urn:uuid:5ef06640-84e7-43cf-ba0b-047ebac6b244",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "MUST not verify if \"issuer\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 37559,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 110,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noCredentialSubjectVc = klona(validVc);\n          delete noCredentialSubjectVc.credentialSubject;\n          const body = createRequestBody({vc: noCredentialSubjectVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "0VJ519eb2h6-zOKduTF6f",
              "ctx": null,
              "_testId": "urn:uuid:d91ec579-1a08-494d-b93e-cce4f43bc1f7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "MUST not verify if \"credentialSubject\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 37669,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 110,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noProofVc = klona(validVc);\n        delete noProofVc.proof;\n        const body = createRequestBody({vc: noProofVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "0VJ519eb2h6-zOKduTF6f",
              "ctx": null,
              "_testId": "urn:uuid:0580fd87-2a55-4870-9ff2-0b7c7d7b8c28",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "MUST not verify if \"proof\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 37779,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 881,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.type\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofTypeVc = klona(validVc);\n          delete noProofTypeVc.proof.type;\n          const body = createRequestBody({vc: noProofTypeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "0VJ519eb2h6-zOKduTF6f",
              "ctx": null,
              "_testId": "urn:uuid:a9a647cc-facd-467f-98be-7e42bcbc18e5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "MUST not verify if \"proof.type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 38660,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 110,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.created\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofCreatedVc = klona(validVc);\n          delete noProofCreatedVc.proof.created;\n          const body = createRequestBody({vc: noProofCreatedVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "0VJ519eb2h6-zOKduTF6f",
              "ctx": null,
              "_testId": "urn:uuid:2dd62fbc-ef1d-482a-be7b-323be907b288",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "MUST not verify if \"proof.created\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 38770,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 109,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.verificationMethod\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofVerificationMethodVc = klona(validVc);\n          delete noProofVerificationMethodVc.proof.verificationMethod;\n          const body = createRequestBody({vc: noProofVerificationMethodVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "0VJ519eb2h6-zOKduTF6f",
              "ctx": null,
              "_testId": "urn:uuid:21137498-20d7-4eea-9eea-cd12426defbd",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "MUST not verify if \"proof.verificationMethod\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 38880,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 110,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofValue\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofValueVc = klona(validVc);\n          delete noProofValueVc.proof.proofValue;\n          const body = createRequestBody({vc: noProofValueVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "0VJ519eb2h6-zOKduTF6f",
              "ctx": null,
              "_testId": "urn:uuid:18e74d8d-be20-42ab-9421-6dd14ca2a574",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "MUST not verify if \"proof.proofValue\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 38990,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 110,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofPurpose\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofPurposeVc = klona(validVc);\n          delete noProofPurposeVc.proof.proofPurpose;\n          const body = createRequestBody({vc: noProofPurposeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "0VJ519eb2h6-zOKduTF6f",
              "ctx": null,
              "_testId": "urn:uuid:bff78de2-92c7-4f23-a76f-1da7fe285d6b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "MUST not verify if \"proof.proofPurpose\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 39101,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 110,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidContextTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidContextType of invalidContextTypes) {\n          copyVc['@context'] = invalidContextType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "0VJ519eb2h6-zOKduTF6f",
              "ctx": null,
              "_testId": "urn:uuid:0b6be91a-68f6-4227-8b34-bf55c24fbfef",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "MUST not verify if \"@context\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 39211,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 921,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" items are not strings or objects.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidContextItemTypes = [[], null, undefined, 10, true];\n          for(const invalidContextItemType of invalidContextItemTypes) {\n            copyVc['@context'] = [invalidContextItemType];\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "0VJ519eb2h6-zOKduTF6f",
              "ctx": null,
              "_testId": "urn:uuid:3025884e-ac6d-4a05-aee4-a249acf22302",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "MUST not verify if \"@context\" items are not strings or objects."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 40132,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 558,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidType of invalidTypes) {\n          copyVc.type = invalidType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "0VJ519eb2h6-zOKduTF6f",
              "ctx": null,
              "_testId": "urn:uuid:492b5b33-49f7-4801-a705-e28a593a9a51",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "MUST not verify if \"type\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 40690,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 672,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" items are not strings.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypeItemTypes = [[], {}, null, undefined, 10, true];\n        for(const invalidItemType of invalidTypeItemTypes) {\n          copyVc.type = [invalidItemType];\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "0VJ519eb2h6-zOKduTF6f",
              "ctx": null,
              "_testId": "urn:uuid:238407fd-c7ec-4c4c-975f-7fd57ed99a4e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "MUST not verify if \"type\" items are not strings."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 41363,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 672,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" is not an object or a string.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidIssuerTypes = [[], null, undefined, 10, true];\n          for(const invalidIssuerType of invalidIssuerTypes) {\n            copyVc.issuer = invalidIssuerType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "0VJ519eb2h6-zOKduTF6f",
              "ctx": null,
              "_testId": "urn:uuid:4f5f662c-06a2-4c96-988f-85f0cd60a3ce",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "MUST not verify if \"issuer\" is not an object or a string."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 42035,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 558,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" is not an object.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidCredentialSubjectTypes = [\n            'string', null, undefined, 10, true, []\n          ];\n          for(const invalidType of invalidCredentialSubjectTypes) {\n            copyVc.credentialSubject = invalidType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "0VJ519eb2h6-zOKduTF6f",
              "ctx": null,
              "_testId": "urn:uuid:0a933d82-a346-4b9b-948c-2cd0667eb59f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "MUST not verify if \"credentialSubject\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 42593,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 673,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" is not an object.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidProofTypes = ['string', null, undefined, 10, true, []];\n        for(const invalidProofType of invalidProofTypes) {\n          copyVc.proof = invalidProofType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "0VJ519eb2h6-zOKduTF6f",
              "ctx": null,
              "_testId": "urn:uuid:f3a5a0aa-7d5d-41f8-a0e2-0e5c6ccfefd9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "MUST not verify if \"proof\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 43267,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 706,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "GUekxwv0jYJVenrY178j3",
          "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
          "_testId": "urn:uuid:ac956b4e-4c02-44b8-b42d-9858301414aa"
        },
        {
          "title": "SecureKey",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC.",
              "body": "async function() {\n        // this tells the test report which cell in the interop matrix\n        // the result goes in\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({vc: validVc});\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error);\n        should.exist(result);\n        should.exist(result.status);\n        result.status.should.equal(200);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "GNqLPl0Q6JzyDDZzjv6s1",
              "ctx": null,
              "_testId": "urn:uuid:f78ce015-846e-4824-9c68-ba0a593b87ec",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SecureKey",
                "rowId": "MUST verify a valid VC."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 43973,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 63,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected TypeError: fetch failed { …(2) } to not exist",
                "showDiff": false,
                "actual": {
                  "requestUrl": "https://verifier-vcs.sandbox.trustbloc.dev/vc-verifier-interop/verifier/credentials/verify"
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: expected TypeError: fetch failed { …(2) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:48:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noContextVc = klona(validVc);\n          delete noContextVc['@context'];\n          const body = createRequestBody({vc: noContextVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "GNqLPl0Q6JzyDDZzjv6s1",
              "ctx": null,
              "_testId": "urn:uuid:ae1c7533-93b7-4c28-9cfa-56db1a442143",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SecureKey",
                "rowId": "MUST not verify if \"@context\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44038,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 48,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an HTTP error response code: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an HTTP error response code: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:14:10)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:63:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noTypeVc = klona(validVc);\n        delete noTypeVc.type;\n        const body = createRequestBody({vc: noTypeVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "GNqLPl0Q6JzyDDZzjv6s1",
              "ctx": null,
              "_testId": "urn:uuid:1b07116d-6412-446d-9085-459673995ebd",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SecureKey",
                "rowId": "MUST not verify if \"type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44086,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 57,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an HTTP error response code: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an HTTP error response code: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:14:10)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:74:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noIssuerVc = klona(validVc);\n        delete noIssuerVc.issuer;\n        const body = createRequestBody({vc: noIssuerVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "GNqLPl0Q6JzyDDZzjv6s1",
              "ctx": null,
              "_testId": "urn:uuid:c039809d-6c8b-4bf3-ad14-0fa749a262b5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SecureKey",
                "rowId": "MUST not verify if \"issuer\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44144,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 82,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an HTTP error response code: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an HTTP error response code: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:14:10)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:85:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noCredentialSubjectVc = klona(validVc);\n          delete noCredentialSubjectVc.credentialSubject;\n          const body = createRequestBody({vc: noCredentialSubjectVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "GNqLPl0Q6JzyDDZzjv6s1",
              "ctx": null,
              "_testId": "urn:uuid:79147e57-048d-4a74-b46e-2cf7c297e97f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SecureKey",
                "rowId": "MUST not verify if \"credentialSubject\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44226,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 46,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an HTTP error response code: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an HTTP error response code: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:14:10)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:97:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noProofVc = klona(validVc);\n        delete noProofVc.proof;\n        const body = createRequestBody({vc: noProofVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "GNqLPl0Q6JzyDDZzjv6s1",
              "ctx": null,
              "_testId": "urn:uuid:2c4b3906-27f7-4574-8395-12963ee9435a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SecureKey",
                "rowId": "MUST not verify if \"proof\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44272,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 9,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an HTTP error response code: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an HTTP error response code: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:14:10)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:108:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.type\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofTypeVc = klona(validVc);\n          delete noProofTypeVc.proof.type;\n          const body = createRequestBody({vc: noProofTypeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "GNqLPl0Q6JzyDDZzjv6s1",
              "ctx": null,
              "_testId": "urn:uuid:6296d584-b820-43a0-b3f8-8f567e8c6fa7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SecureKey",
                "rowId": "MUST not verify if \"proof.type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44281,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 148,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an HTTP error response code: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an HTTP error response code: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:14:10)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:120:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.created\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofCreatedVc = klona(validVc);\n          delete noProofCreatedVc.proof.created;\n          const body = createRequestBody({vc: noProofCreatedVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "GNqLPl0Q6JzyDDZzjv6s1",
              "ctx": null,
              "_testId": "urn:uuid:ae04a7bc-2eaa-4a6f-897e-55597a292b10",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SecureKey",
                "rowId": "MUST not verify if \"proof.created\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44429,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 7,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an HTTP error response code: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an HTTP error response code: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:14:10)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:132:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.verificationMethod\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofVerificationMethodVc = klona(validVc);\n          delete noProofVerificationMethodVc.proof.verificationMethod;\n          const body = createRequestBody({vc: noProofVerificationMethodVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "GNqLPl0Q6JzyDDZzjv6s1",
              "ctx": null,
              "_testId": "urn:uuid:7dab9948-b0f6-4889-986f-2589165fd1cf",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SecureKey",
                "rowId": "MUST not verify if \"proof.verificationMethod\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44436,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 47,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an HTTP error response code: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an HTTP error response code: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:14:10)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:144:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofValue\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofValueVc = klona(validVc);\n          delete noProofValueVc.proof.proofValue;\n          const body = createRequestBody({vc: noProofValueVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "GNqLPl0Q6JzyDDZzjv6s1",
              "ctx": null,
              "_testId": "urn:uuid:fd1a2d33-cf2a-4a8b-881f-668c49d11072",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SecureKey",
                "rowId": "MUST not verify if \"proof.proofValue\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44483,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 24,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an HTTP error response code: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an HTTP error response code: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:14:10)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:156:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofPurpose\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofPurposeVc = klona(validVc);\n          delete noProofPurposeVc.proof.proofPurpose;\n          const body = createRequestBody({vc: noProofPurposeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "GNqLPl0Q6JzyDDZzjv6s1",
              "ctx": null,
              "_testId": "urn:uuid:2a49f81a-9eee-4a97-ae86-a35a499313bc",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SecureKey",
                "rowId": "MUST not verify if \"proof.proofPurpose\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44507,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 6,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an HTTP error response code: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an HTTP error response code: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:14:10)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:168:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidContextTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidContextType of invalidContextTypes) {\n          copyVc['@context'] = invalidContextType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "GNqLPl0Q6JzyDDZzjv6s1",
              "ctx": null,
              "_testId": "urn:uuid:048b2cb8-353f-4997-9cfb-c4ee6eff899f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SecureKey",
                "rowId": "MUST not verify if \"@context\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44513,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 79,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an HTTP error response code: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an HTTP error response code: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:14:10)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:181:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" items are not strings or objects.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidContextItemTypes = [[], null, undefined, 10, true];\n          for(const invalidContextItemType of invalidContextItemTypes) {\n            copyVc['@context'] = [invalidContextItemType];\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "GNqLPl0Q6JzyDDZzjv6s1",
              "ctx": null,
              "_testId": "urn:uuid:39eb5638-cd02-47b4-8ae3-52661384395d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SecureKey",
                "rowId": "MUST not verify if \"@context\" items are not strings or objects."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44592,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 6,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an HTTP error response code: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an HTTP error response code: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:14:10)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:196:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidType of invalidTypes) {\n          copyVc.type = invalidType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "GNqLPl0Q6JzyDDZzjv6s1",
              "ctx": null,
              "_testId": "urn:uuid:de42e8f5-962a-46a2-b35c-705bada777ca",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SecureKey",
                "rowId": "MUST not verify if \"type\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44597,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 8,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an HTTP error response code: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an HTTP error response code: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:14:10)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:210:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" items are not strings.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypeItemTypes = [[], {}, null, undefined, 10, true];\n        for(const invalidItemType of invalidTypeItemTypes) {\n          copyVc.type = [invalidItemType];\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "GNqLPl0Q6JzyDDZzjv6s1",
              "ctx": null,
              "_testId": "urn:uuid:0041a2d4-82ff-4fe2-bcb9-d8f74d18fd56",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SecureKey",
                "rowId": "MUST not verify if \"type\" items are not strings."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44606,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 28,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an HTTP error response code: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an HTTP error response code: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:14:10)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:224:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" is not an object or a string.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidIssuerTypes = [[], null, undefined, 10, true];\n          for(const invalidIssuerType of invalidIssuerTypes) {\n            copyVc.issuer = invalidIssuerType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "GNqLPl0Q6JzyDDZzjv6s1",
              "ctx": null,
              "_testId": "urn:uuid:9ae64ba7-12c3-4b0d-9d04-1efe988275bb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SecureKey",
                "rowId": "MUST not verify if \"issuer\" is not an object or a string."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44634,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 6,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an HTTP error response code: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an HTTP error response code: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:14:10)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:239:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" is not an object.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidCredentialSubjectTypes = [\n            'string', null, undefined, 10, true, []\n          ];\n          for(const invalidType of invalidCredentialSubjectTypes) {\n            copyVc.credentialSubject = invalidType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "GNqLPl0Q6JzyDDZzjv6s1",
              "ctx": null,
              "_testId": "urn:uuid:d51d6f80-09af-486a-bfbd-6d424d54cf59",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SecureKey",
                "rowId": "MUST not verify if \"credentialSubject\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44641,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 23,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an HTTP error response code: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an HTTP error response code: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:14:10)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:256:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" is not an object.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidProofTypes = ['string', null, undefined, 10, true, []];\n        for(const invalidProofType of invalidProofTypes) {\n          copyVc.proof = invalidProofType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "GNqLPl0Q6JzyDDZzjv6s1",
              "ctx": null,
              "_testId": "urn:uuid:05bfa966-055e-4619-99ab-e63a1ba2944e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SecureKey",
                "rowId": "MUST not verify if \"proof\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44664,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 5,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an HTTP error response code: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an HTTP error response code: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:14:10)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:270:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "GUekxwv0jYJVenrY178j3",
          "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
          "_testId": "urn:uuid:43159cdf-3351-4590-9efa-ea9dd2e86675"
        },
        {
          "title": "SpruceID",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC.",
              "body": "async function() {\n        // this tells the test report which cell in the interop matrix\n        // the result goes in\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({vc: validVc});\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error);\n        should.exist(result);\n        should.exist(result.status);\n        result.status.should.equal(200);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "-y1BEUFkeLgU_Kdcfq_Oi",
              "ctx": null,
              "_testId": "urn:uuid:52525307-9080-4712-9785-9ea2d1134f4e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST verify a valid VC."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44669,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 196,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noContextVc = klona(validVc);\n          delete noContextVc['@context'];\n          const body = createRequestBody({vc: noContextVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "-y1BEUFkeLgU_Kdcfq_Oi",
              "ctx": null,
              "_testId": "urn:uuid:c4b2a4bb-5a37-44ed-a1b6-f99ac6fd0f58",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"@context\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44865,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 50,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noTypeVc = klona(validVc);\n        delete noTypeVc.type;\n        const body = createRequestBody({vc: noTypeVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "-y1BEUFkeLgU_Kdcfq_Oi",
              "ctx": null,
              "_testId": "urn:uuid:c305aca6-e7f0-403b-b85e-b5e490f81364",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44914,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 45,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noIssuerVc = klona(validVc);\n        delete noIssuerVc.issuer;\n        const body = createRequestBody({vc: noIssuerVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "-y1BEUFkeLgU_Kdcfq_Oi",
              "ctx": null,
              "_testId": "urn:uuid:b5d993d9-ee5d-4a65-a4df-ea7728ca28a3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"issuer\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44959,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 42,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noCredentialSubjectVc = klona(validVc);\n          delete noCredentialSubjectVc.credentialSubject;\n          const body = createRequestBody({vc: noCredentialSubjectVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "-y1BEUFkeLgU_Kdcfq_Oi",
              "ctx": null,
              "_testId": "urn:uuid:f3d3a663-ed22-40d1-8f15-c6151a52d844",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"credentialSubject\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 45001,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 43,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noProofVc = klona(validVc);\n        delete noProofVc.proof;\n        const body = createRequestBody({vc: noProofVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "-y1BEUFkeLgU_Kdcfq_Oi",
              "ctx": null,
              "_testId": "urn:uuid:124c1722-d9b8-4388-9ded-d1763e8e34d1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"proof\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 45044,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 45,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.type\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofTypeVc = klona(validVc);\n          delete noProofTypeVc.proof.type;\n          const body = createRequestBody({vc: noProofTypeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "-y1BEUFkeLgU_Kdcfq_Oi",
              "ctx": null,
              "_testId": "urn:uuid:d8a5d119-1be2-497e-a0e7-7b40f2ab970b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"proof.type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 45089,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 154,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.created\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofCreatedVc = klona(validVc);\n          delete noProofCreatedVc.proof.created;\n          const body = createRequestBody({vc: noProofCreatedVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "-y1BEUFkeLgU_Kdcfq_Oi",
              "ctx": null,
              "_testId": "urn:uuid:7ddc7437-74bd-47e3-9ccb-71ba808ff922",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"proof.created\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 45244,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 59,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.verificationMethod\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofVerificationMethodVc = klona(validVc);\n          delete noProofVerificationMethodVc.proof.verificationMethod;\n          const body = createRequestBody({vc: noProofVerificationMethodVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "-y1BEUFkeLgU_Kdcfq_Oi",
              "ctx": null,
              "_testId": "urn:uuid:161aa62b-4b0f-4e37-88cf-f2db9d9a6608",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"proof.verificationMethod\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 45304,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 44,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofValue\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofValueVc = klona(validVc);\n          delete noProofValueVc.proof.proofValue;\n          const body = createRequestBody({vc: noProofValueVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "-y1BEUFkeLgU_Kdcfq_Oi",
              "ctx": null,
              "_testId": "urn:uuid:065f6434-0e1a-4a06-b9d8-7e09d9aa837b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"proof.proofValue\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 45347,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 42,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofPurpose\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofPurposeVc = klona(validVc);\n          delete noProofPurposeVc.proof.proofPurpose;\n          const body = createRequestBody({vc: noProofPurposeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "-y1BEUFkeLgU_Kdcfq_Oi",
              "ctx": null,
              "_testId": "urn:uuid:ddc2933c-3af1-4a01-a7bc-2b3a927659a5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"proof.proofPurpose\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 45389,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 44,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidContextTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidContextType of invalidContextTypes) {\n          copyVc['@context'] = invalidContextType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "-y1BEUFkeLgU_Kdcfq_Oi",
              "ctx": null,
              "_testId": "urn:uuid:298756de-ef25-443c-a11b-dfa2896962d6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"@context\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 45434,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 356,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" items are not strings or objects.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidContextItemTypes = [[], null, undefined, 10, true];\n          for(const invalidContextItemType of invalidContextItemTypes) {\n            copyVc['@context'] = [invalidContextItemType];\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "-y1BEUFkeLgU_Kdcfq_Oi",
              "ctx": null,
              "_testId": "urn:uuid:f5bb5153-9df1-4d68-babc-3371ac4784e0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"@context\" items are not strings or objects."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 45790,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 218,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidType of invalidTypes) {\n          copyVc.type = invalidType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "-y1BEUFkeLgU_Kdcfq_Oi",
              "ctx": null,
              "_testId": "urn:uuid:f3225ae5-bb41-46b9-ad32-1780b65f9b3c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"type\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 46007,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 281,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" items are not strings.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypeItemTypes = [[], {}, null, undefined, 10, true];\n        for(const invalidItemType of invalidTypeItemTypes) {\n          copyVc.type = [invalidItemType];\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "-y1BEUFkeLgU_Kdcfq_Oi",
              "ctx": null,
              "_testId": "urn:uuid:c6b37b7d-87e9-4422-8bd7-7fcaae7fbdbd",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"type\" items are not strings."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 46288,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 259,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" is not an object or a string.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidIssuerTypes = [[], null, undefined, 10, true];\n          for(const invalidIssuerType of invalidIssuerTypes) {\n            copyVc.issuer = invalidIssuerType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "-y1BEUFkeLgU_Kdcfq_Oi",
              "ctx": null,
              "_testId": "urn:uuid:005622b9-52c5-45cf-8dee-68c1f25b7363",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"issuer\" is not an object or a string."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 46548,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 239,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" is not an object.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidCredentialSubjectTypes = [\n            'string', null, undefined, 10, true, []\n          ];\n          for(const invalidType of invalidCredentialSubjectTypes) {\n            copyVc.credentialSubject = invalidType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "-y1BEUFkeLgU_Kdcfq_Oi",
              "ctx": null,
              "_testId": "urn:uuid:1ddfc83f-bd23-4a06-91e0-4dc149ad5b13",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"credentialSubject\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 46787,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 250,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" is not an object.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidProofTypes = ['string', null, undefined, 10, true, []];\n        for(const invalidProofType of invalidProofTypes) {\n          copyVc.proof = invalidProofType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "-y1BEUFkeLgU_Kdcfq_Oi",
              "ctx": null,
              "_testId": "urn:uuid:80915f62-af05-414c-be29-be6977c3294e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"proof\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 47037,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 328,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "GUekxwv0jYJVenrY178j3",
          "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
          "_testId": "urn:uuid:f3b37bce-b6e8-4989-8bef-d970e1f2405e"
        },
        {
          "title": "Trential",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC.",
              "body": "async function() {\n        // this tells the test report which cell in the interop matrix\n        // the result goes in\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({vc: validVc});\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error);\n        should.exist(result);\n        should.exist(result.status);\n        result.status.should.equal(200);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "YpwS-LsvTmU_ZBkUni1Q8",
              "ctx": null,
              "_testId": "urn:uuid:6526b35e-26a7-4a59-b788-f12f84235a8c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trential",
                "rowId": "MUST verify a valid VC."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 47366,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 3058,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noContextVc = klona(validVc);\n          delete noContextVc['@context'];\n          const body = createRequestBody({vc: noContextVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "YpwS-LsvTmU_ZBkUni1Q8",
              "ctx": null,
              "_testId": "urn:uuid:6b36b5c4-3467-4196-982d-67f018a5d72c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trential",
                "rowId": "MUST not verify if \"@context\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 50425,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 239,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noTypeVc = klona(validVc);\n        delete noTypeVc.type;\n        const body = createRequestBody({vc: noTypeVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "YpwS-LsvTmU_ZBkUni1Q8",
              "ctx": null,
              "_testId": "urn:uuid:23f5048d-56c4-4f6a-b293-0c35ceedf91f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trential",
                "rowId": "MUST not verify if \"type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 50664,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 239,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noIssuerVc = klona(validVc);\n        delete noIssuerVc.issuer;\n        const body = createRequestBody({vc: noIssuerVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "YpwS-LsvTmU_ZBkUni1Q8",
              "ctx": null,
              "_testId": "urn:uuid:eb7bec6e-dd98-49bb-8b35-952078a6fec5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trential",
                "rowId": "MUST not verify if \"issuer\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 50904,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 239,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noCredentialSubjectVc = klona(validVc);\n          delete noCredentialSubjectVc.credentialSubject;\n          const body = createRequestBody({vc: noCredentialSubjectVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "YpwS-LsvTmU_ZBkUni1Q8",
              "ctx": null,
              "_testId": "urn:uuid:7608dc30-e36c-4a81-9704-f1d3f9bce5a6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trential",
                "rowId": "MUST not verify if \"credentialSubject\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 51142,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 234,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noProofVc = klona(validVc);\n        delete noProofVc.proof;\n        const body = createRequestBody({vc: noProofVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "YpwS-LsvTmU_ZBkUni1Q8",
              "ctx": null,
              "_testId": "urn:uuid:ac3ba8c0-5249-4baa-9a46-c7d06304b881",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trential",
                "rowId": "MUST not verify if \"proof\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 51377,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 229,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.type\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofTypeVc = klona(validVc);\n          delete noProofTypeVc.proof.type;\n          const body = createRequestBody({vc: noProofTypeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "YpwS-LsvTmU_ZBkUni1Q8",
              "ctx": null,
              "_testId": "urn:uuid:33c602ca-20b2-4d34-9610-77ff7ee98e03",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trential",
                "rowId": "MUST not verify if \"proof.type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 51607,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 230,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.created\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofCreatedVc = klona(validVc);\n          delete noProofCreatedVc.proof.created;\n          const body = createRequestBody({vc: noProofCreatedVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "YpwS-LsvTmU_ZBkUni1Q8",
              "ctx": null,
              "_testId": "urn:uuid:959bb255-7f6f-4adc-ae26-01ad7287e769",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trential",
                "rowId": "MUST not verify if \"proof.created\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 51838,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2609,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.verificationMethod\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofVerificationMethodVc = klona(validVc);\n          delete noProofVerificationMethodVc.proof.verificationMethod;\n          const body = createRequestBody({vc: noProofVerificationMethodVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "YpwS-LsvTmU_ZBkUni1Q8",
              "ctx": null,
              "_testId": "urn:uuid:923a5846-13bc-4d95-8c0d-526ddab2d19d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trential",
                "rowId": "MUST not verify if \"proof.verificationMethod\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 54447,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 943,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofValue\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofValueVc = klona(validVc);\n          delete noProofValueVc.proof.proofValue;\n          const body = createRequestBody({vc: noProofValueVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "YpwS-LsvTmU_ZBkUni1Q8",
              "ctx": null,
              "_testId": "urn:uuid:d725378f-e8d2-4333-af9f-3f90e69c8643",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trential",
                "rowId": "MUST not verify if \"proof.proofValue\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 55390,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2164,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofPurpose\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofPurposeVc = klona(validVc);\n          delete noProofPurposeVc.proof.proofPurpose;\n          const body = createRequestBody({vc: noProofPurposeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "YpwS-LsvTmU_ZBkUni1Q8",
              "ctx": null,
              "_testId": "urn:uuid:9ac023fd-63fc-4a88-9f6c-cb7c2f6af754",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trential",
                "rowId": "MUST not verify if \"proof.proofPurpose\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 57555,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 231,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidContextTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidContextType of invalidContextTypes) {\n          copyVc['@context'] = invalidContextType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "YpwS-LsvTmU_ZBkUni1Q8",
              "ctx": null,
              "_testId": "urn:uuid:ac7740e7-a64c-4211-a5d6-8100e7dcb6c9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trential",
                "rowId": "MUST not verify if \"@context\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 57786,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2090,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" items are not strings or objects.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidContextItemTypes = [[], null, undefined, 10, true];\n          for(const invalidContextItemType of invalidContextItemTypes) {\n            copyVc['@context'] = [invalidContextItemType];\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "YpwS-LsvTmU_ZBkUni1Q8",
              "ctx": null,
              "_testId": "urn:uuid:8ad9e689-10d0-4045-9874-1a1d9eaa8c29",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trential",
                "rowId": "MUST not verify if \"@context\" items are not strings or objects."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59877,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1158,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidType of invalidTypes) {\n          copyVc.type = invalidType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "YpwS-LsvTmU_ZBkUni1Q8",
              "ctx": null,
              "_testId": "urn:uuid:0703a351-1ae9-443c-a9a7-375f34f7adf7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trential",
                "rowId": "MUST not verify if \"type\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 61035,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1390,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" items are not strings.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypeItemTypes = [[], {}, null, undefined, 10, true];\n        for(const invalidItemType of invalidTypeItemTypes) {\n          copyVc.type = [invalidItemType];\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "YpwS-LsvTmU_ZBkUni1Q8",
              "ctx": null,
              "_testId": "urn:uuid:cf18e89b-b27a-4c36-9fe5-888877aa58ec",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trential",
                "rowId": "MUST not verify if \"type\" items are not strings."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 62426,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2124,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" is not an object or a string.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidIssuerTypes = [[], null, undefined, 10, true];\n          for(const invalidIssuerType of invalidIssuerTypes) {\n            copyVc.issuer = invalidIssuerType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "YpwS-LsvTmU_ZBkUni1Q8",
              "ctx": null,
              "_testId": "urn:uuid:db7c8d8e-5a52-4191-ae87-a446906a00c1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trential",
                "rowId": "MUST not verify if \"issuer\" is not an object or a string."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64550,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1842,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" is not an object.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidCredentialSubjectTypes = [\n            'string', null, undefined, 10, true, []\n          ];\n          for(const invalidType of invalidCredentialSubjectTypes) {\n            copyVc.credentialSubject = invalidType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "YpwS-LsvTmU_ZBkUni1Q8",
              "ctx": null,
              "_testId": "urn:uuid:28bc877a-301d-44c4-ba46-89bcf0fac260",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trential",
                "rowId": "MUST not verify if \"credentialSubject\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 66392,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 3160,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" is not an object.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidProofTypes = ['string', null, undefined, 10, true, []];\n        for(const invalidProofType of invalidProofTypes) {\n          copyVc.proof = invalidProofType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "YpwS-LsvTmU_ZBkUni1Q8",
              "ctx": null,
              "_testId": "urn:uuid:748e794d-1655-4b9c-893e-dc292e882b6c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trential",
                "rowId": "MUST not verify if \"proof\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 69553,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2166,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "GUekxwv0jYJVenrY178j3",
          "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
          "_testId": "urn:uuid:1cc5885d-4c98-44ef-9559-a46db12323ec"
        },
        {
          "title": "Trinsic",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC.",
              "body": "async function() {\n        // this tells the test report which cell in the interop matrix\n        // the result goes in\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({vc: validVc});\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error);\n        should.exist(result);\n        should.exist(result.status);\n        result.status.should.equal(200);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "9uBiF0u9yrJILQdZrevKA",
              "ctx": null,
              "_testId": "urn:uuid:00f100e5-a6b0-4686-bfb4-7f20e387bd38",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "MUST verify a valid VC."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 71720,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 303,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noContextVc = klona(validVc);\n          delete noContextVc['@context'];\n          const body = createRequestBody({vc: noContextVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "9uBiF0u9yrJILQdZrevKA",
              "ctx": null,
              "_testId": "urn:uuid:73d242b2-9e41-467a-850d-4c9bceceef8f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "MUST not verify if \"@context\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 72024,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 62,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 05 Jan 2025 05:11:17 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '27', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=4Dd11dp9KhlmOUsqJx3wSKs9IZ7vVIAojmgMJHLFJDnW4HxSy%2FIpypZA7eabZGQVnGwGzUSwUzB95CjdL9yNRO%2FH%2BtZbLOsFa7q4ZJ37a0RUN9Q1z0g2FnvZe3ITpmKyrmX6WXiK0%2FLrA7eRqfZW\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '8fd0f77db82cfa21-ORD', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=2352&min_rtt=1808&rtt_var=1233&sent=8&recv=8&lost=0&retrans=0&sent_bytes=5653&recv_bytes=2795&delivery_rate=1574421&cwnd=254&unsent_bytes=0&cid=86901cd48417d354&ts=333&x=0\"', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 05 Jan 2025 05:11:17 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '27', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=4Dd11dp9KhlmOUsqJx3wSKs9IZ7vVIAojmgMJHLFJDnW4HxSy%2FIpypZA7eabZGQVnGwGzUSwUzB95CjdL9yNRO%2FH%2BtZbLOsFa7q4ZJ37a0RUN9Q1z0g2FnvZe3ITpmKyrmX6WXiK0%2FLrA7eRqfZW\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '8fd0f77db82cfa21-ORD', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=2352&min_rtt=1808&rtt_var=1233&sent=8&recv=8&lost=0&retrans=0&sent_bytes=5653&recv_bytes=2795&delivery_rate=1574421&cwnd=254&unsent_bytes=0&cid=86901cd48417d354&ts=333&x=0\"', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:12:14)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:63:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noTypeVc = klona(validVc);\n        delete noTypeVc.type;\n        const body = createRequestBody({vc: noTypeVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "9uBiF0u9yrJILQdZrevKA",
              "ctx": null,
              "_testId": "urn:uuid:51971765-150d-4470-b389-8959a715636f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "MUST not verify if \"type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 72087,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 65,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 05 Jan 2025 05:11:17 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '24', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=BDESqP%2Bz9p%2BV6ugvP8WBhtNHFazEe2thtwoUMwzlYMIA1g8Ak5grMQfQ8409QlBkPA1IdwNuYfPvNWH3eASsHAlNzdnKQxFintRmNpnT%2FsAhkKBXjJtUZfgrYdAfA6x3rGi%2BUpQMgqNGJP11oblE\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '8fd0f77e1906fa21-ORD', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=2562&min_rtt=1808&rtt_var=1211&sent=12&recv=10&lost=0&retrans=0&sent_bytes=8382&recv_bytes=3976&delivery_rate=1574421&cwnd=257&unsent_bytes=0&cid=86901cd48417d354&ts=399&x=0\"', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 05 Jan 2025 05:11:17 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '24', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=BDESqP%2Bz9p%2BV6ugvP8WBhtNHFazEe2thtwoUMwzlYMIA1g8Ak5grMQfQ8409QlBkPA1IdwNuYfPvNWH3eASsHAlNzdnKQxFintRmNpnT%2FsAhkKBXjJtUZfgrYdAfA6x3rGi%2BUpQMgqNGJP11oblE\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '8fd0f77e1906fa21-ORD', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=2562&min_rtt=1808&rtt_var=1211&sent=12&recv=10&lost=0&retrans=0&sent_bytes=8382&recv_bytes=3976&delivery_rate=1574421&cwnd=257&unsent_bytes=0&cid=86901cd48417d354&ts=399&x=0\"', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:12:14)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:74:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noIssuerVc = klona(validVc);\n        delete noIssuerVc.issuer;\n        const body = createRequestBody({vc: noIssuerVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "9uBiF0u9yrJILQdZrevKA",
              "ctx": null,
              "_testId": "urn:uuid:c53629e8-dc7d-4b44-ab7b-e975f283432b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "MUST not verify if \"issuer\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 72152,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 59,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 05 Jan 2025 05:11:17 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '19', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=bnapPbqIs1nVA0Tbh4EEcedDjnqmPOw%2BOIO3vc5eJSAjDmfUpngxkAFlI9%2FHQXH24GuzKfc6EgYI4wz3GbMwcPyK2rwzuy2IHKUWPENYVpOFUEkYi4gCL%2FMXzIcxz7pQ3tkwZbB9hoHTT%2FWTmyd%2B\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '8fd0f77e8a04fa21-ORD', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=2628&min_rtt=1808&rtt_var=1085&sent=16&recv=12&lost=0&retrans=0&sent_bytes=11113&recv_bytes=5165&delivery_rate=1574421&cwnd=257&unsent_bytes=0&cid=86901cd48417d354&ts=459&x=0\"', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 05 Jan 2025 05:11:17 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '19', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=bnapPbqIs1nVA0Tbh4EEcedDjnqmPOw%2BOIO3vc5eJSAjDmfUpngxkAFlI9%2FHQXH24GuzKfc6EgYI4wz3GbMwcPyK2rwzuy2IHKUWPENYVpOFUEkYi4gCL%2FMXzIcxz7pQ3tkwZbB9hoHTT%2FWTmyd%2B\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '8fd0f77e8a04fa21-ORD', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=2628&min_rtt=1808&rtt_var=1085&sent=16&recv=12&lost=0&retrans=0&sent_bytes=11113&recv_bytes=5165&delivery_rate=1574421&cwnd=257&unsent_bytes=0&cid=86901cd48417d354&ts=459&x=0\"', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:12:14)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:85:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noCredentialSubjectVc = klona(validVc);\n          delete noCredentialSubjectVc.credentialSubject;\n          const body = createRequestBody({vc: noCredentialSubjectVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "9uBiF0u9yrJILQdZrevKA",
              "ctx": null,
              "_testId": "urn:uuid:ec11d9fb-c15b-4840-8b5e-65163746ae97",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "MUST not verify if \"credentialSubject\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 72213,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 49,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 05 Jan 2025 05:11:17 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '15', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=RA6F%2Fmz6EQfXLoCikYZblZZbUyCMKKf2fmd%2F7hsrZJHVQSXJ%2BpkZFXeOQDmy45AdMf0GA4HcFnmbICneWJX0wnkus3XBJ%2BYbeCu9wwGdxxvyvV0XYgEIXhNzCZOzeOgRZxz9Xpb%2BajFy64x2WEd9\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '8fd0f77eeae9fa21-ORD', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=2691&min_rtt=1808&rtt_var=1062&sent=20&recv=14&lost=0&retrans=0&sent_bytes=13847&recv_bytes=6311&delivery_rate=1574421&cwnd=257&unsent_bytes=0&cid=86901cd48417d354&ts=509&x=0\"', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 05 Jan 2025 05:11:17 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '15', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=RA6F%2Fmz6EQfXLoCikYZblZZbUyCMKKf2fmd%2F7hsrZJHVQSXJ%2BpkZFXeOQDmy45AdMf0GA4HcFnmbICneWJX0wnkus3XBJ%2BYbeCu9wwGdxxvyvV0XYgEIXhNzCZOzeOgRZxz9Xpb%2BajFy64x2WEd9\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '8fd0f77eeae9fa21-ORD', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=2691&min_rtt=1808&rtt_var=1062&sent=20&recv=14&lost=0&retrans=0&sent_bytes=13847&recv_bytes=6311&delivery_rate=1574421&cwnd=257&unsent_bytes=0&cid=86901cd48417d354&ts=509&x=0\"', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:12:14)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:97:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noProofVc = klona(validVc);\n        delete noProofVc.proof;\n        const body = createRequestBody({vc: noProofVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "9uBiF0u9yrJILQdZrevKA",
              "ctx": null,
              "_testId": "urn:uuid:3eea9abd-3e64-4288-aeeb-832b0158a0e3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "MUST not verify if \"proof\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 72263,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 43,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 05 Jan 2025 05:11:17 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '8', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=IzGMT%2FTTjqge9OgKgk2YWpeF6Cu8i3a8SW2Cv1ZVMyeD4oKujByKfHyZvTI%2FdE%2F6wuQtIENLIn8lGuwDHIclu7Foa%2BIxNrSaN7cdwJh42QoY9nhvTQTUZ17yPZtn07yC8QB%2FQvmmKlLhdxC9pyMs\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '8fd0f77f3b9afa21-ORD', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=2776&min_rtt=1808&rtt_var=1118&sent=24&recv=16&lost=0&retrans=0&sent_bytes=16581&recv_bytes=7203&delivery_rate=1574421&cwnd=257&unsent_bytes=0&cid=86901cd48417d354&ts=553&x=0\"', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 05 Jan 2025 05:11:17 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '8', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=IzGMT%2FTTjqge9OgKgk2YWpeF6Cu8i3a8SW2Cv1ZVMyeD4oKujByKfHyZvTI%2FdE%2F6wuQtIENLIn8lGuwDHIclu7Foa%2BIxNrSaN7cdwJh42QoY9nhvTQTUZ17yPZtn07yC8QB%2FQvmmKlLhdxC9pyMs\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '8fd0f77f3b9afa21-ORD', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=2776&min_rtt=1808&rtt_var=1118&sent=24&recv=16&lost=0&retrans=0&sent_bytes=16581&recv_bytes=7203&delivery_rate=1574421&cwnd=257&unsent_bytes=0&cid=86901cd48417d354&ts=553&x=0\"', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:12:14)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:108:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.type\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofTypeVc = klona(validVc);\n          delete noProofTypeVc.proof.type;\n          const body = createRequestBody({vc: noProofTypeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "9uBiF0u9yrJILQdZrevKA",
              "ctx": null,
              "_testId": "urn:uuid:ec9067f2-d5ee-45ec-9574-cca2efd3b2ed",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "MUST not verify if \"proof.type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 72306,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 45,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 05 Jan 2025 05:11:17 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '12', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=aY%2FKkfJS%2BgSUMPs3x%2FSqQEnEI6BqYm8zmIRAfSSH0htPqTyD9EcRwDk2z3hNeH%2B6S2DSWP7imYvfAWSATb1rGSX8b82y1ry3xkd2pjfR9OWGiyQmebE63JCeQv%2FxjcnMYkOOB7I7k3Eb2vl0Ap%2F9\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '8fd0f77f7c33fa21-ORD', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=2819&min_rtt=1808&rtt_var=1119&sent=28&recv=18&lost=0&retrans=0&sent_bytes=19314&recv_bytes=8405&delivery_rate=1574421&cwnd=257&unsent_bytes=0&cid=86901cd48417d354&ts=599&x=0\"', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 05 Jan 2025 05:11:17 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '12', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=aY%2FKkfJS%2BgSUMPs3x%2FSqQEnEI6BqYm8zmIRAfSSH0htPqTyD9EcRwDk2z3hNeH%2B6S2DSWP7imYvfAWSATb1rGSX8b82y1ry3xkd2pjfR9OWGiyQmebE63JCeQv%2FxjcnMYkOOB7I7k3Eb2vl0Ap%2F9\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '8fd0f77f7c33fa21-ORD', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=2819&min_rtt=1808&rtt_var=1119&sent=28&recv=18&lost=0&retrans=0&sent_bytes=19314&recv_bytes=8405&delivery_rate=1574421&cwnd=257&unsent_bytes=0&cid=86901cd48417d354&ts=599&x=0\"', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:12:14)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:120:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.created\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofCreatedVc = klona(validVc);\n          delete noProofCreatedVc.proof.created;\n          const body = createRequestBody({vc: noProofCreatedVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "9uBiF0u9yrJILQdZrevKA",
              "ctx": null,
              "_testId": "urn:uuid:e08985b3-9f47-4f92-8b99-630e09527401",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "MUST not verify if \"proof.created\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 72352,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 44,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 05 Jan 2025 05:11:17 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '8', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=JkzoIPOWvxnMduhzj6N3cMVd46qOqjy1PVFNzT0r8yMK88Rox33cVDdC3OxV0I7bQiM1ht60hGoTx6EAfrLlBsNma%2BS9%2Brb7kGuvp9CkwJy6KlhsUBJaHpbBZDsSZb7lHvUuc9WtqYIsmLy%2FBaa3\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '8fd0f77fccd5fa21-ORD', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=2849&min_rtt=1808&rtt_var=1114&sent=32&recv=20&lost=0&retrans=0&sent_bytes=22050&recv_bytes=9604&delivery_rate=1574421&cwnd=257&unsent_bytes=0&cid=86901cd48417d354&ts=644&x=0\"', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 05 Jan 2025 05:11:17 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '8', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=JkzoIPOWvxnMduhzj6N3cMVd46qOqjy1PVFNzT0r8yMK88Rox33cVDdC3OxV0I7bQiM1ht60hGoTx6EAfrLlBsNma%2BS9%2Brb7kGuvp9CkwJy6KlhsUBJaHpbBZDsSZb7lHvUuc9WtqYIsmLy%2FBaa3\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '8fd0f77fccd5fa21-ORD', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=2849&min_rtt=1808&rtt_var=1114&sent=32&recv=20&lost=0&retrans=0&sent_bytes=22050&recv_bytes=9604&delivery_rate=1574421&cwnd=257&unsent_bytes=0&cid=86901cd48417d354&ts=644&x=0\"', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:12:14)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:132:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.verificationMethod\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofVerificationMethodVc = klona(validVc);\n          delete noProofVerificationMethodVc.proof.verificationMethod;\n          const body = createRequestBody({vc: noProofVerificationMethodVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "9uBiF0u9yrJILQdZrevKA",
              "ctx": null,
              "_testId": "urn:uuid:5e825388-89ae-4c09-8e1e-0c5d47d51dc7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "MUST not verify if \"proof.verificationMethod\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 72397,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 42,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 05 Jan 2025 05:11:17 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '7', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=iSmSXmHMILJoVHE79BIIr8%2FplREZsB0FVuaPl27FgBMTWhMyN3t7SpLAU55S26YZylnk2wsBjT9ybyx87FAZI8qLBHQKmnURZ2uDNfbZ7MYWo0%2BC1pfb9S5lSlVtaaLlDNLjYwHmCsEZZ3IfaP5T\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '8fd0f7800d63fa21-ORD', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=2884&min_rtt=1808&rtt_var=1034&sent=36&recv=22&lost=0&retrans=0&sent_bytes=24779&recv_bytes=10707&delivery_rate=1574421&cwnd=257&unsent_bytes=0&cid=86901cd48417d354&ts=687&x=0\"', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 05 Jan 2025 05:11:17 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '7', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=iSmSXmHMILJoVHE79BIIr8%2FplREZsB0FVuaPl27FgBMTWhMyN3t7SpLAU55S26YZylnk2wsBjT9ybyx87FAZI8qLBHQKmnURZ2uDNfbZ7MYWo0%2BC1pfb9S5lSlVtaaLlDNLjYwHmCsEZZ3IfaP5T\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '8fd0f7800d63fa21-ORD', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=2884&min_rtt=1808&rtt_var=1034&sent=36&recv=22&lost=0&retrans=0&sent_bytes=24779&recv_bytes=10707&delivery_rate=1574421&cwnd=257&unsent_bytes=0&cid=86901cd48417d354&ts=687&x=0\"', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:12:14)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:144:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofValue\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofValueVc = klona(validVc);\n          delete noProofValueVc.proof.proofValue;\n          const body = createRequestBody({vc: noProofValueVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "9uBiF0u9yrJILQdZrevKA",
              "ctx": null,
              "_testId": "urn:uuid:1f4adec2-326a-44fe-a3ce-3dc17108f6b1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "MUST not verify if \"proof.proofValue\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 72440,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 50,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 05 Jan 2025 05:11:17 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '15', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=hCRyrzZl6%2BZsIXJsnnjY%2BNU7vXMfjo1WHDKvgi9DXa56HhrwepAN0oKTiH%2F2eop6OsR0KDyd%2FC%2FNKF28Y5SyZangDnLLzLkxbUX7JxZn2cUpcMJCbAqtZQOo4WTA9bZMG%2FFku2bquL%2FuoA9QRYUs\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '8fd0f7804df3fa21-ORD', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=2850&min_rtt=1808&rtt_var=945&sent=40&recv=24&lost=0&retrans=0&sent_bytes=27507&recv_bytes=11834&delivery_rate=1574421&cwnd=257&unsent_bytes=0&cid=86901cd48417d354&ts=736&x=0\"', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 05 Jan 2025 05:11:17 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '15', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=hCRyrzZl6%2BZsIXJsnnjY%2BNU7vXMfjo1WHDKvgi9DXa56HhrwepAN0oKTiH%2F2eop6OsR0KDyd%2FC%2FNKF28Y5SyZangDnLLzLkxbUX7JxZn2cUpcMJCbAqtZQOo4WTA9bZMG%2FFku2bquL%2FuoA9QRYUs\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '8fd0f7804df3fa21-ORD', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=2850&min_rtt=1808&rtt_var=945&sent=40&recv=24&lost=0&retrans=0&sent_bytes=27507&recv_bytes=11834&delivery_rate=1574421&cwnd=257&unsent_bytes=0&cid=86901cd48417d354&ts=736&x=0\"', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:12:14)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:156:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofPurpose\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofPurposeVc = klona(validVc);\n          delete noProofPurposeVc.proof.proofPurpose;\n          const body = createRequestBody({vc: noProofPurposeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "9uBiF0u9yrJILQdZrevKA",
              "ctx": null,
              "_testId": "urn:uuid:5f66abe9-9413-4909-85b5-f75c2edd8c8b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "MUST not verify if \"proof.proofPurpose\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 72491,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 43,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 05 Jan 2025 05:11:17 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '8', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=%2By7m7%2FlonJCGHb1Dp3QJiQo5Rrzom6TbgPIOl%2B%2FUxl1DtrbSg7irJuHcIGqTJ%2FIOOTIxlRILw98wZZB7KLF505BT9a%2Fpq6NG5yDdQSko75JdtMLyFTObgmov3A0Py675%2BbMZ0LnUJ5Oo5nHhNdvW\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '8fd0f780ae9bfa21-ORD', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=2904&min_rtt=1808&rtt_var=817&sent=43&recv=26&lost=0&retrans=0&sent_bytes=30245&recv_bytes=13033&delivery_rate=1574421&cwnd=257&unsent_bytes=0&cid=86901cd48417d354&ts=782&x=0\"', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 05 Jan 2025 05:11:17 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '8', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=%2By7m7%2FlonJCGHb1Dp3QJiQo5Rrzom6TbgPIOl%2B%2FUxl1DtrbSg7irJuHcIGqTJ%2FIOOTIxlRILw98wZZB7KLF505BT9a%2Fpq6NG5yDdQSko75JdtMLyFTObgmov3A0Py675%2BbMZ0LnUJ5Oo5nHhNdvW\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '8fd0f780ae9bfa21-ORD', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=2904&min_rtt=1808&rtt_var=817&sent=43&recv=26&lost=0&retrans=0&sent_bytes=30245&recv_bytes=13033&delivery_rate=1574421&cwnd=257&unsent_bytes=0&cid=86901cd48417d354&ts=782&x=0\"', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:12:14)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:168:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidContextTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidContextType of invalidContextTypes) {\n          copyVc['@context'] = invalidContextType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "9uBiF0u9yrJILQdZrevKA",
              "ctx": null,
              "_testId": "urn:uuid:6bf78a8a-9741-4c67-a01c-4d056dbccce9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "MUST not verify if \"@context\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 72535,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 54,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 05 Jan 2025 05:11:17 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '20', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=S219B5pm5NQRMhWD8PW9iUBeTzDYxFi6KxkNa4EDTVbF7IlH7MKfL12H11FZmRHKMU3kHedu920mcPGh7xMBRXkJd5I60qvg5P6KO%2FytSystq5oSljvpPWjSOlMP7doLKXy6DLCeNA0TdJoCe62g\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '8fd0f780ef35fa21-ORD', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=2880&min_rtt=1808&rtt_var=825&sent=47&recv=28&lost=0&retrans=0&sent_bytes=32982&recv_bytes=14134&delivery_rate=1574421&cwnd=257&unsent_bytes=0&cid=86901cd48417d354&ts=836&x=0\"', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 05 Jan 2025 05:11:17 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '20', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=S219B5pm5NQRMhWD8PW9iUBeTzDYxFi6KxkNa4EDTVbF7IlH7MKfL12H11FZmRHKMU3kHedu920mcPGh7xMBRXkJd5I60qvg5P6KO%2FytSystq5oSljvpPWjSOlMP7doLKXy6DLCeNA0TdJoCe62g\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '8fd0f780ef35fa21-ORD', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=2880&min_rtt=1808&rtt_var=825&sent=47&recv=28&lost=0&retrans=0&sent_bytes=32982&recv_bytes=14134&delivery_rate=1574421&cwnd=257&unsent_bytes=0&cid=86901cd48417d354&ts=836&x=0\"', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:12:14)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:181:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" items are not strings or objects.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidContextItemTypes = [[], null, undefined, 10, true];\n          for(const invalidContextItemType of invalidContextItemTypes) {\n            copyVc['@context'] = [invalidContextItemType];\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "9uBiF0u9yrJILQdZrevKA",
              "ctx": null,
              "_testId": "urn:uuid:4b734fc4-156a-4f78-8256-6f9b6c09bc86",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "MUST not verify if \"@context\" items are not strings or objects."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 72590,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 51,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 05 Jan 2025 05:11:18 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '17', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=YU2PmFBnbWZCnAibJq2OBKaAU9MsU%2FAG9Ku2CvolU%2Fu2IvAqua%2BRcRy%2FhlVF60NBXBSOudrDqbIYhKl55ieODF24NgPLAlMHWsicC6eYaib%2FatIVbe8%2Fjb3YsXmrl1HgGvjoFHcvoH1%2Bpq5MsC%2BZ\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '8fd0f7813832fa21-ORD', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=2761&min_rtt=1808&rtt_var=829&sent=50&recv=30&lost=0&retrans=0&sent_bytes=35735&recv_bytes=15231&delivery_rate=1574421&cwnd=257&unsent_bytes=0&cid=86901cd48417d354&ts=888&x=0\"', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 05 Jan 2025 05:11:18 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '17', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=YU2PmFBnbWZCnAibJq2OBKaAU9MsU%2FAG9Ku2CvolU%2Fu2IvAqua%2BRcRy%2FhlVF60NBXBSOudrDqbIYhKl55ieODF24NgPLAlMHWsicC6eYaib%2FatIVbe8%2Fjb3YsXmrl1HgGvjoFHcvoH1%2Bpq5MsC%2BZ\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '8fd0f7813832fa21-ORD', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=2761&min_rtt=1808&rtt_var=829&sent=50&recv=30&lost=0&retrans=0&sent_bytes=35735&recv_bytes=15231&delivery_rate=1574421&cwnd=257&unsent_bytes=0&cid=86901cd48417d354&ts=888&x=0\"', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:12:14)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:196:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidType of invalidTypes) {\n          copyVc.type = invalidType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "9uBiF0u9yrJILQdZrevKA",
              "ctx": null,
              "_testId": "urn:uuid:6ce067a6-0d8f-4c58-95e1-1971ae8553de",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "MUST not verify if \"type\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 72641,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 51,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 05 Jan 2025 05:11:18 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '17', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=v8%2BJwT72zs%2FGGqoDAGXE3IMILJL56RmD590yUOOm83gwqkiRgCOsWsv0zju%2FO9ntCebXV9nHSkXnFK8WLgFPaP7kAtdbNb2D2T1blM4qjyP2tsBa%2BnX%2BVq%2BHMn%2BaN%2Bzvzahi%2Fru5iQH1qdLXxBbR\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '8fd0f7819904fa21-ORD', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=2658&min_rtt=1808&rtt_var=829&sent=53&recv=32&lost=0&retrans=0&sent_bytes=38475&recv_bytes=16428&delivery_rate=1574421&cwnd=257&unsent_bytes=0&cid=86901cd48417d354&ts=940&x=0\"', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 05 Jan 2025 05:11:18 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '17', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=v8%2BJwT72zs%2FGGqoDAGXE3IMILJL56RmD590yUOOm83gwqkiRgCOsWsv0zju%2FO9ntCebXV9nHSkXnFK8WLgFPaP7kAtdbNb2D2T1blM4qjyP2tsBa%2BnX%2BVq%2BHMn%2BaN%2Bzvzahi%2Fru5iQH1qdLXxBbR\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '8fd0f7819904fa21-ORD', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=2658&min_rtt=1808&rtt_var=829&sent=53&recv=32&lost=0&retrans=0&sent_bytes=38475&recv_bytes=16428&delivery_rate=1574421&cwnd=257&unsent_bytes=0&cid=86901cd48417d354&ts=940&x=0\"', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:12:14)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:210:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" items are not strings.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypeItemTypes = [[], {}, null, undefined, 10, true];\n        for(const invalidItemType of invalidTypeItemTypes) {\n          copyVc.type = [invalidItemType];\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "9uBiF0u9yrJILQdZrevKA",
              "ctx": null,
              "_testId": "urn:uuid:29bdcf22-40f3-4daa-a691-5fedc3a76c31",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "MUST not verify if \"type\" items are not strings."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 72693,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 58,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 05 Jan 2025 05:11:18 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '22', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=3aM8%2BTSphWnC74PCP4xE%2FCTCGoMpgQe7lp3UOTsP7diqSxRiTQ%2FjU3KlW76wG924AB56A8miivE%2FLPc6J7FE7RVfgxxQEf3Jyw%2Bj%2BsedLv3jiUbhMjbppx8Ud%2F5X4ZTxxemsCkwL0qqkURXbxfgU\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '8fd0f781e9b8fa21-ORD', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=2565&min_rtt=1808&rtt_var=807&sent=56&recv=34&lost=0&retrans=0&sent_bytes=41217&recv_bytes=17621&delivery_rate=1574421&cwnd=257&unsent_bytes=0&cid=86901cd48417d354&ts=998&x=0\"', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 05 Jan 2025 05:11:18 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '22', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=3aM8%2BTSphWnC74PCP4xE%2FCTCGoMpgQe7lp3UOTsP7diqSxRiTQ%2FjU3KlW76wG924AB56A8miivE%2FLPc6J7FE7RVfgxxQEf3Jyw%2Bj%2BsedLv3jiUbhMjbppx8Ud%2F5X4ZTxxemsCkwL0qqkURXbxfgU\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '8fd0f781e9b8fa21-ORD', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=2565&min_rtt=1808&rtt_var=807&sent=56&recv=34&lost=0&retrans=0&sent_bytes=41217&recv_bytes=17621&delivery_rate=1574421&cwnd=257&unsent_bytes=0&cid=86901cd48417d354&ts=998&x=0\"', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:12:14)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:224:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" is not an object or a string.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidIssuerTypes = [[], null, undefined, 10, true];\n          for(const invalidIssuerType of invalidIssuerTypes) {\n            copyVc.issuer = invalidIssuerType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "9uBiF0u9yrJILQdZrevKA",
              "ctx": null,
              "_testId": "urn:uuid:991b240f-0667-4548-9cf4-74a424270f33",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "MUST not verify if \"issuer\" is not an object or a string."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 72754,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 56,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 05 Jan 2025 05:11:18 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '18', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=jHrhXTRcTsrp4vQciLf5kE8qzSy7d%2BJYRraAZtxkUvpzMsTxIDFRFU4m9kkGtu2nps7jL2dSRH02nPV6cJJ%2F2BCOq4ptBN19k15Hm%2FCIePWiLogI6vd4WCxs7Xj46A04XSnRaOQsPNOumaanBKKO\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '8fd0f7824a82fa21-ORD', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=2884&min_rtt=1808&rtt_var=1389&sent=60&recv=36&lost=0&retrans=0&sent_bytes=43933&recv_bytes=18822&delivery_rate=1574421&cwnd=257&unsent_bytes=0&cid=86901cd48417d354&ts=1056&x=0\"', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 05 Jan 2025 05:11:18 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '18', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=jHrhXTRcTsrp4vQciLf5kE8qzSy7d%2BJYRraAZtxkUvpzMsTxIDFRFU4m9kkGtu2nps7jL2dSRH02nPV6cJJ%2F2BCOq4ptBN19k15Hm%2FCIePWiLogI6vd4WCxs7Xj46A04XSnRaOQsPNOumaanBKKO\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '8fd0f7824a82fa21-ORD', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=2884&min_rtt=1808&rtt_var=1389&sent=60&recv=36&lost=0&retrans=0&sent_bytes=43933&recv_bytes=18822&delivery_rate=1574421&cwnd=257&unsent_bytes=0&cid=86901cd48417d354&ts=1056&x=0\"', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:12:14)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:239:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" is not an object.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidCredentialSubjectTypes = [\n            'string', null, undefined, 10, true, []\n          ];\n          for(const invalidType of invalidCredentialSubjectTypes) {\n            copyVc.credentialSubject = invalidType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "9uBiF0u9yrJILQdZrevKA",
              "ctx": null,
              "_testId": "urn:uuid:3b0f19b1-2893-4721-80cf-e4e19bd9999c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "MUST not verify if \"credentialSubject\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 72810,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 53,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 05 Jan 2025 05:11:18 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '18', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=Ym%2F876y0oksM8iZD6EPNN%2F%2BfSfe8%2BJXBrOEKsfjt85u0nk68LDW0%2FEr5xPJdQY0LmvCrPFq36%2Fc%2BbRaPEledyTZFnoXrrJBynzJHCBz%2BES4fSKtvy96Vl8EJBvanr6EPh8pudbccKRMwNJfd88yx\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '8fd0f7829b75fa21-ORD', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=2915&min_rtt=1808&rtt_var=1243&sent=64&recv=38&lost=0&retrans=0&sent_bytes=46643&recv_bytes=19997&delivery_rate=1574421&cwnd=257&unsent_bytes=0&cid=86901cd48417d354&ts=1110&x=0\"', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 05 Jan 2025 05:11:18 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '18', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=Ym%2F876y0oksM8iZD6EPNN%2F%2BfSfe8%2BJXBrOEKsfjt85u0nk68LDW0%2FEr5xPJdQY0LmvCrPFq36%2Fc%2BbRaPEledyTZFnoXrrJBynzJHCBz%2BES4fSKtvy96Vl8EJBvanr6EPh8pudbccKRMwNJfd88yx\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '8fd0f7829b75fa21-ORD', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=2915&min_rtt=1808&rtt_var=1243&sent=64&recv=38&lost=0&retrans=0&sent_bytes=46643&recv_bytes=19997&delivery_rate=1574421&cwnd=257&unsent_bytes=0&cid=86901cd48417d354&ts=1110&x=0\"', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:12:14)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:256:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" is not an object.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidProofTypes = ['string', null, undefined, 10, true, []];\n        for(const invalidProofType of invalidProofTypes) {\n          copyVc.proof = invalidProofType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "9uBiF0u9yrJILQdZrevKA",
              "ctx": null,
              "_testId": "urn:uuid:21ac9656-fbfe-4839-a586-448eecdd99b9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "MUST not verify if \"proof\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 72863,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 44,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 05 Jan 2025 05:11:18 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '8', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=sFcpTILhMCk1T%2B1hocIv2dDJbKtEWhjjPjky3rDkhEFLqoO3beElHrvLNl2newPiAvL5QUIDbde%2F7BRR%2F9n9u99UwrheqLgEOMfssjxhfBs95C0Cs%2BinvbexpU0q%2BSEbjAtyBtGAtAErviZLF6kA\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '8fd0f782fc7afa21-ORD', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=2972&min_rtt=1808&rtt_var=1250&sent=68&recv=40&lost=0&retrans=0&sent_bytes=49363&recv_bytes=20906&delivery_rate=1574421&cwnd=257&unsent_bytes=0&cid=86901cd48417d354&ts=1154&x=0\"', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 05 Jan 2025 05:11:18 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '8', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=sFcpTILhMCk1T%2B1hocIv2dDJbKtEWhjjPjky3rDkhEFLqoO3beElHrvLNl2newPiAvL5QUIDbde%2F7BRR%2F9n9u99UwrheqLgEOMfssjxhfBs95C0Cs%2BinvbexpU0q%2BSEbjAtyBtGAtAErviZLF6kA\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '8fd0f782fc7afa21-ORD', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=2972&min_rtt=1808&rtt_var=1250&sent=68&recv=40&lost=0&retrans=0&sent_bytes=49363&recv_bytes=20906&delivery_rate=1574421&cwnd=257&unsent_bytes=0&cid=86901cd48417d354&ts=1154&x=0\"', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:12:14)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:270:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "GUekxwv0jYJVenrY178j3",
          "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
          "_testId": "urn:uuid:b2168ad1-4457-4f3e-8715-a5d0aceb13f5"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "cT5ODpHc7i9Lff5L11X8K",
      "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
      "summary": {},
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Verifier",
      "reportData": [],
      "_testId": "urn:uuid:0cd2755d-9fc7-41e2-9905-8a70f535b1e9",
      "columns": [
        "ACA-py",
        "apicatalog.com",
        "Danube Tech",
        "Digital Bazaar",
        "Digital Credentials Consortium",
        "EWF",
        "Gen Digital",
        "LearnCard",
        "Mavennet",
        "Procivis One Core",
        "SecureKey",
        "SpruceID",
        "Trential",
        "Trinsic"
      ],
      "rows": [
        {
          "id": "MUST verify a valid VC.",
          "cells": [
            {
              "type": "test",
              "title": "MUST verify a valid VC.",
              "body": "async function() {\n        // this tells the test report which cell in the interop matrix\n        // the result goes in\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({vc: validVc});\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error);\n        should.exist(result);\n        should.exist(result.status);\n        result.status.should.equal(200);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "GxzXjrrn6fYdu6CdWfWRT",
              "ctx": null,
              "_testId": "urn:uuid:81478156-0419-41af-8a04-b0fd90014964",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "ACA-py",
                "rowId": "MUST verify a valid VC."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 297,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2852,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",\"https://www.w3.org/ns/credentials/examples/v2\",\"https://w3id.org/security/suites/ed25519-2020/v1\"],\"id\":\"urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33\",\"type\":[\"VerifiableCredential\",\"AlumniCredential\"],\"name\":\"Alumni Credential\",\"description\":\"A minimum viable example of an Alumni Credential.\",\"issuer\":\"https://vc.example/issuers/5678\",\"validFrom\":\"2023-01-01T00:00:00Z\",\"credentialSubject\":{\"id\":\"did:example:abcdefgh\",\"alumniOf\":\"The School of Examples\"},\"proof\":{\"type\":\"Ed25519Signature2020\",\"created\":\"2023-02-24T23:36:38Z\",\"verificationMethod\":\"did:key:z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2#z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z57Mm1vboMtZiCyJ4aReZsv8co4Re64Y8GEjL1ZARzMbXZgkARFLqFs1P345NpPGG2hgCrS4nNdvJhpwnrNyG3kEF\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          "https://www.w3.org/ns/credentials/examples/v2",
                          "https://w3id.org/security/suites/ed25519-2020/v1"
                        ],
                        "id": "urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33",
                        "type": [
                          "VerifiableCredential",
                          "AlumniCredential"
                        ],
                        "name": "Alumni Credential",
                        "description": "A minimum viable example of an Alumni Credential.",
                        "issuer": "https://vc.example/issuers/5678",
                        "validFrom": "2023-01-01T00:00:00Z",
                        "credentialSubject": {
                          "id": "did:example:abcdefgh",
                          "alumniOf": "The School of Examples"
                        },
                        "proof": {
                          "type": "Ed25519Signature2020",
                          "created": "2023-02-24T23:36:38Z",
                          "verificationMethod": "did:key:z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2#z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z57Mm1vboMtZiCyJ4aReZsv8co4Re64Y8GEjL1ZARzMbXZgkARFLqFs1P345NpPGG2hgCrS4nNdvJhpwnrNyG3kEF"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://agent.opsec.id/vc/credentials/verify",
                  "status": 500
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:48:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC.",
              "body": "async function() {\n        // this tells the test report which cell in the interop matrix\n        // the result goes in\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({vc: validVc});\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error);\n        should.exist(result);\n        should.exist(result.status);\n        result.status.should.equal(200);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "KfVxuXJq7Q8gTujeU9KkI",
              "ctx": null,
              "_testId": "urn:uuid:a99b720b-a812-4215-9a23-4f9312a5c406",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "MUST verify a valid VC."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7131,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 96,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",\"https://www.w3.org/ns/credentials/examples/v2\",\"https://w3id.org/security/suites/ed25519-2020/v1\"],\"id\":\"urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33\",\"type\":[\"VerifiableCredential\",\"AlumniCredential\"],\"name\":\"Alumni Credential\",\"description\":\"A minimum viable example of an Alumni Credential.\",\"issuer\":\"https://vc.example/issuers/5678\",\"validFrom\":\"2023-01-01T00:00:00Z\",\"credentialSubject\":{\"id\":\"did:example:abcdefgh\",\"alumniOf\":\"The School of Examples\"},\"proof\":{\"type\":\"Ed25519Signature2020\",\"created\":\"2023-02-24T23:36:38Z\",\"verificationMethod\":\"did:key:z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2#z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z57Mm1vboMtZiCyJ4aReZsv8co4Re64Y8GEjL1ZARzMbXZgkARFLqFs1P345NpPGG2hgCrS4nNdvJhpwnrNyG3kEF\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          "https://www.w3.org/ns/credentials/examples/v2",
                          "https://w3id.org/security/suites/ed25519-2020/v1"
                        ],
                        "id": "urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33",
                        "type": [
                          "VerifiableCredential",
                          "AlumniCredential"
                        ],
                        "name": "Alumni Credential",
                        "description": "A minimum viable example of an Alumni Credential.",
                        "issuer": "https://vc.example/issuers/5678",
                        "validFrom": "2023-01-01T00:00:00Z",
                        "credentialSubject": {
                          "id": "did:example:abcdefgh",
                          "alumniOf": "The School of Examples"
                        },
                        "proof": {
                          "type": "Ed25519Signature2020",
                          "created": "2023-02-24T23:36:38Z",
                          "verificationMethod": "did:key:z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2#z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z57Mm1vboMtZiCyJ4aReZsv8co4Re64Y8GEjL1ZARzMbXZgkARFLqFs1P345NpPGG2hgCrS4nNdvJhpwnrNyG3kEF"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.apicatalog.com/credentials/verify",
                  "status": 404
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:48:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC.",
              "body": "async function() {\n        // this tells the test report which cell in the interop matrix\n        // the result goes in\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({vc: validVc});\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error);\n        should.exist(result);\n        should.exist(result.status);\n        result.status.should.equal(200);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "WVyPSaO_o-99bqJElog3P",
              "ctx": null,
              "_testId": "urn:uuid:3c7e49aa-d07b-4f11-88c2-2110aa600fca",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST verify a valid VC."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7565,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1046,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",\"https://www.w3.org/ns/credentials/examples/v2\",\"https://w3id.org/security/suites/ed25519-2020/v1\"],\"id\":\"urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33\",\"type\":[\"VerifiableCredential\",\"AlumniCredential\"],\"name\":\"Alumni Credential\",\"description\":\"A minimum viable example of an Alumni Credential.\",\"issuer\":\"https://vc.example/issuers/5678\",\"validFrom\":\"2023-01-01T00:00:00Z\",\"credentialSubject\":{\"id\":\"did:example:abcdefgh\",\"alumniOf\":\"The School of Examples\"},\"proof\":{\"type\":\"Ed25519Signature2020\",\"created\":\"2023-02-24T23:36:38Z\",\"verificationMethod\":\"did:key:z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2#z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z57Mm1vboMtZiCyJ4aReZsv8co4Re64Y8GEjL1ZARzMbXZgkARFLqFs1P345NpPGG2hgCrS4nNdvJhpwnrNyG3kEF\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          "https://www.w3.org/ns/credentials/examples/v2",
                          "https://w3id.org/security/suites/ed25519-2020/v1"
                        ],
                        "id": "urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33",
                        "type": [
                          "VerifiableCredential",
                          "AlumniCredential"
                        ],
                        "name": "Alumni Credential",
                        "description": "A minimum viable example of an Alumni Credential.",
                        "issuer": "https://vc.example/issuers/5678",
                        "validFrom": "2023-01-01T00:00:00Z",
                        "credentialSubject": {
                          "id": "did:example:abcdefgh",
                          "alumniOf": "The School of Examples"
                        },
                        "proof": {
                          "type": "Ed25519Signature2020",
                          "created": "2023-02-24T23:36:38Z",
                          "verificationMethod": "did:key:z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2#z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z57Mm1vboMtZiCyJ4aReZsv8co4Re64Y8GEjL1ZARzMbXZgkARFLqFs1P345NpPGG2hgCrS4nNdvJhpwnrNyG3kEF"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://univerifier.io/1.0/credentials/verify",
                  "status": 400,
                  "data": {
                    "checks": []
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:48:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC.",
              "body": "async function() {\n        // this tells the test report which cell in the interop matrix\n        // the result goes in\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({vc: validVc});\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error);\n        should.exist(result);\n        should.exist(result.status);\n        result.status.should.equal(200);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "KhZ7riDdYoRBHWyi6nR1w",
              "ctx": null,
              "_testId": "urn:uuid:0701bf50-e629-4ce7-aa45-8a765ee31fc3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST verify a valid VC."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 24068,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 748,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          "https://www.w3.org/ns/credentials/examples/v2",
                          "https://w3id.org/security/suites/ed25519-2020/v1"
                        ],
                        "id": "urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33",
                        "type": [
                          "VerifiableCredential",
                          "AlumniCredential"
                        ],
                        "name": "Alumni Credential",
                        "description": "A minimum viable example of an Alumni Credential.",
                        "issuer": "https://vc.example/issuers/5678",
                        "validFrom": "2023-01-01T00:00:00Z",
                        "credentialSubject": {
                          "id": "did:example:abcdefgh",
                          "alumniOf": "The School of Examples"
                        },
                        "proof": {
                          "type": "Ed25519Signature2020",
                          "created": "2023-02-24T23:36:38Z",
                          "verificationMethod": "did:key:z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2#z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z57Mm1vboMtZiCyJ4aReZsv8co4Re64Y8GEjL1ZARzMbXZgkARFLqFs1P345NpPGG2hgCrS4nNdvJhpwnrNyG3kEF"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half",
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",\"https://www.w3.org/ns/credentials/examples/v2\",\"https://w3id.org/security/suites/ed25519-2020/v1\"],\"id\":\"urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33\",\"type\":[\"VerifiableCredential\",\"AlumniCredential\"],\"name\":\"Alumni Credential\",\"description\":\"A minimum viable example of an Alumni Credential.\",\"issuer\":\"https://vc.example/issuers/5678\",\"validFrom\":\"2023-01-01T00:00:00Z\",\"credentialSubject\":{\"id\":\"did:example:abcdefgh\",\"alumniOf\":\"The School of Examples\"},\"proof\":{\"type\":\"Ed25519Signature2020\",\"created\":\"2023-02-24T23:36:38Z\",\"verificationMethod\":\"did:key:z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2#z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z57Mm1vboMtZiCyJ4aReZsv8co4Re64Y8GEjL1ZARzMbXZgkARFLqFs1P345NpPGG2hgCrS4nNdvJhpwnrNyG3kEF\"}},\"options\":{\"checks\":[\"proof\"]}}"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc2.veresverifier.dev/verifiers/z19oNgowF5rQkDPiajxdD1uTG/credentials/verify",
                  "status": 400,
                  "data": {
                    "verified": false,
                    "results": [
                      {
                        "proof": {
                          "@context": [
                            "https://www.w3.org/ns/credentials/v2",
                            "https://www.w3.org/ns/credentials/examples/v2",
                            "https://w3id.org/security/suites/ed25519-2020/v1"
                          ],
                          "type": "Ed25519Signature2020",
                          "created": "2023-02-24T23:36:38Z",
                          "verificationMethod": "did:key:z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2#z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z57Mm1vboMtZiCyJ4aReZsv8co4Re64Y8GEjL1ZARzMbXZgkARFLqFs1P345NpPGG2hgCrS4nNdvJhpwnrNyG3kEF"
                        },
                        "verified": false,
                        "verificationMethod": {
                          "@context": "https://w3id.org/security/suites/ed25519-2020/v1",
                          "id": "did:key:z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2#z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2",
                          "type": "Ed25519VerificationKey2020",
                          "controller": "did:key:z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2",
                          "publicKeyMultibase": "z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2"
                        },
                        "error": {
                          "name": "VerificationError",
                          "message": "Credential issuer must match the verification method controller."
                        },
                        "purposeResult": {
                          "valid": false,
                          "error": {
                            "name": "Error",
                            "message": "Credential issuer must match the verification method controller.",
                            "stack": "Error: Credential issuer must match the verification method controller.\n    at CredentialIssuancePurpose.validate (file:///home/node/app/node_modules/@digitalbazaar/vc/lib/CredentialIssuancePurpose.js:70:15)\n    at async /home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:305:27\n    at async Promise.all (index 0)\n    at async _verify (/home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:291:3)\n    at async ProofSet.verify (/home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:191:23)\n    at async Object.verify (/home/node/app/node_modules/jsonld-signatures/lib/jsonld-signatures.js:169:18)\n    at async _verifyCredential (file:///home/node/app/node_modules/@digitalbazaar/vc/lib/index.js:346:18)\n    at async Module.verifyCredential (file:///home/node/app/node_modules/@digitalbazaar/vc/lib/index.js:291:12)\n    at async Module.verifyCredential (file:///home/node/app/node_modules/@bedrock/vc-verifier/lib/di.js:17:18)\n    at async file:///home/node/app/node_modules/@bedrock/vc-verifier/lib/http.js:84:24"
                          }
                        }
                      }
                    ],
                    "error": {
                      "name": "VerificationError",
                      "errors": [
                        {
                          "name": "Error",
                          "message": "Credential issuer must match the verification method controller.",
                          "stack": "Error: Credential issuer must match the verification method controller.\n    at CredentialIssuancePurpose.validate (file:///home/node/app/node_modules/@digitalbazaar/vc/lib/CredentialIssuancePurpose.js:70:15)\n    at async /home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:305:27\n    at async Promise.all (index 0)\n    at async _verify (/home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:291:3)\n    at async ProofSet.verify (/home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:191:23)\n    at async Object.verify (/home/node/app/node_modules/jsonld-signatures/lib/jsonld-signatures.js:169:18)\n    at async _verifyCredential (file:///home/node/app/node_modules/@digitalbazaar/vc/lib/index.js:346:18)\n    at async Module.verifyCredential (file:///home/node/app/node_modules/@digitalbazaar/vc/lib/index.js:291:12)\n    at async Module.verifyCredential (file:///home/node/app/node_modules/@bedrock/vc-verifier/lib/di.js:17:18)\n    at async file:///home/node/app/node_modules/@bedrock/vc-verifier/lib/http.js:84:24"
                        }
                      ],
                      "message": "Verification error(s)."
                    },
                    "checks": [
                      {
                        "check": [
                          "proof"
                        ],
                        "id": "urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33",
                        "error": "Credential issuer must match the verification method controller.",
                        "verificationMethod": "did:key:z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2#z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2"
                      }
                    ]
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:48:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC.",
              "body": "async function() {\n        // this tells the test report which cell in the interop matrix\n        // the result goes in\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({vc: validVc});\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error);\n        should.exist(result);\n        should.exist(result.status);\n        result.status.should.equal(200);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "bfe5DH-bYGqh4ddPcLhb8",
              "ctx": null,
              "_testId": "urn:uuid:e56f641c-76b9-471c-9c91-f17efc104c8c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Credentials Consortium",
                "rowId": "MUST verify a valid VC."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27374,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 281,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected HTTPError: An error occurred in the signi… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",\"https://www.w3.org/ns/credentials/examples/v2\",\"https://w3id.org/security/suites/ed25519-2020/v1\"],\"id\":\"urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33\",\"type\":[\"VerifiableCredential\",\"AlumniCredential\"],\"name\":\"Alumni Credential\",\"description\":\"A minimum viable example of an Alumni Credential.\",\"issuer\":\"https://vc.example/issuers/5678\",\"validFrom\":\"2023-01-01T00:00:00Z\",\"credentialSubject\":{\"id\":\"did:example:abcdefgh\",\"alumniOf\":\"The School of Examples\"},\"proof\":{\"type\":\"Ed25519Signature2020\",\"created\":\"2023-02-24T23:36:38Z\",\"verificationMethod\":\"did:key:z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2#z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z57Mm1vboMtZiCyJ4aReZsv8co4Re64Y8GEjL1ZARzMbXZgkARFLqFs1P345NpPGG2hgCrS4nNdvJhpwnrNyG3kEF\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          "https://www.w3.org/ns/credentials/examples/v2",
                          "https://w3id.org/security/suites/ed25519-2020/v1"
                        ],
                        "id": "urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33",
                        "type": [
                          "VerifiableCredential",
                          "AlumniCredential"
                        ],
                        "name": "Alumni Credential",
                        "description": "A minimum viable example of an Alumni Credential.",
                        "issuer": "https://vc.example/issuers/5678",
                        "validFrom": "2023-01-01T00:00:00Z",
                        "credentialSubject": {
                          "id": "did:example:abcdefgh",
                          "alumniOf": "The School of Examples"
                        },
                        "proof": {
                          "type": "Ed25519Signature2020",
                          "created": "2023-02-24T23:36:38Z",
                          "verificationMethod": "did:key:z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2#z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z57Mm1vboMtZiCyJ4aReZsv8co4Re64Y8GEjL1ZARzMbXZgkARFLqFs1P345NpPGG2hgCrS4nNdvJhpwnrNyG3kEF"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://test-issuer.dcconsortium.org/verifier/credentials/verify",
                  "status": 400,
                  "data": {
                    "code": 400,
                    "message": "An error occurred in the signing-service: invalid input! See the logs for full details. If you are using docker compose, view the logs with 'docker compose logs', and just the signing service logs with: 'docker compose logs signing-service'"
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: expected HTTPError: An error occurred in the signi… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:48:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC.",
              "body": "async function() {\n        // this tells the test report which cell in the interop matrix\n        // the result goes in\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({vc: validVc});\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error);\n        should.exist(result);\n        should.exist(result.status);\n        result.status.should.equal(200);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "c28B6BA2yLEthC9IBC0y9",
              "ctx": null,
              "_testId": "urn:uuid:a680fe92-6bcc-414c-b395-5f25df734b42",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "MUST verify a valid VC."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29075,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 300,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected HTTPError { …(7) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",\"https://www.w3.org/ns/credentials/examples/v2\",\"https://w3id.org/security/suites/ed25519-2020/v1\"],\"id\":\"urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33\",\"type\":[\"VerifiableCredential\",\"AlumniCredential\"],\"name\":\"Alumni Credential\",\"description\":\"A minimum viable example of an Alumni Credential.\",\"issuer\":\"https://vc.example/issuers/5678\",\"validFrom\":\"2023-01-01T00:00:00Z\",\"credentialSubject\":{\"id\":\"did:example:abcdefgh\",\"alumniOf\":\"The School of Examples\"},\"proof\":{\"type\":\"Ed25519Signature2020\",\"created\":\"2023-02-24T23:36:38Z\",\"verificationMethod\":\"did:key:z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2#z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z57Mm1vboMtZiCyJ4aReZsv8co4Re64Y8GEjL1ZARzMbXZgkARFLqFs1P345NpPGG2hgCrS4nNdvJhpwnrNyG3kEF\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          "https://www.w3.org/ns/credentials/examples/v2",
                          "https://w3id.org/security/suites/ed25519-2020/v1"
                        ],
                        "id": "urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33",
                        "type": [
                          "VerifiableCredential",
                          "AlumniCredential"
                        ],
                        "name": "Alumni Credential",
                        "description": "A minimum viable example of an Alumni Credential.",
                        "issuer": "https://vc.example/issuers/5678",
                        "validFrom": "2023-01-01T00:00:00Z",
                        "credentialSubject": {
                          "id": "did:example:abcdefgh",
                          "alumniOf": "The School of Examples"
                        },
                        "proof": {
                          "type": "Ed25519Signature2020",
                          "created": "2023-02-24T23:36:38Z",
                          "verificationMethod": "did:key:z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2#z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z57Mm1vboMtZiCyJ4aReZsv8co4Re64Y8GEjL1ZARzMbXZgkARFLqFs1P345NpPGG2hgCrS4nNdvJhpwnrNyG3kEF"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc-api-dev.energyweb.org/v1/vc-api/credentials/verify",
                  "status": 400,
                  "data": {
                    "message": [
                      "verifiableCredential.issuanceDate must be a valid ISO 8601 date string"
                    ],
                    "error": "Bad Request",
                    "statusCode": 400
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: expected HTTPError { …(7) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:48:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC.",
              "body": "async function() {\n        // this tells the test report which cell in the interop matrix\n        // the result goes in\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({vc: validVc});\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error);\n        should.exist(result);\n        should.exist(result.status);\n        result.status.should.equal(200);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "SFExdScoyLNRqQxssdJPY",
              "ctx": null,
              "_testId": "urn:uuid:77b93c14-2589-43b0-82fe-0ac28a6a056b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Gen Digital",
                "rowId": "MUST verify a valid VC."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32566,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 317,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",\"https://www.w3.org/ns/credentials/examples/v2\",\"https://w3id.org/security/suites/ed25519-2020/v1\"],\"id\":\"urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33\",\"type\":[\"VerifiableCredential\",\"AlumniCredential\"],\"name\":\"Alumni Credential\",\"description\":\"A minimum viable example of an Alumni Credential.\",\"issuer\":\"https://vc.example/issuers/5678\",\"validFrom\":\"2023-01-01T00:00:00Z\",\"credentialSubject\":{\"id\":\"did:example:abcdefgh\",\"alumniOf\":\"The School of Examples\"},\"proof\":{\"type\":\"Ed25519Signature2020\",\"created\":\"2023-02-24T23:36:38Z\",\"verificationMethod\":\"did:key:z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2#z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z57Mm1vboMtZiCyJ4aReZsv8co4Re64Y8GEjL1ZARzMbXZgkARFLqFs1P345NpPGG2hgCrS4nNdvJhpwnrNyG3kEF\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          "https://www.w3.org/ns/credentials/examples/v2",
                          "https://w3id.org/security/suites/ed25519-2020/v1"
                        ],
                        "id": "urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33",
                        "type": [
                          "VerifiableCredential",
                          "AlumniCredential"
                        ],
                        "name": "Alumni Credential",
                        "description": "A minimum viable example of an Alumni Credential.",
                        "issuer": "https://vc.example/issuers/5678",
                        "validFrom": "2023-01-01T00:00:00Z",
                        "credentialSubject": {
                          "id": "did:example:abcdefgh",
                          "alumniOf": "The School of Examples"
                        },
                        "proof": {
                          "type": "Ed25519Signature2020",
                          "created": "2023-02-24T23:36:38Z",
                          "verificationMethod": "did:key:z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2#z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z57Mm1vboMtZiCyJ4aReZsv8co4Re64Y8GEjL1ZARzMbXZgkARFLqFs1P345NpPGG2hgCrS4nNdvJhpwnrNyG3kEF"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://krakend-k8s-dev3.dev.dts-dsa.com/vcs/verifier/profiles/25c3a9cd-2a45-418e-9200-f7e8a24d1a43/v1.latest/credentials/verify",
                  "status": 400,
                  "data": {
                    "checks": [
                      {
                        "check": "proof",
                        "error": "verifiable credential proof check error : check embedded proof: check linked data proof: proof invalid public key id: resolve DID https://vc.example/issuers/5678: wrong format did input: https://vc.example/issuers/5678",
                        "verificationMethod": ""
                      }
                    ]
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:48:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC.",
              "body": "async function() {\n        // this tells the test report which cell in the interop matrix\n        // the result goes in\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({vc: validVc});\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error);\n        should.exist(result);\n        should.exist(result.status);\n        result.status.should.equal(200);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "LRsbuCXWcbxtK3ce5bVNh",
              "ctx": null,
              "_testId": "urn:uuid:2570a980-80b3-4a9a-8c73-63d01b3bde92",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "MUST verify a valid VC."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33787,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 270,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",\"https://www.w3.org/ns/credentials/examples/v2\",\"https://w3id.org/security/suites/ed25519-2020/v1\"],\"id\":\"urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33\",\"type\":[\"VerifiableCredential\",\"AlumniCredential\"],\"name\":\"Alumni Credential\",\"description\":\"A minimum viable example of an Alumni Credential.\",\"issuer\":\"https://vc.example/issuers/5678\",\"validFrom\":\"2023-01-01T00:00:00Z\",\"credentialSubject\":{\"id\":\"did:example:abcdefgh\",\"alumniOf\":\"The School of Examples\"},\"proof\":{\"type\":\"Ed25519Signature2020\",\"created\":\"2023-02-24T23:36:38Z\",\"verificationMethod\":\"did:key:z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2#z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z57Mm1vboMtZiCyJ4aReZsv8co4Re64Y8GEjL1ZARzMbXZgkARFLqFs1P345NpPGG2hgCrS4nNdvJhpwnrNyG3kEF\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          "https://www.w3.org/ns/credentials/examples/v2",
                          "https://w3id.org/security/suites/ed25519-2020/v1"
                        ],
                        "id": "urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33",
                        "type": [
                          "VerifiableCredential",
                          "AlumniCredential"
                        ],
                        "name": "Alumni Credential",
                        "description": "A minimum viable example of an Alumni Credential.",
                        "issuer": "https://vc.example/issuers/5678",
                        "validFrom": "2023-01-01T00:00:00Z",
                        "credentialSubject": {
                          "id": "did:example:abcdefgh",
                          "alumniOf": "The School of Examples"
                        },
                        "proof": {
                          "type": "Ed25519Signature2020",
                          "created": "2023-02-24T23:36:38Z",
                          "verificationMethod": "did:key:z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2#z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z57Mm1vboMtZiCyJ4aReZsv8co4Re64Y8GEjL1ZARzMbXZgkARFLqFs1P345NpPGG2hgCrS4nNdvJhpwnrNyG3kEF"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://bridge.learncard.com/credentials/verify",
                  "status": 400,
                  "data": "Invalid input: [\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"verifiableCredential\",\n      \"issuanceDate\"\n    ],\n    \"message\": \"Required\"\n  }\n]"
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:48:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC.",
              "body": "async function() {\n        // this tells the test report which cell in the interop matrix\n        // the result goes in\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({vc: validVc});\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error);\n        should.exist(result);\n        should.exist(result.status);\n        result.status.should.equal(200);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "XVhcHeGrozFAqf5Mjb4dn",
              "ctx": null,
              "_testId": "urn:uuid:f51998cc-7286-46d8-b0bc-703ff03850cd",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Mavennet",
                "rowId": "MUST verify a valid VC."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36489,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 182,
              "state": "failed",
              "err": {
                "response": {},
                "request": {},
                "options": {
                  "credentials": "same-origin",
                  "headers": {},
                  "body": {},
                  "method": "POST",
                  "agent": {
                    "_events": {},
                    "_eventsCount": 2,
                    "defaultPort": 443,
                    "protocol": "https:",
                    "options": {
                      "rejectUnauthorized": false,
                      "noDelay": true,
                      "path": null
                    },
                    "requests": {},
                    "sockets": {},
                    "freeSockets": {},
                    "keepAliveMsecs": 1000,
                    "keepAlive": false,
                    "maxSockets": null,
                    "maxFreeSockets": 256,
                    "scheduling": "lifo",
                    "maxTotalSockets": null,
                    "totalSocketCount": 0,
                    "maxCachedSessions": 100,
                    "_sessionCache": {
                      "map": {},
                      "list": []
                    }
                  },
                  "hooks": {
                    "beforeRequest": [],
                    "beforeRetry": [],
                    "beforeError": [],
                    "afterResponse": []
                  },
                  "prefixUrl": "",
                  "retry": {
                    "limit": 2,
                    "methods": [
                      "get",
                      "put",
                      "head",
                      "delete",
                      "options",
                      "trace"
                    ],
                    "statusCodes": [
                      408,
                      413,
                      429,
                      500,
                      502,
                      503,
                      504
                    ],
                    "afterStatusCodes": [
                      413,
                      429,
                      503
                    ],
                    "maxRetryAfter": null,
                    "backoffLimit": null
                  },
                  "throwHttpErrors": true,
                  "timeout": 10000,
                  "signal": {},
                  "duplex": "half"
                },
                "name": "HTTPError",
                "requestUrl": "https://api.staging.refiner.neoflow.energy/v1/auth",
                "status": 403
              }
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC.",
              "body": "async function() {\n        // this tells the test report which cell in the interop matrix\n        // the result goes in\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({vc: validVc});\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error);\n        should.exist(result);\n        should.exist(result.status);\n        result.status.should.equal(200);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "0VJ519eb2h6-zOKduTF6f",
              "ctx": null,
              "_testId": "urn:uuid:2033c3bd-cc6f-4737-8f3f-989054d5bb48",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "MUST verify a valid VC."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36936,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 402,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",\"https://www.w3.org/ns/credentials/examples/v2\",\"https://w3id.org/security/suites/ed25519-2020/v1\"],\"id\":\"urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33\",\"type\":[\"VerifiableCredential\",\"AlumniCredential\"],\"name\":\"Alumni Credential\",\"description\":\"A minimum viable example of an Alumni Credential.\",\"issuer\":\"https://vc.example/issuers/5678\",\"validFrom\":\"2023-01-01T00:00:00Z\",\"credentialSubject\":{\"id\":\"did:example:abcdefgh\",\"alumniOf\":\"The School of Examples\"},\"proof\":{\"type\":\"Ed25519Signature2020\",\"created\":\"2023-02-24T23:36:38Z\",\"verificationMethod\":\"did:key:z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2#z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z57Mm1vboMtZiCyJ4aReZsv8co4Re64Y8GEjL1ZARzMbXZgkARFLqFs1P345NpPGG2hgCrS4nNdvJhpwnrNyG3kEF\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          "https://www.w3.org/ns/credentials/examples/v2",
                          "https://w3id.org/security/suites/ed25519-2020/v1"
                        ],
                        "id": "urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33",
                        "type": [
                          "VerifiableCredential",
                          "AlumniCredential"
                        ],
                        "name": "Alumni Credential",
                        "description": "A minimum viable example of an Alumni Credential.",
                        "issuer": "https://vc.example/issuers/5678",
                        "validFrom": "2023-01-01T00:00:00Z",
                        "credentialSubject": {
                          "id": "did:example:abcdefgh",
                          "alumniOf": "The School of Examples"
                        },
                        "proof": {
                          "type": "Ed25519Signature2020",
                          "created": "2023-02-24T23:36:38Z",
                          "verificationMethod": "did:key:z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2#z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z57Mm1vboMtZiCyJ4aReZsv8co4Re64Y8GEjL1ZARzMbXZgkARFLqFs1P345NpPGG2hgCrS4nNdvJhpwnrNyG3kEF"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://canivc.core.dev.procivis-one.com/vc-api/credentials/verify",
                  "status": 400,
                  "data": {
                    "errors": [
                      {
                        "status": 400,
                        "title": "Failed to deserialize the JSON body into the target type",
                        "detail": null
                      }
                    ]
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:48:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC.",
              "body": "async function() {\n        // this tells the test report which cell in the interop matrix\n        // the result goes in\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({vc: validVc});\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error);\n        should.exist(result);\n        should.exist(result.status);\n        result.status.should.equal(200);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "GNqLPl0Q6JzyDDZzjv6s1",
              "ctx": null,
              "_testId": "urn:uuid:f78ce015-846e-4824-9c68-ba0a593b87ec",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SecureKey",
                "rowId": "MUST verify a valid VC."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 43973,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 63,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected TypeError: fetch failed { …(2) } to not exist",
                "showDiff": false,
                "actual": {
                  "requestUrl": "https://verifier-vcs.sandbox.trustbloc.dev/vc-verifier-interop/verifier/credentials/verify"
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: expected TypeError: fetch failed { …(2) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:48:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC.",
              "body": "async function() {\n        // this tells the test report which cell in the interop matrix\n        // the result goes in\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({vc: validVc});\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error);\n        should.exist(result);\n        should.exist(result.status);\n        result.status.should.equal(200);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "-y1BEUFkeLgU_Kdcfq_Oi",
              "ctx": null,
              "_testId": "urn:uuid:52525307-9080-4712-9785-9ea2d1134f4e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST verify a valid VC."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44669,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 196,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC.",
              "body": "async function() {\n        // this tells the test report which cell in the interop matrix\n        // the result goes in\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({vc: validVc});\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error);\n        should.exist(result);\n        should.exist(result.status);\n        result.status.should.equal(200);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "YpwS-LsvTmU_ZBkUni1Q8",
              "ctx": null,
              "_testId": "urn:uuid:6526b35e-26a7-4a59-b788-f12f84235a8c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trential",
                "rowId": "MUST verify a valid VC."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 47366,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 3058,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC.",
              "body": "async function() {\n        // this tells the test report which cell in the interop matrix\n        // the result goes in\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({vc: validVc});\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error);\n        should.exist(result);\n        should.exist(result.status);\n        result.status.should.equal(200);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "9uBiF0u9yrJILQdZrevKA",
              "ctx": null,
              "_testId": "urn:uuid:00f100e5-a6b0-4686-bfb4-7f20e387bd38",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "MUST verify a valid VC."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 71720,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 303,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "MUST not verify if \"@context\" property is missing.",
          "cells": [
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noContextVc = klona(validVc);\n          delete noContextVc['@context'];\n          const body = createRequestBody({vc: noContextVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "GxzXjrrn6fYdu6CdWfWRT",
              "ctx": null,
              "_testId": "urn:uuid:13bc875f-8956-4968-8490-585e5ec5701d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "ACA-py",
                "rowId": "MUST not verify if \"@context\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3154,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 176,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected status code 400 or 422.: expected 500 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 500,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Expected status code 400 or 422.: expected 500 to be one of [ 400, 422 ]\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:15:26)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:63:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noContextVc = klona(validVc);\n          delete noContextVc['@context'];\n          const body = createRequestBody({vc: noContextVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "KfVxuXJq7Q8gTujeU9KkI",
              "ctx": null,
              "_testId": "urn:uuid:b1f63de7-e696-4a6f-85b0-17f7277c5783",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "MUST not verify if \"@context\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7229,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 21,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected status code 400 or 422.: expected 404 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 404,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Expected status code 400 or 422.: expected 404 to be one of [ 400, 422 ]\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:15:26)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:63:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noContextVc = klona(validVc);\n          delete noContextVc['@context'];\n          const body = createRequestBody({vc: noContextVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "WVyPSaO_o-99bqJElog3P",
              "ctx": null,
              "_testId": "urn:uuid:13952c27-73ec-4959-a636-1c38f643ecc4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST not verify if \"@context\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8611,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 131,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noContextVc = klona(validVc);\n          delete noContextVc['@context'];\n          const body = createRequestBody({vc: noContextVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "KhZ7riDdYoRBHWyi6nR1w",
              "ctx": null,
              "_testId": "urn:uuid:a8c30367-18cf-4e30-8afd-f64c270dd8b7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST not verify if \"@context\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 24816,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 49,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noContextVc = klona(validVc);\n          delete noContextVc['@context'];\n          const body = createRequestBody({vc: noContextVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "bfe5DH-bYGqh4ddPcLhb8",
              "ctx": null,
              "_testId": "urn:uuid:88428e2a-3f8a-4e51-bd2a-77b1ee11e776",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Credentials Consortium",
                "rowId": "MUST not verify if \"@context\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27657,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 21,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noContextVc = klona(validVc);\n          delete noContextVc['@context'];\n          const body = createRequestBody({vc: noContextVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "c28B6BA2yLEthC9IBC0y9",
              "ctx": null,
              "_testId": "urn:uuid:da248415-6e5f-494c-aa00-ae4c4b3c3325",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "MUST not verify if \"@context\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29377,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 60,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noContextVc = klona(validVc);\n          delete noContextVc['@context'];\n          const body = createRequestBody({vc: noContextVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "SFExdScoyLNRqQxssdJPY",
              "ctx": null,
              "_testId": "urn:uuid:ac299579-de1d-4dd3-8fb7-0d102a3245f7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Gen Digital",
                "rowId": "MUST not verify if \"@context\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32883,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 18,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noContextVc = klona(validVc);\n          delete noContextVc['@context'];\n          const body = createRequestBody({vc: noContextVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "LRsbuCXWcbxtK3ce5bVNh",
              "ctx": null,
              "_testId": "urn:uuid:f424f977-1786-4bcc-a05d-ba01c556aad7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "MUST not verify if \"@context\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 34058,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 45,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noContextVc = klona(validVc);\n          delete noContextVc['@context'];\n          const body = createRequestBody({vc: noContextVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "XVhcHeGrozFAqf5Mjb4dn",
              "ctx": null,
              "_testId": "urn:uuid:1aac6b6f-b343-4050-867d-dde706a8e88d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Mavennet",
                "rowId": "MUST not verify if \"@context\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36671,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 19,
              "state": "failed",
              "err": {
                "response": {},
                "request": {},
                "options": {
                  "credentials": "same-origin",
                  "headers": {},
                  "body": {},
                  "method": "POST",
                  "agent": {
                    "_events": {},
                    "_eventsCount": 2,
                    "defaultPort": 443,
                    "protocol": "https:",
                    "options": {
                      "rejectUnauthorized": false,
                      "noDelay": true,
                      "path": null
                    },
                    "requests": {},
                    "sockets": {},
                    "freeSockets": {},
                    "keepAliveMsecs": 1000,
                    "keepAlive": false,
                    "maxSockets": null,
                    "maxFreeSockets": 256,
                    "scheduling": "lifo",
                    "maxTotalSockets": null,
                    "totalSocketCount": 0,
                    "maxCachedSessions": 100,
                    "_sessionCache": {
                      "map": {},
                      "list": []
                    }
                  },
                  "hooks": {
                    "beforeRequest": [],
                    "beforeRetry": [],
                    "beforeError": [],
                    "afterResponse": []
                  },
                  "prefixUrl": "",
                  "retry": {
                    "limit": 2,
                    "methods": [
                      "get",
                      "put",
                      "head",
                      "delete",
                      "options",
                      "trace"
                    ],
                    "statusCodes": [
                      408,
                      413,
                      429,
                      500,
                      502,
                      503,
                      504
                    ],
                    "afterStatusCodes": [
                      413,
                      429,
                      503
                    ],
                    "maxRetryAfter": null,
                    "backoffLimit": null
                  },
                  "throwHttpErrors": true,
                  "timeout": 10000,
                  "signal": {},
                  "duplex": "half"
                },
                "name": "HTTPError",
                "requestUrl": "https://api.staging.refiner.neoflow.energy/v1/auth",
                "status": 403
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noContextVc = klona(validVc);\n          delete noContextVc['@context'];\n          const body = createRequestBody({vc: noContextVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "0VJ519eb2h6-zOKduTF6f",
              "ctx": null,
              "_testId": "urn:uuid:04bf2f91-347a-4f4d-bb7f-b5c01410c892",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "MUST not verify if \"@context\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 37338,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 110,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noContextVc = klona(validVc);\n          delete noContextVc['@context'];\n          const body = createRequestBody({vc: noContextVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "GNqLPl0Q6JzyDDZzjv6s1",
              "ctx": null,
              "_testId": "urn:uuid:ae1c7533-93b7-4c28-9cfa-56db1a442143",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SecureKey",
                "rowId": "MUST not verify if \"@context\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44038,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 48,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an HTTP error response code: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an HTTP error response code: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:14:10)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:63:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noContextVc = klona(validVc);\n          delete noContextVc['@context'];\n          const body = createRequestBody({vc: noContextVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "-y1BEUFkeLgU_Kdcfq_Oi",
              "ctx": null,
              "_testId": "urn:uuid:c4b2a4bb-5a37-44ed-a1b6-f99ac6fd0f58",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"@context\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44865,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 50,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noContextVc = klona(validVc);\n          delete noContextVc['@context'];\n          const body = createRequestBody({vc: noContextVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "YpwS-LsvTmU_ZBkUni1Q8",
              "ctx": null,
              "_testId": "urn:uuid:6b36b5c4-3467-4196-982d-67f018a5d72c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trential",
                "rowId": "MUST not verify if \"@context\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 50425,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 239,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noContextVc = klona(validVc);\n          delete noContextVc['@context'];\n          const body = createRequestBody({vc: noContextVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "9uBiF0u9yrJILQdZrevKA",
              "ctx": null,
              "_testId": "urn:uuid:73d242b2-9e41-467a-850d-4c9bceceef8f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "MUST not verify if \"@context\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 72024,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 62,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 05 Jan 2025 05:11:17 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '27', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=4Dd11dp9KhlmOUsqJx3wSKs9IZ7vVIAojmgMJHLFJDnW4HxSy%2FIpypZA7eabZGQVnGwGzUSwUzB95CjdL9yNRO%2FH%2BtZbLOsFa7q4ZJ37a0RUN9Q1z0g2FnvZe3ITpmKyrmX6WXiK0%2FLrA7eRqfZW\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '8fd0f77db82cfa21-ORD', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=2352&min_rtt=1808&rtt_var=1233&sent=8&recv=8&lost=0&retrans=0&sent_bytes=5653&recv_bytes=2795&delivery_rate=1574421&cwnd=254&unsent_bytes=0&cid=86901cd48417d354&ts=333&x=0\"', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 05 Jan 2025 05:11:17 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '27', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=4Dd11dp9KhlmOUsqJx3wSKs9IZ7vVIAojmgMJHLFJDnW4HxSy%2FIpypZA7eabZGQVnGwGzUSwUzB95CjdL9yNRO%2FH%2BtZbLOsFa7q4ZJ37a0RUN9Q1z0g2FnvZe3ITpmKyrmX6WXiK0%2FLrA7eRqfZW\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '8fd0f77db82cfa21-ORD', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=2352&min_rtt=1808&rtt_var=1233&sent=8&recv=8&lost=0&retrans=0&sent_bytes=5653&recv_bytes=2795&delivery_rate=1574421&cwnd=254&unsent_bytes=0&cid=86901cd48417d354&ts=333&x=0\"', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:12:14)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:63:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ]
        },
        {
          "id": "MUST not verify if \"type\" property is missing.",
          "cells": [
            {
              "type": "test",
              "title": "MUST not verify if \"type\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noTypeVc = klona(validVc);\n        delete noTypeVc.type;\n        const body = createRequestBody({vc: noTypeVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "GxzXjrrn6fYdu6CdWfWRT",
              "ctx": null,
              "_testId": "urn:uuid:4dbf4528-c678-471f-9a9b-03050a0eeb7b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "ACA-py",
                "rowId": "MUST not verify if \"type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3330,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 502,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected status code 400 or 422.: expected 500 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 500,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Expected status code 400 or 422.: expected 500 to be one of [ 400, 422 ]\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:15:26)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:74:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noTypeVc = klona(validVc);\n        delete noTypeVc.type;\n        const body = createRequestBody({vc: noTypeVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "KfVxuXJq7Q8gTujeU9KkI",
              "ctx": null,
              "_testId": "urn:uuid:b1a45488-34a6-4a73-89c5-e4856b76052c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "MUST not verify if \"type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7250,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 19,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected status code 400 or 422.: expected 404 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 404,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Expected status code 400 or 422.: expected 404 to be one of [ 400, 422 ]\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:15:26)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:74:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noTypeVc = klona(validVc);\n        delete noTypeVc.type;\n        const body = createRequestBody({vc: noTypeVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "WVyPSaO_o-99bqJElog3P",
              "ctx": null,
              "_testId": "urn:uuid:3104cf88-7c56-4661-ac8d-54f548231cd1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST not verify if \"type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8743,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 609,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noTypeVc = klona(validVc);\n        delete noTypeVc.type;\n        const body = createRequestBody({vc: noTypeVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "KhZ7riDdYoRBHWyi6nR1w",
              "ctx": null,
              "_testId": "urn:uuid:855d9223-ae60-4f85-b148-6fafab8e2f8b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST not verify if \"type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 24866,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 46,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noTypeVc = klona(validVc);\n        delete noTypeVc.type;\n        const body = createRequestBody({vc: noTypeVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "bfe5DH-bYGqh4ddPcLhb8",
              "ctx": null,
              "_testId": "urn:uuid:7a302237-c64a-4fc9-8728-f3f7e6d12398",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Credentials Consortium",
                "rowId": "MUST not verify if \"type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27680,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 20,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noTypeVc = klona(validVc);\n        delete noTypeVc.type;\n        const body = createRequestBody({vc: noTypeVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "c28B6BA2yLEthC9IBC0y9",
              "ctx": null,
              "_testId": "urn:uuid:fbf1c5da-fd7c-4e14-958e-1d7575a7e848",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "MUST not verify if \"type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29437,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 60,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noTypeVc = klona(validVc);\n        delete noTypeVc.type;\n        const body = createRequestBody({vc: noTypeVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "SFExdScoyLNRqQxssdJPY",
              "ctx": null,
              "_testId": "urn:uuid:856d8939-34e5-445a-81fc-05b59787de54",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Gen Digital",
                "rowId": "MUST not verify if \"type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32901,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 17,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noTypeVc = klona(validVc);\n        delete noTypeVc.type;\n        const body = createRequestBody({vc: noTypeVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "LRsbuCXWcbxtK3ce5bVNh",
              "ctx": null,
              "_testId": "urn:uuid:8351d63c-a0c2-4c50-bb75-29f3ebb84471",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "MUST not verify if \"type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 34103,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 38,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noTypeVc = klona(validVc);\n        delete noTypeVc.type;\n        const body = createRequestBody({vc: noTypeVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "XVhcHeGrozFAqf5Mjb4dn",
              "ctx": null,
              "_testId": "urn:uuid:2ce5cd3a-5e9f-44f2-9f14-dd3ca60a3178",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Mavennet",
                "rowId": "MUST not verify if \"type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36692,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 17,
              "state": "failed",
              "err": {
                "response": {},
                "request": {},
                "options": {
                  "credentials": "same-origin",
                  "headers": {},
                  "body": {},
                  "method": "POST",
                  "agent": {
                    "_events": {},
                    "_eventsCount": 2,
                    "defaultPort": 443,
                    "protocol": "https:",
                    "options": {
                      "rejectUnauthorized": false,
                      "noDelay": true,
                      "path": null
                    },
                    "requests": {},
                    "sockets": {},
                    "freeSockets": {},
                    "keepAliveMsecs": 1000,
                    "keepAlive": false,
                    "maxSockets": null,
                    "maxFreeSockets": 256,
                    "scheduling": "lifo",
                    "maxTotalSockets": null,
                    "totalSocketCount": 0,
                    "maxCachedSessions": 100,
                    "_sessionCache": {
                      "map": {},
                      "list": []
                    }
                  },
                  "hooks": {
                    "beforeRequest": [],
                    "beforeRetry": [],
                    "beforeError": [],
                    "afterResponse": []
                  },
                  "prefixUrl": "",
                  "retry": {
                    "limit": 2,
                    "methods": [
                      "get",
                      "put",
                      "head",
                      "delete",
                      "options",
                      "trace"
                    ],
                    "statusCodes": [
                      408,
                      413,
                      429,
                      500,
                      502,
                      503,
                      504
                    ],
                    "afterStatusCodes": [
                      413,
                      429,
                      503
                    ],
                    "maxRetryAfter": null,
                    "backoffLimit": null
                  },
                  "throwHttpErrors": true,
                  "timeout": 10000,
                  "signal": {},
                  "duplex": "half"
                },
                "name": "HTTPError",
                "requestUrl": "https://api.staging.refiner.neoflow.energy/v1/auth",
                "status": 403
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noTypeVc = klona(validVc);\n        delete noTypeVc.type;\n        const body = createRequestBody({vc: noTypeVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "0VJ519eb2h6-zOKduTF6f",
              "ctx": null,
              "_testId": "urn:uuid:da984144-8b56-4b19-b541-19322f4fc034",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "MUST not verify if \"type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 37449,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 110,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noTypeVc = klona(validVc);\n        delete noTypeVc.type;\n        const body = createRequestBody({vc: noTypeVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "GNqLPl0Q6JzyDDZzjv6s1",
              "ctx": null,
              "_testId": "urn:uuid:1b07116d-6412-446d-9085-459673995ebd",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SecureKey",
                "rowId": "MUST not verify if \"type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44086,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 57,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an HTTP error response code: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an HTTP error response code: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:14:10)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:74:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noTypeVc = klona(validVc);\n        delete noTypeVc.type;\n        const body = createRequestBody({vc: noTypeVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "-y1BEUFkeLgU_Kdcfq_Oi",
              "ctx": null,
              "_testId": "urn:uuid:c305aca6-e7f0-403b-b85e-b5e490f81364",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44914,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 45,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noTypeVc = klona(validVc);\n        delete noTypeVc.type;\n        const body = createRequestBody({vc: noTypeVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "YpwS-LsvTmU_ZBkUni1Q8",
              "ctx": null,
              "_testId": "urn:uuid:23f5048d-56c4-4f6a-b293-0c35ceedf91f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trential",
                "rowId": "MUST not verify if \"type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 50664,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 239,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noTypeVc = klona(validVc);\n        delete noTypeVc.type;\n        const body = createRequestBody({vc: noTypeVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "9uBiF0u9yrJILQdZrevKA",
              "ctx": null,
              "_testId": "urn:uuid:51971765-150d-4470-b389-8959a715636f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "MUST not verify if \"type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 72087,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 65,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 05 Jan 2025 05:11:17 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '24', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=BDESqP%2Bz9p%2BV6ugvP8WBhtNHFazEe2thtwoUMwzlYMIA1g8Ak5grMQfQ8409QlBkPA1IdwNuYfPvNWH3eASsHAlNzdnKQxFintRmNpnT%2FsAhkKBXjJtUZfgrYdAfA6x3rGi%2BUpQMgqNGJP11oblE\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '8fd0f77e1906fa21-ORD', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=2562&min_rtt=1808&rtt_var=1211&sent=12&recv=10&lost=0&retrans=0&sent_bytes=8382&recv_bytes=3976&delivery_rate=1574421&cwnd=257&unsent_bytes=0&cid=86901cd48417d354&ts=399&x=0\"', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 05 Jan 2025 05:11:17 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '24', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=BDESqP%2Bz9p%2BV6ugvP8WBhtNHFazEe2thtwoUMwzlYMIA1g8Ak5grMQfQ8409QlBkPA1IdwNuYfPvNWH3eASsHAlNzdnKQxFintRmNpnT%2FsAhkKBXjJtUZfgrYdAfA6x3rGi%2BUpQMgqNGJP11oblE\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '8fd0f77e1906fa21-ORD', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=2562&min_rtt=1808&rtt_var=1211&sent=12&recv=10&lost=0&retrans=0&sent_bytes=8382&recv_bytes=3976&delivery_rate=1574421&cwnd=257&unsent_bytes=0&cid=86901cd48417d354&ts=399&x=0\"', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:12:14)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:74:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ]
        },
        {
          "id": "MUST not verify if \"issuer\" property is missing.",
          "cells": [
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noIssuerVc = klona(validVc);\n        delete noIssuerVc.issuer;\n        const body = createRequestBody({vc: noIssuerVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "GxzXjrrn6fYdu6CdWfWRT",
              "ctx": null,
              "_testId": "urn:uuid:110e98a0-d0b1-46a2-9e1c-08d15003f13e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "ACA-py",
                "rowId": "MUST not verify if \"issuer\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3833,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 200,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected status code 400 or 422.: expected 500 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 500,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Expected status code 400 or 422.: expected 500 to be one of [ 400, 422 ]\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:15:26)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:85:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noIssuerVc = klona(validVc);\n        delete noIssuerVc.issuer;\n        const body = createRequestBody({vc: noIssuerVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "KfVxuXJq7Q8gTujeU9KkI",
              "ctx": null,
              "_testId": "urn:uuid:0e116be9-e138-4f31-90b6-80d3e493025c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "MUST not verify if \"issuer\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7269,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 20,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected status code 400 or 422.: expected 404 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 404,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Expected status code 400 or 422.: expected 404 to be one of [ 400, 422 ]\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:15:26)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:85:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noIssuerVc = klona(validVc);\n        delete noIssuerVc.issuer;\n        const body = createRequestBody({vc: noIssuerVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "WVyPSaO_o-99bqJElog3P",
              "ctx": null,
              "_testId": "urn:uuid:484ab1dc-401e-446b-9276-52a8a9b364ee",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST not verify if \"issuer\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9352,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 400,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noIssuerVc = klona(validVc);\n        delete noIssuerVc.issuer;\n        const body = createRequestBody({vc: noIssuerVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "KhZ7riDdYoRBHWyi6nR1w",
              "ctx": null,
              "_testId": "urn:uuid:1d05cc44-2fd1-471d-a546-1f3e8bee510e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST not verify if \"issuer\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 24912,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 47,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noIssuerVc = klona(validVc);\n        delete noIssuerVc.issuer;\n        const body = createRequestBody({vc: noIssuerVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "bfe5DH-bYGqh4ddPcLhb8",
              "ctx": null,
              "_testId": "urn:uuid:c5ded783-a23f-4835-ba28-515d513c8d84",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Credentials Consortium",
                "rowId": "MUST not verify if \"issuer\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27701,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 20,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noIssuerVc = klona(validVc);\n        delete noIssuerVc.issuer;\n        const body = createRequestBody({vc: noIssuerVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "c28B6BA2yLEthC9IBC0y9",
              "ctx": null,
              "_testId": "urn:uuid:39c30d76-f5f6-4e79-adf4-4a50c82274f4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "MUST not verify if \"issuer\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29497,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 60,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noIssuerVc = klona(validVc);\n        delete noIssuerVc.issuer;\n        const body = createRequestBody({vc: noIssuerVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "SFExdScoyLNRqQxssdJPY",
              "ctx": null,
              "_testId": "urn:uuid:7df6a162-9faa-473e-9750-a88fdc72c3d1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Gen Digital",
                "rowId": "MUST not verify if \"issuer\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32918,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 17,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noIssuerVc = klona(validVc);\n        delete noIssuerVc.issuer;\n        const body = createRequestBody({vc: noIssuerVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "LRsbuCXWcbxtK3ce5bVNh",
              "ctx": null,
              "_testId": "urn:uuid:61147c1d-298c-4554-bbbd-47d582b5af2a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "MUST not verify if \"issuer\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 34142,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 46,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noIssuerVc = klona(validVc);\n        delete noIssuerVc.issuer;\n        const body = createRequestBody({vc: noIssuerVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "XVhcHeGrozFAqf5Mjb4dn",
              "ctx": null,
              "_testId": "urn:uuid:b1296e6e-20b1-4533-a9f8-81e5f607179c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Mavennet",
                "rowId": "MUST not verify if \"issuer\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36709,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 16,
              "state": "failed",
              "err": {
                "response": {},
                "request": {},
                "options": {
                  "credentials": "same-origin",
                  "headers": {},
                  "body": {},
                  "method": "POST",
                  "agent": {
                    "_events": {},
                    "_eventsCount": 2,
                    "defaultPort": 443,
                    "protocol": "https:",
                    "options": {
                      "rejectUnauthorized": false,
                      "noDelay": true,
                      "path": null
                    },
                    "requests": {},
                    "sockets": {},
                    "freeSockets": {},
                    "keepAliveMsecs": 1000,
                    "keepAlive": false,
                    "maxSockets": null,
                    "maxFreeSockets": 256,
                    "scheduling": "lifo",
                    "maxTotalSockets": null,
                    "totalSocketCount": 0,
                    "maxCachedSessions": 100,
                    "_sessionCache": {
                      "map": {},
                      "list": []
                    }
                  },
                  "hooks": {
                    "beforeRequest": [],
                    "beforeRetry": [],
                    "beforeError": [],
                    "afterResponse": []
                  },
                  "prefixUrl": "",
                  "retry": {
                    "limit": 2,
                    "methods": [
                      "get",
                      "put",
                      "head",
                      "delete",
                      "options",
                      "trace"
                    ],
                    "statusCodes": [
                      408,
                      413,
                      429,
                      500,
                      502,
                      503,
                      504
                    ],
                    "afterStatusCodes": [
                      413,
                      429,
                      503
                    ],
                    "maxRetryAfter": null,
                    "backoffLimit": null
                  },
                  "throwHttpErrors": true,
                  "timeout": 10000,
                  "signal": {},
                  "duplex": "half"
                },
                "name": "HTTPError",
                "requestUrl": "https://api.staging.refiner.neoflow.energy/v1/auth",
                "status": 403
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noIssuerVc = klona(validVc);\n        delete noIssuerVc.issuer;\n        const body = createRequestBody({vc: noIssuerVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "0VJ519eb2h6-zOKduTF6f",
              "ctx": null,
              "_testId": "urn:uuid:5ef06640-84e7-43cf-ba0b-047ebac6b244",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "MUST not verify if \"issuer\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 37559,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 110,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noIssuerVc = klona(validVc);\n        delete noIssuerVc.issuer;\n        const body = createRequestBody({vc: noIssuerVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "GNqLPl0Q6JzyDDZzjv6s1",
              "ctx": null,
              "_testId": "urn:uuid:c039809d-6c8b-4bf3-ad14-0fa749a262b5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SecureKey",
                "rowId": "MUST not verify if \"issuer\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44144,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 82,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an HTTP error response code: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an HTTP error response code: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:14:10)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:85:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noIssuerVc = klona(validVc);\n        delete noIssuerVc.issuer;\n        const body = createRequestBody({vc: noIssuerVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "-y1BEUFkeLgU_Kdcfq_Oi",
              "ctx": null,
              "_testId": "urn:uuid:b5d993d9-ee5d-4a65-a4df-ea7728ca28a3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"issuer\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44959,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 42,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noIssuerVc = klona(validVc);\n        delete noIssuerVc.issuer;\n        const body = createRequestBody({vc: noIssuerVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "YpwS-LsvTmU_ZBkUni1Q8",
              "ctx": null,
              "_testId": "urn:uuid:eb7bec6e-dd98-49bb-8b35-952078a6fec5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trential",
                "rowId": "MUST not verify if \"issuer\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 50904,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 239,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noIssuerVc = klona(validVc);\n        delete noIssuerVc.issuer;\n        const body = createRequestBody({vc: noIssuerVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "9uBiF0u9yrJILQdZrevKA",
              "ctx": null,
              "_testId": "urn:uuid:c53629e8-dc7d-4b44-ab7b-e975f283432b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "MUST not verify if \"issuer\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 72152,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 59,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 05 Jan 2025 05:11:17 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '19', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=bnapPbqIs1nVA0Tbh4EEcedDjnqmPOw%2BOIO3vc5eJSAjDmfUpngxkAFlI9%2FHQXH24GuzKfc6EgYI4wz3GbMwcPyK2rwzuy2IHKUWPENYVpOFUEkYi4gCL%2FMXzIcxz7pQ3tkwZbB9hoHTT%2FWTmyd%2B\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '8fd0f77e8a04fa21-ORD', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=2628&min_rtt=1808&rtt_var=1085&sent=16&recv=12&lost=0&retrans=0&sent_bytes=11113&recv_bytes=5165&delivery_rate=1574421&cwnd=257&unsent_bytes=0&cid=86901cd48417d354&ts=459&x=0\"', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 05 Jan 2025 05:11:17 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '19', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=bnapPbqIs1nVA0Tbh4EEcedDjnqmPOw%2BOIO3vc5eJSAjDmfUpngxkAFlI9%2FHQXH24GuzKfc6EgYI4wz3GbMwcPyK2rwzuy2IHKUWPENYVpOFUEkYi4gCL%2FMXzIcxz7pQ3tkwZbB9hoHTT%2FWTmyd%2B\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '8fd0f77e8a04fa21-ORD', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=2628&min_rtt=1808&rtt_var=1085&sent=16&recv=12&lost=0&retrans=0&sent_bytes=11113&recv_bytes=5165&delivery_rate=1574421&cwnd=257&unsent_bytes=0&cid=86901cd48417d354&ts=459&x=0\"', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:12:14)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:85:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ]
        },
        {
          "id": "MUST not verify if \"credentialSubject\" property is missing.",
          "cells": [
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noCredentialSubjectVc = klona(validVc);\n          delete noCredentialSubjectVc.credentialSubject;\n          const body = createRequestBody({vc: noCredentialSubjectVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "GxzXjrrn6fYdu6CdWfWRT",
              "ctx": null,
              "_testId": "urn:uuid:6159e34b-e1b6-46c3-b5f0-8b2fb6a7f1c3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "ACA-py",
                "rowId": "MUST not verify if \"credentialSubject\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4033,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 197,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected status code 400 or 422.: expected 500 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 500,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Expected status code 400 or 422.: expected 500 to be one of [ 400, 422 ]\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:15:26)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:97:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noCredentialSubjectVc = klona(validVc);\n          delete noCredentialSubjectVc.credentialSubject;\n          const body = createRequestBody({vc: noCredentialSubjectVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "KfVxuXJq7Q8gTujeU9KkI",
              "ctx": null,
              "_testId": "urn:uuid:62c4872c-412e-40a4-bc80-496f0ba52bf2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "MUST not verify if \"credentialSubject\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7289,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 20,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected status code 400 or 422.: expected 404 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 404,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Expected status code 400 or 422.: expected 404 to be one of [ 400, 422 ]\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:15:26)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:97:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noCredentialSubjectVc = klona(validVc);\n          delete noCredentialSubjectVc.credentialSubject;\n          const body = createRequestBody({vc: noCredentialSubjectVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "WVyPSaO_o-99bqJElog3P",
              "ctx": null,
              "_testId": "urn:uuid:84ef6475-33e2-4963-881d-95a46cef5a91",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST not verify if \"credentialSubject\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9753,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 409,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noCredentialSubjectVc = klona(validVc);\n          delete noCredentialSubjectVc.credentialSubject;\n          const body = createRequestBody({vc: noCredentialSubjectVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "KhZ7riDdYoRBHWyi6nR1w",
              "ctx": null,
              "_testId": "urn:uuid:5d4a56b7-5709-4331-909d-08857e6d422f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST not verify if \"credentialSubject\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 24959,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 47,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noCredentialSubjectVc = klona(validVc);\n          delete noCredentialSubjectVc.credentialSubject;\n          const body = createRequestBody({vc: noCredentialSubjectVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "bfe5DH-bYGqh4ddPcLhb8",
              "ctx": null,
              "_testId": "urn:uuid:63727ddc-65b3-47ec-be4b-2e9cbce16bcc",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Credentials Consortium",
                "rowId": "MUST not verify if \"credentialSubject\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27722,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 21,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noCredentialSubjectVc = klona(validVc);\n          delete noCredentialSubjectVc.credentialSubject;\n          const body = createRequestBody({vc: noCredentialSubjectVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "c28B6BA2yLEthC9IBC0y9",
              "ctx": null,
              "_testId": "urn:uuid:4cb7b96c-717d-4c3f-9d86-ab9b119b0ed5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "MUST not verify if \"credentialSubject\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29557,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 60,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noCredentialSubjectVc = klona(validVc);\n          delete noCredentialSubjectVc.credentialSubject;\n          const body = createRequestBody({vc: noCredentialSubjectVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "SFExdScoyLNRqQxssdJPY",
              "ctx": null,
              "_testId": "urn:uuid:115bfb71-f912-4076-8bc7-144f50b66e37",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Gen Digital",
                "rowId": "MUST not verify if \"credentialSubject\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32936,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 18,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noCredentialSubjectVc = klona(validVc);\n          delete noCredentialSubjectVc.credentialSubject;\n          const body = createRequestBody({vc: noCredentialSubjectVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "LRsbuCXWcbxtK3ce5bVNh",
              "ctx": null,
              "_testId": "urn:uuid:bc1d0286-d539-4ba6-af60-9c3152f2d9f0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "MUST not verify if \"credentialSubject\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 34188,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 63,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noCredentialSubjectVc = klona(validVc);\n          delete noCredentialSubjectVc.credentialSubject;\n          const body = createRequestBody({vc: noCredentialSubjectVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "XVhcHeGrozFAqf5Mjb4dn",
              "ctx": null,
              "_testId": "urn:uuid:857b0003-08a0-416e-bb4b-c54e36ece9ea",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Mavennet",
                "rowId": "MUST not verify if \"credentialSubject\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36727,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 18,
              "state": "failed",
              "err": {
                "response": {},
                "request": {},
                "options": {
                  "credentials": "same-origin",
                  "headers": {},
                  "body": {},
                  "method": "POST",
                  "agent": {
                    "_events": {},
                    "_eventsCount": 2,
                    "defaultPort": 443,
                    "protocol": "https:",
                    "options": {
                      "rejectUnauthorized": false,
                      "noDelay": true,
                      "path": null
                    },
                    "requests": {},
                    "sockets": {},
                    "freeSockets": {},
                    "keepAliveMsecs": 1000,
                    "keepAlive": false,
                    "maxSockets": null,
                    "maxFreeSockets": 256,
                    "scheduling": "lifo",
                    "maxTotalSockets": null,
                    "totalSocketCount": 0,
                    "maxCachedSessions": 100,
                    "_sessionCache": {
                      "map": {},
                      "list": []
                    }
                  },
                  "hooks": {
                    "beforeRequest": [],
                    "beforeRetry": [],
                    "beforeError": [],
                    "afterResponse": []
                  },
                  "prefixUrl": "",
                  "retry": {
                    "limit": 2,
                    "methods": [
                      "get",
                      "put",
                      "head",
                      "delete",
                      "options",
                      "trace"
                    ],
                    "statusCodes": [
                      408,
                      413,
                      429,
                      500,
                      502,
                      503,
                      504
                    ],
                    "afterStatusCodes": [
                      413,
                      429,
                      503
                    ],
                    "maxRetryAfter": null,
                    "backoffLimit": null
                  },
                  "throwHttpErrors": true,
                  "timeout": 10000,
                  "signal": {},
                  "duplex": "half"
                },
                "name": "HTTPError",
                "requestUrl": "https://api.staging.refiner.neoflow.energy/v1/auth",
                "status": 403
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noCredentialSubjectVc = klona(validVc);\n          delete noCredentialSubjectVc.credentialSubject;\n          const body = createRequestBody({vc: noCredentialSubjectVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "0VJ519eb2h6-zOKduTF6f",
              "ctx": null,
              "_testId": "urn:uuid:d91ec579-1a08-494d-b93e-cce4f43bc1f7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "MUST not verify if \"credentialSubject\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 37669,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 110,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noCredentialSubjectVc = klona(validVc);\n          delete noCredentialSubjectVc.credentialSubject;\n          const body = createRequestBody({vc: noCredentialSubjectVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "GNqLPl0Q6JzyDDZzjv6s1",
              "ctx": null,
              "_testId": "urn:uuid:79147e57-048d-4a74-b46e-2cf7c297e97f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SecureKey",
                "rowId": "MUST not verify if \"credentialSubject\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44226,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 46,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an HTTP error response code: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an HTTP error response code: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:14:10)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:97:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noCredentialSubjectVc = klona(validVc);\n          delete noCredentialSubjectVc.credentialSubject;\n          const body = createRequestBody({vc: noCredentialSubjectVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "-y1BEUFkeLgU_Kdcfq_Oi",
              "ctx": null,
              "_testId": "urn:uuid:f3d3a663-ed22-40d1-8f15-c6151a52d844",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"credentialSubject\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 45001,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 43,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noCredentialSubjectVc = klona(validVc);\n          delete noCredentialSubjectVc.credentialSubject;\n          const body = createRequestBody({vc: noCredentialSubjectVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "YpwS-LsvTmU_ZBkUni1Q8",
              "ctx": null,
              "_testId": "urn:uuid:7608dc30-e36c-4a81-9704-f1d3f9bce5a6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trential",
                "rowId": "MUST not verify if \"credentialSubject\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 51142,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 234,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noCredentialSubjectVc = klona(validVc);\n          delete noCredentialSubjectVc.credentialSubject;\n          const body = createRequestBody({vc: noCredentialSubjectVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "9uBiF0u9yrJILQdZrevKA",
              "ctx": null,
              "_testId": "urn:uuid:ec11d9fb-c15b-4840-8b5e-65163746ae97",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "MUST not verify if \"credentialSubject\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 72213,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 49,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 05 Jan 2025 05:11:17 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '15', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=RA6F%2Fmz6EQfXLoCikYZblZZbUyCMKKf2fmd%2F7hsrZJHVQSXJ%2BpkZFXeOQDmy45AdMf0GA4HcFnmbICneWJX0wnkus3XBJ%2BYbeCu9wwGdxxvyvV0XYgEIXhNzCZOzeOgRZxz9Xpb%2BajFy64x2WEd9\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '8fd0f77eeae9fa21-ORD', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=2691&min_rtt=1808&rtt_var=1062&sent=20&recv=14&lost=0&retrans=0&sent_bytes=13847&recv_bytes=6311&delivery_rate=1574421&cwnd=257&unsent_bytes=0&cid=86901cd48417d354&ts=509&x=0\"', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 05 Jan 2025 05:11:17 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '15', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=RA6F%2Fmz6EQfXLoCikYZblZZbUyCMKKf2fmd%2F7hsrZJHVQSXJ%2BpkZFXeOQDmy45AdMf0GA4HcFnmbICneWJX0wnkus3XBJ%2BYbeCu9wwGdxxvyvV0XYgEIXhNzCZOzeOgRZxz9Xpb%2BajFy64x2WEd9\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '8fd0f77eeae9fa21-ORD', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=2691&min_rtt=1808&rtt_var=1062&sent=20&recv=14&lost=0&retrans=0&sent_bytes=13847&recv_bytes=6311&delivery_rate=1574421&cwnd=257&unsent_bytes=0&cid=86901cd48417d354&ts=509&x=0\"', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:12:14)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:97:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ]
        },
        {
          "id": "MUST not verify if \"proof\" property is missing.",
          "cells": [
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noProofVc = klona(validVc);\n        delete noProofVc.proof;\n        const body = createRequestBody({vc: noProofVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "GxzXjrrn6fYdu6CdWfWRT",
              "ctx": null,
              "_testId": "urn:uuid:8c5c41a7-d381-4d35-860a-2d5e9cd62bc4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "ACA-py",
                "rowId": "MUST not verify if \"proof\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4230,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 199,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected status code 400 or 422.: expected 500 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 500,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Expected status code 400 or 422.: expected 500 to be one of [ 400, 422 ]\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:15:26)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:108:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noProofVc = klona(validVc);\n        delete noProofVc.proof;\n        const body = createRequestBody({vc: noProofVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "KfVxuXJq7Q8gTujeU9KkI",
              "ctx": null,
              "_testId": "urn:uuid:936b95d4-93fb-491a-8aa7-df0aa311cd76",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "MUST not verify if \"proof\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7309,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 20,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected status code 400 or 422.: expected 404 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 404,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Expected status code 400 or 422.: expected 404 to be one of [ 400, 422 ]\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:15:26)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:108:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noProofVc = klona(validVc);\n        delete noProofVc.proof;\n        const body = createRequestBody({vc: noProofVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "WVyPSaO_o-99bqJElog3P",
              "ctx": null,
              "_testId": "urn:uuid:753eedae-536a-482f-a9cb-8290dfdc9d88",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST not verify if \"proof\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10163,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 396,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noProofVc = klona(validVc);\n        delete noProofVc.proof;\n        const body = createRequestBody({vc: noProofVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "KhZ7riDdYoRBHWyi6nR1w",
              "ctx": null,
              "_testId": "urn:uuid:392ff33a-a7c5-4ed1-9090-3cc6738de2aa",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST not verify if \"proof\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25006,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 51,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noProofVc = klona(validVc);\n        delete noProofVc.proof;\n        const body = createRequestBody({vc: noProofVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "bfe5DH-bYGqh4ddPcLhb8",
              "ctx": null,
              "_testId": "urn:uuid:087f9db7-5147-4ed7-9ddf-5c973f32e9dc",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Credentials Consortium",
                "rowId": "MUST not verify if \"proof\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27743,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 20,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noProofVc = klona(validVc);\n        delete noProofVc.proof;\n        const body = createRequestBody({vc: noProofVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "c28B6BA2yLEthC9IBC0y9",
              "ctx": null,
              "_testId": "urn:uuid:c00b80ea-e3fb-48cd-ad0e-61802241b9d1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "MUST not verify if \"proof\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29618,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 57,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noProofVc = klona(validVc);\n        delete noProofVc.proof;\n        const body = createRequestBody({vc: noProofVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "SFExdScoyLNRqQxssdJPY",
              "ctx": null,
              "_testId": "urn:uuid:8a5b937a-3dc5-43d9-96bf-833a7c9f7072",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Gen Digital",
                "rowId": "MUST not verify if \"proof\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32953,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 21,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noProofVc = klona(validVc);\n        delete noProofVc.proof;\n        const body = createRequestBody({vc: noProofVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "LRsbuCXWcbxtK3ce5bVNh",
              "ctx": null,
              "_testId": "urn:uuid:e2d169cb-b617-40e9-8625-689b3b0e8b65",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "MUST not verify if \"proof\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 34251,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 39,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noProofVc = klona(validVc);\n        delete noProofVc.proof;\n        const body = createRequestBody({vc: noProofVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "XVhcHeGrozFAqf5Mjb4dn",
              "ctx": null,
              "_testId": "urn:uuid:c0e6f8a5-dfa4-4504-8bb2-c32068a0cf1f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Mavennet",
                "rowId": "MUST not verify if \"proof\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36745,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 17,
              "state": "failed",
              "err": {
                "response": {},
                "request": {},
                "options": {
                  "credentials": "same-origin",
                  "headers": {},
                  "body": {},
                  "method": "POST",
                  "agent": {
                    "_events": {},
                    "_eventsCount": 2,
                    "defaultPort": 443,
                    "protocol": "https:",
                    "options": {
                      "rejectUnauthorized": false,
                      "noDelay": true,
                      "path": null
                    },
                    "requests": {},
                    "sockets": {},
                    "freeSockets": {},
                    "keepAliveMsecs": 1000,
                    "keepAlive": false,
                    "maxSockets": null,
                    "maxFreeSockets": 256,
                    "scheduling": "lifo",
                    "maxTotalSockets": null,
                    "totalSocketCount": 0,
                    "maxCachedSessions": 100,
                    "_sessionCache": {
                      "map": {},
                      "list": []
                    }
                  },
                  "hooks": {
                    "beforeRequest": [],
                    "beforeRetry": [],
                    "beforeError": [],
                    "afterResponse": []
                  },
                  "prefixUrl": "",
                  "retry": {
                    "limit": 2,
                    "methods": [
                      "get",
                      "put",
                      "head",
                      "delete",
                      "options",
                      "trace"
                    ],
                    "statusCodes": [
                      408,
                      413,
                      429,
                      500,
                      502,
                      503,
                      504
                    ],
                    "afterStatusCodes": [
                      413,
                      429,
                      503
                    ],
                    "maxRetryAfter": null,
                    "backoffLimit": null
                  },
                  "throwHttpErrors": true,
                  "timeout": 10000,
                  "signal": {},
                  "duplex": "half"
                },
                "name": "HTTPError",
                "requestUrl": "https://api.staging.refiner.neoflow.energy/v1/auth",
                "status": 403
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noProofVc = klona(validVc);\n        delete noProofVc.proof;\n        const body = createRequestBody({vc: noProofVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "0VJ519eb2h6-zOKduTF6f",
              "ctx": null,
              "_testId": "urn:uuid:0580fd87-2a55-4870-9ff2-0b7c7d7b8c28",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "MUST not verify if \"proof\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 37779,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 881,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noProofVc = klona(validVc);\n        delete noProofVc.proof;\n        const body = createRequestBody({vc: noProofVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "GNqLPl0Q6JzyDDZzjv6s1",
              "ctx": null,
              "_testId": "urn:uuid:2c4b3906-27f7-4574-8395-12963ee9435a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SecureKey",
                "rowId": "MUST not verify if \"proof\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44272,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 9,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an HTTP error response code: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an HTTP error response code: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:14:10)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:108:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noProofVc = klona(validVc);\n        delete noProofVc.proof;\n        const body = createRequestBody({vc: noProofVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "-y1BEUFkeLgU_Kdcfq_Oi",
              "ctx": null,
              "_testId": "urn:uuid:124c1722-d9b8-4388-9ded-d1763e8e34d1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"proof\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 45044,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 45,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noProofVc = klona(validVc);\n        delete noProofVc.proof;\n        const body = createRequestBody({vc: noProofVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "YpwS-LsvTmU_ZBkUni1Q8",
              "ctx": null,
              "_testId": "urn:uuid:ac3ba8c0-5249-4baa-9a46-c7d06304b881",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trential",
                "rowId": "MUST not verify if \"proof\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 51377,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 229,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noProofVc = klona(validVc);\n        delete noProofVc.proof;\n        const body = createRequestBody({vc: noProofVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "9uBiF0u9yrJILQdZrevKA",
              "ctx": null,
              "_testId": "urn:uuid:3eea9abd-3e64-4288-aeeb-832b0158a0e3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "MUST not verify if \"proof\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 72263,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 43,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 05 Jan 2025 05:11:17 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '8', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=IzGMT%2FTTjqge9OgKgk2YWpeF6Cu8i3a8SW2Cv1ZVMyeD4oKujByKfHyZvTI%2FdE%2F6wuQtIENLIn8lGuwDHIclu7Foa%2BIxNrSaN7cdwJh42QoY9nhvTQTUZ17yPZtn07yC8QB%2FQvmmKlLhdxC9pyMs\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '8fd0f77f3b9afa21-ORD', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=2776&min_rtt=1808&rtt_var=1118&sent=24&recv=16&lost=0&retrans=0&sent_bytes=16581&recv_bytes=7203&delivery_rate=1574421&cwnd=257&unsent_bytes=0&cid=86901cd48417d354&ts=553&x=0\"', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 05 Jan 2025 05:11:17 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '8', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=IzGMT%2FTTjqge9OgKgk2YWpeF6Cu8i3a8SW2Cv1ZVMyeD4oKujByKfHyZvTI%2FdE%2F6wuQtIENLIn8lGuwDHIclu7Foa%2BIxNrSaN7cdwJh42QoY9nhvTQTUZ17yPZtn07yC8QB%2FQvmmKlLhdxC9pyMs\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '8fd0f77f3b9afa21-ORD', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=2776&min_rtt=1808&rtt_var=1118&sent=24&recv=16&lost=0&retrans=0&sent_bytes=16581&recv_bytes=7203&delivery_rate=1574421&cwnd=257&unsent_bytes=0&cid=86901cd48417d354&ts=553&x=0\"', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:12:14)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:108:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ]
        },
        {
          "id": "MUST not verify if \"proof.type\" property is missing.",
          "cells": [
            {
              "type": "test",
              "title": "MUST not verify if \"proof.type\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofTypeVc = klona(validVc);\n          delete noProofTypeVc.proof.type;\n          const body = createRequestBody({vc: noProofTypeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "GxzXjrrn6fYdu6CdWfWRT",
              "ctx": null,
              "_testId": "urn:uuid:78d286f2-0e97-47c3-aaeb-09ef9d9dc541",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "ACA-py",
                "rowId": "MUST not verify if \"proof.type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4429,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 162,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected status code 400 or 422.: expected 500 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 500,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Expected status code 400 or 422.: expected 500 to be one of [ 400, 422 ]\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:15:26)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:120:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.type\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofTypeVc = klona(validVc);\n          delete noProofTypeVc.proof.type;\n          const body = createRequestBody({vc: noProofTypeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "KfVxuXJq7Q8gTujeU9KkI",
              "ctx": null,
              "_testId": "urn:uuid:3ed314d3-233c-436b-85ee-10acf91079dc",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "MUST not verify if \"proof.type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7329,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 20,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected status code 400 or 422.: expected 404 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 404,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Expected status code 400 or 422.: expected 404 to be one of [ 400, 422 ]\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:15:26)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:120:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.type\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofTypeVc = klona(validVc);\n          delete noProofTypeVc.proof.type;\n          const body = createRequestBody({vc: noProofTypeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "WVyPSaO_o-99bqJElog3P",
              "ctx": null,
              "_testId": "urn:uuid:b9ba6f68-2f7c-4e86-8edc-43d0f6f838fd",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST not verify if \"proof.type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10559,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 407,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.type\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofTypeVc = klona(validVc);\n          delete noProofTypeVc.proof.type;\n          const body = createRequestBody({vc: noProofTypeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "KhZ7riDdYoRBHWyi6nR1w",
              "ctx": null,
              "_testId": "urn:uuid:a2dcbc29-939f-42c2-a4b7-9267f0837c65",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST not verify if \"proof.type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25057,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 189,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.type\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofTypeVc = klona(validVc);\n          delete noProofTypeVc.proof.type;\n          const body = createRequestBody({vc: noProofTypeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "bfe5DH-bYGqh4ddPcLhb8",
              "ctx": null,
              "_testId": "urn:uuid:f44c1437-a880-4a45-8fd6-78fc61eca60a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Credentials Consortium",
                "rowId": "MUST not verify if \"proof.type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27763,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 20,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.type\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofTypeVc = klona(validVc);\n          delete noProofTypeVc.proof.type;\n          const body = createRequestBody({vc: noProofTypeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "c28B6BA2yLEthC9IBC0y9",
              "ctx": null,
              "_testId": "urn:uuid:b5c145bf-c04c-434c-bb0f-a0d985fe5340",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "MUST not verify if \"proof.type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29676,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 58,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.type\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofTypeVc = klona(validVc);\n          delete noProofTypeVc.proof.type;\n          const body = createRequestBody({vc: noProofTypeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "SFExdScoyLNRqQxssdJPY",
              "ctx": null,
              "_testId": "urn:uuid:b8efd798-3f94-485f-8bc5-d96e118a0109",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Gen Digital",
                "rowId": "MUST not verify if \"proof.type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32974,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 17,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.type\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofTypeVc = klona(validVc);\n          delete noProofTypeVc.proof.type;\n          const body = createRequestBody({vc: noProofTypeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "LRsbuCXWcbxtK3ce5bVNh",
              "ctx": null,
              "_testId": "urn:uuid:6565130a-64bc-438a-80ae-05ca038a72e1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "MUST not verify if \"proof.type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 34290,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 45,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.type\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofTypeVc = klona(validVc);\n          delete noProofTypeVc.proof.type;\n          const body = createRequestBody({vc: noProofTypeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "XVhcHeGrozFAqf5Mjb4dn",
              "ctx": null,
              "_testId": "urn:uuid:d89b731f-cd50-49bd-96a1-ad84f4dd40b5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Mavennet",
                "rowId": "MUST not verify if \"proof.type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36762,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 18,
              "state": "failed",
              "err": {
                "response": {},
                "request": {},
                "options": {
                  "credentials": "same-origin",
                  "headers": {},
                  "body": {},
                  "method": "POST",
                  "agent": {
                    "_events": {},
                    "_eventsCount": 2,
                    "defaultPort": 443,
                    "protocol": "https:",
                    "options": {
                      "rejectUnauthorized": false,
                      "noDelay": true,
                      "path": null
                    },
                    "requests": {},
                    "sockets": {},
                    "freeSockets": {},
                    "keepAliveMsecs": 1000,
                    "keepAlive": false,
                    "maxSockets": null,
                    "maxFreeSockets": 256,
                    "scheduling": "lifo",
                    "maxTotalSockets": null,
                    "totalSocketCount": 0,
                    "maxCachedSessions": 100,
                    "_sessionCache": {
                      "map": {},
                      "list": []
                    }
                  },
                  "hooks": {
                    "beforeRequest": [],
                    "beforeRetry": [],
                    "beforeError": [],
                    "afterResponse": []
                  },
                  "prefixUrl": "",
                  "retry": {
                    "limit": 2,
                    "methods": [
                      "get",
                      "put",
                      "head",
                      "delete",
                      "options",
                      "trace"
                    ],
                    "statusCodes": [
                      408,
                      413,
                      429,
                      500,
                      502,
                      503,
                      504
                    ],
                    "afterStatusCodes": [
                      413,
                      429,
                      503
                    ],
                    "maxRetryAfter": null,
                    "backoffLimit": null
                  },
                  "throwHttpErrors": true,
                  "timeout": 10000,
                  "signal": {},
                  "duplex": "half"
                },
                "name": "HTTPError",
                "requestUrl": "https://api.staging.refiner.neoflow.energy/v1/auth",
                "status": 403
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.type\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofTypeVc = klona(validVc);\n          delete noProofTypeVc.proof.type;\n          const body = createRequestBody({vc: noProofTypeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "0VJ519eb2h6-zOKduTF6f",
              "ctx": null,
              "_testId": "urn:uuid:a9a647cc-facd-467f-98be-7e42bcbc18e5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "MUST not verify if \"proof.type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 38660,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 110,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.type\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofTypeVc = klona(validVc);\n          delete noProofTypeVc.proof.type;\n          const body = createRequestBody({vc: noProofTypeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "GNqLPl0Q6JzyDDZzjv6s1",
              "ctx": null,
              "_testId": "urn:uuid:6296d584-b820-43a0-b3f8-8f567e8c6fa7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SecureKey",
                "rowId": "MUST not verify if \"proof.type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44281,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 148,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an HTTP error response code: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an HTTP error response code: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:14:10)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:120:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.type\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofTypeVc = klona(validVc);\n          delete noProofTypeVc.proof.type;\n          const body = createRequestBody({vc: noProofTypeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "-y1BEUFkeLgU_Kdcfq_Oi",
              "ctx": null,
              "_testId": "urn:uuid:d8a5d119-1be2-497e-a0e7-7b40f2ab970b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"proof.type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 45089,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 154,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.type\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofTypeVc = klona(validVc);\n          delete noProofTypeVc.proof.type;\n          const body = createRequestBody({vc: noProofTypeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "YpwS-LsvTmU_ZBkUni1Q8",
              "ctx": null,
              "_testId": "urn:uuid:33c602ca-20b2-4d34-9610-77ff7ee98e03",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trential",
                "rowId": "MUST not verify if \"proof.type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 51607,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 230,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.type\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofTypeVc = klona(validVc);\n          delete noProofTypeVc.proof.type;\n          const body = createRequestBody({vc: noProofTypeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "9uBiF0u9yrJILQdZrevKA",
              "ctx": null,
              "_testId": "urn:uuid:ec9067f2-d5ee-45ec-9574-cca2efd3b2ed",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "MUST not verify if \"proof.type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 72306,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 45,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 05 Jan 2025 05:11:17 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '12', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=aY%2FKkfJS%2BgSUMPs3x%2FSqQEnEI6BqYm8zmIRAfSSH0htPqTyD9EcRwDk2z3hNeH%2B6S2DSWP7imYvfAWSATb1rGSX8b82y1ry3xkd2pjfR9OWGiyQmebE63JCeQv%2FxjcnMYkOOB7I7k3Eb2vl0Ap%2F9\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '8fd0f77f7c33fa21-ORD', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=2819&min_rtt=1808&rtt_var=1119&sent=28&recv=18&lost=0&retrans=0&sent_bytes=19314&recv_bytes=8405&delivery_rate=1574421&cwnd=257&unsent_bytes=0&cid=86901cd48417d354&ts=599&x=0\"', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 05 Jan 2025 05:11:17 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '12', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=aY%2FKkfJS%2BgSUMPs3x%2FSqQEnEI6BqYm8zmIRAfSSH0htPqTyD9EcRwDk2z3hNeH%2B6S2DSWP7imYvfAWSATb1rGSX8b82y1ry3xkd2pjfR9OWGiyQmebE63JCeQv%2FxjcnMYkOOB7I7k3Eb2vl0Ap%2F9\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '8fd0f77f7c33fa21-ORD', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=2819&min_rtt=1808&rtt_var=1119&sent=28&recv=18&lost=0&retrans=0&sent_bytes=19314&recv_bytes=8405&delivery_rate=1574421&cwnd=257&unsent_bytes=0&cid=86901cd48417d354&ts=599&x=0\"', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:12:14)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:120:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ]
        },
        {
          "id": "MUST not verify if \"proof.created\" property is missing.",
          "cells": [
            {
              "type": "test",
              "title": "MUST not verify if \"proof.created\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofCreatedVc = klona(validVc);\n          delete noProofCreatedVc.proof.created;\n          const body = createRequestBody({vc: noProofCreatedVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "GxzXjrrn6fYdu6CdWfWRT",
              "ctx": null,
              "_testId": "urn:uuid:55987988-ade3-47db-a2e9-6f566c103ed9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "ACA-py",
                "rowId": "MUST not verify if \"proof.created\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4592,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 179,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected status code 400 or 422.: expected 500 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 500,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Expected status code 400 or 422.: expected 500 to be one of [ 400, 422 ]\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:15:26)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:132:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.created\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofCreatedVc = klona(validVc);\n          delete noProofCreatedVc.proof.created;\n          const body = createRequestBody({vc: noProofCreatedVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "KfVxuXJq7Q8gTujeU9KkI",
              "ctx": null,
              "_testId": "urn:uuid:9b40aec5-cc02-4bcb-b49b-1cb668287343",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "MUST not verify if \"proof.created\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7349,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 20,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected status code 400 or 422.: expected 404 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 404,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Expected status code 400 or 422.: expected 404 to be one of [ 400, 422 ]\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:15:26)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:132:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.created\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofCreatedVc = klona(validVc);\n          delete noProofCreatedVc.proof.created;\n          const body = createRequestBody({vc: noProofCreatedVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "WVyPSaO_o-99bqJElog3P",
              "ctx": null,
              "_testId": "urn:uuid:a445f166-2353-4a71-ac1d-837c7707ef34",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST not verify if \"proof.created\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10967,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 389,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.created\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofCreatedVc = klona(validVc);\n          delete noProofCreatedVc.proof.created;\n          const body = createRequestBody({vc: noProofCreatedVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "KhZ7riDdYoRBHWyi6nR1w",
              "ctx": null,
              "_testId": "urn:uuid:62de57df-9651-4683-8b7c-a93c38d8022a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST not verify if \"proof.created\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25246,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 62,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.created\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofCreatedVc = klona(validVc);\n          delete noProofCreatedVc.proof.created;\n          const body = createRequestBody({vc: noProofCreatedVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "bfe5DH-bYGqh4ddPcLhb8",
              "ctx": null,
              "_testId": "urn:uuid:9f3fdda1-8c79-4b08-9e45-fd01901708b8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Credentials Consortium",
                "rowId": "MUST not verify if \"proof.created\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27784,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 53,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.created\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofCreatedVc = klona(validVc);\n          delete noProofCreatedVc.proof.created;\n          const body = createRequestBody({vc: noProofCreatedVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "c28B6BA2yLEthC9IBC0y9",
              "ctx": null,
              "_testId": "urn:uuid:957fc4dd-45c6-4425-8507-517b65e5cbaf",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "MUST not verify if \"proof.created\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29735,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 62,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.created\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofCreatedVc = klona(validVc);\n          delete noProofCreatedVc.proof.created;\n          const body = createRequestBody({vc: noProofCreatedVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "SFExdScoyLNRqQxssdJPY",
              "ctx": null,
              "_testId": "urn:uuid:2e8111ea-1794-4372-b54d-77373427b54e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Gen Digital",
                "rowId": "MUST not verify if \"proof.created\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32992,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 21,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.created\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofCreatedVc = klona(validVc);\n          delete noProofCreatedVc.proof.created;\n          const body = createRequestBody({vc: noProofCreatedVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "LRsbuCXWcbxtK3ce5bVNh",
              "ctx": null,
              "_testId": "urn:uuid:ef187b7d-06f4-4464-82ee-5ea843b3d566",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "MUST not verify if \"proof.created\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 34335,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 40,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.created\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofCreatedVc = klona(validVc);\n          delete noProofCreatedVc.proof.created;\n          const body = createRequestBody({vc: noProofCreatedVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "XVhcHeGrozFAqf5Mjb4dn",
              "ctx": null,
              "_testId": "urn:uuid:20f381df-09d7-4b0b-a191-36eeb780c571",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Mavennet",
                "rowId": "MUST not verify if \"proof.created\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36781,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 17,
              "state": "failed",
              "err": {
                "response": {},
                "request": {},
                "options": {
                  "credentials": "same-origin",
                  "headers": {},
                  "body": {},
                  "method": "POST",
                  "agent": {
                    "_events": {},
                    "_eventsCount": 2,
                    "defaultPort": 443,
                    "protocol": "https:",
                    "options": {
                      "rejectUnauthorized": false,
                      "noDelay": true,
                      "path": null
                    },
                    "requests": {},
                    "sockets": {},
                    "freeSockets": {},
                    "keepAliveMsecs": 1000,
                    "keepAlive": false,
                    "maxSockets": null,
                    "maxFreeSockets": 256,
                    "scheduling": "lifo",
                    "maxTotalSockets": null,
                    "totalSocketCount": 0,
                    "maxCachedSessions": 100,
                    "_sessionCache": {
                      "map": {},
                      "list": []
                    }
                  },
                  "hooks": {
                    "beforeRequest": [],
                    "beforeRetry": [],
                    "beforeError": [],
                    "afterResponse": []
                  },
                  "prefixUrl": "",
                  "retry": {
                    "limit": 2,
                    "methods": [
                      "get",
                      "put",
                      "head",
                      "delete",
                      "options",
                      "trace"
                    ],
                    "statusCodes": [
                      408,
                      413,
                      429,
                      500,
                      502,
                      503,
                      504
                    ],
                    "afterStatusCodes": [
                      413,
                      429,
                      503
                    ],
                    "maxRetryAfter": null,
                    "backoffLimit": null
                  },
                  "throwHttpErrors": true,
                  "timeout": 10000,
                  "signal": {},
                  "duplex": "half"
                },
                "name": "HTTPError",
                "requestUrl": "https://api.staging.refiner.neoflow.energy/v1/auth",
                "status": 403
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.created\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofCreatedVc = klona(validVc);\n          delete noProofCreatedVc.proof.created;\n          const body = createRequestBody({vc: noProofCreatedVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "0VJ519eb2h6-zOKduTF6f",
              "ctx": null,
              "_testId": "urn:uuid:2dd62fbc-ef1d-482a-be7b-323be907b288",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "MUST not verify if \"proof.created\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 38770,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 109,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.created\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofCreatedVc = klona(validVc);\n          delete noProofCreatedVc.proof.created;\n          const body = createRequestBody({vc: noProofCreatedVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "GNqLPl0Q6JzyDDZzjv6s1",
              "ctx": null,
              "_testId": "urn:uuid:ae04a7bc-2eaa-4a6f-897e-55597a292b10",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SecureKey",
                "rowId": "MUST not verify if \"proof.created\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44429,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 7,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an HTTP error response code: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an HTTP error response code: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:14:10)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:132:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.created\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofCreatedVc = klona(validVc);\n          delete noProofCreatedVc.proof.created;\n          const body = createRequestBody({vc: noProofCreatedVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "-y1BEUFkeLgU_Kdcfq_Oi",
              "ctx": null,
              "_testId": "urn:uuid:7ddc7437-74bd-47e3-9ccb-71ba808ff922",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"proof.created\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 45244,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 59,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.created\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofCreatedVc = klona(validVc);\n          delete noProofCreatedVc.proof.created;\n          const body = createRequestBody({vc: noProofCreatedVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "YpwS-LsvTmU_ZBkUni1Q8",
              "ctx": null,
              "_testId": "urn:uuid:959bb255-7f6f-4adc-ae26-01ad7287e769",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trential",
                "rowId": "MUST not verify if \"proof.created\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 51838,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2609,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.created\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofCreatedVc = klona(validVc);\n          delete noProofCreatedVc.proof.created;\n          const body = createRequestBody({vc: noProofCreatedVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "9uBiF0u9yrJILQdZrevKA",
              "ctx": null,
              "_testId": "urn:uuid:e08985b3-9f47-4f92-8b99-630e09527401",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "MUST not verify if \"proof.created\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 72352,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 44,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 05 Jan 2025 05:11:17 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '8', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=JkzoIPOWvxnMduhzj6N3cMVd46qOqjy1PVFNzT0r8yMK88Rox33cVDdC3OxV0I7bQiM1ht60hGoTx6EAfrLlBsNma%2BS9%2Brb7kGuvp9CkwJy6KlhsUBJaHpbBZDsSZb7lHvUuc9WtqYIsmLy%2FBaa3\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '8fd0f77fccd5fa21-ORD', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=2849&min_rtt=1808&rtt_var=1114&sent=32&recv=20&lost=0&retrans=0&sent_bytes=22050&recv_bytes=9604&delivery_rate=1574421&cwnd=257&unsent_bytes=0&cid=86901cd48417d354&ts=644&x=0\"', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 05 Jan 2025 05:11:17 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '8', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=JkzoIPOWvxnMduhzj6N3cMVd46qOqjy1PVFNzT0r8yMK88Rox33cVDdC3OxV0I7bQiM1ht60hGoTx6EAfrLlBsNma%2BS9%2Brb7kGuvp9CkwJy6KlhsUBJaHpbBZDsSZb7lHvUuc9WtqYIsmLy%2FBaa3\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '8fd0f77fccd5fa21-ORD', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=2849&min_rtt=1808&rtt_var=1114&sent=32&recv=20&lost=0&retrans=0&sent_bytes=22050&recv_bytes=9604&delivery_rate=1574421&cwnd=257&unsent_bytes=0&cid=86901cd48417d354&ts=644&x=0\"', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:12:14)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:132:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ]
        },
        {
          "id": "MUST not verify if \"proof.verificationMethod\" property is missing.",
          "cells": [
            {
              "type": "test",
              "title": "MUST not verify if \"proof.verificationMethod\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofVerificationMethodVc = klona(validVc);\n          delete noProofVerificationMethodVc.proof.verificationMethod;\n          const body = createRequestBody({vc: noProofVerificationMethodVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "GxzXjrrn6fYdu6CdWfWRT",
              "ctx": null,
              "_testId": "urn:uuid:53f6666a-3716-4a09-bb50-eda7c7d572ab",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "ACA-py",
                "rowId": "MUST not verify if \"proof.verificationMethod\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4772,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 258,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected status code 400 or 422.: expected 500 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 500,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Expected status code 400 or 422.: expected 500 to be one of [ 400, 422 ]\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:15:26)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:144:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.verificationMethod\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofVerificationMethodVc = klona(validVc);\n          delete noProofVerificationMethodVc.proof.verificationMethod;\n          const body = createRequestBody({vc: noProofVerificationMethodVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "KfVxuXJq7Q8gTujeU9KkI",
              "ctx": null,
              "_testId": "urn:uuid:3727b3ff-b326-4eb7-ba24-bac8fa7e8d29",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "MUST not verify if \"proof.verificationMethod\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7369,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 20,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected status code 400 or 422.: expected 404 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 404,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Expected status code 400 or 422.: expected 404 to be one of [ 400, 422 ]\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:15:26)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:144:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.verificationMethod\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofVerificationMethodVc = klona(validVc);\n          delete noProofVerificationMethodVc.proof.verificationMethod;\n          const body = createRequestBody({vc: noProofVerificationMethodVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "WVyPSaO_o-99bqJElog3P",
              "ctx": null,
              "_testId": "urn:uuid:9ef8ab5b-f2f7-4a07-a2c9-12801da006c3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST not verify if \"proof.verificationMethod\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11356,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 392,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.verificationMethod\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofVerificationMethodVc = klona(validVc);\n          delete noProofVerificationMethodVc.proof.verificationMethod;\n          const body = createRequestBody({vc: noProofVerificationMethodVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "KhZ7riDdYoRBHWyi6nR1w",
              "ctx": null,
              "_testId": "urn:uuid:b6214777-02b1-454f-87cf-107d3cce4ada",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST not verify if \"proof.verificationMethod\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25308,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 185,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.verificationMethod\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofVerificationMethodVc = klona(validVc);\n          delete noProofVerificationMethodVc.proof.verificationMethod;\n          const body = createRequestBody({vc: noProofVerificationMethodVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "bfe5DH-bYGqh4ddPcLhb8",
              "ctx": null,
              "_testId": "urn:uuid:2e520dbd-ecb3-4bb6-93f5-8cbc0cfa76bb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Credentials Consortium",
                "rowId": "MUST not verify if \"proof.verificationMethod\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27837,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 56,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.verificationMethod\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofVerificationMethodVc = klona(validVc);\n          delete noProofVerificationMethodVc.proof.verificationMethod;\n          const body = createRequestBody({vc: noProofVerificationMethodVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "c28B6BA2yLEthC9IBC0y9",
              "ctx": null,
              "_testId": "urn:uuid:5e047bb9-cae8-4151-a45f-c7d8c92e24d1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "MUST not verify if \"proof.verificationMethod\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29798,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 62,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.verificationMethod\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofVerificationMethodVc = klona(validVc);\n          delete noProofVerificationMethodVc.proof.verificationMethod;\n          const body = createRequestBody({vc: noProofVerificationMethodVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "SFExdScoyLNRqQxssdJPY",
              "ctx": null,
              "_testId": "urn:uuid:0d6fb625-d90e-451b-b6b2-30148b627e4c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Gen Digital",
                "rowId": "MUST not verify if \"proof.verificationMethod\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33013,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 18,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.verificationMethod\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofVerificationMethodVc = klona(validVc);\n          delete noProofVerificationMethodVc.proof.verificationMethod;\n          const body = createRequestBody({vc: noProofVerificationMethodVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "LRsbuCXWcbxtK3ce5bVNh",
              "ctx": null,
              "_testId": "urn:uuid:b773202d-ce41-4637-8bf1-77e616e52ac3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "MUST not verify if \"proof.verificationMethod\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 34375,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 60,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.verificationMethod\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofVerificationMethodVc = klona(validVc);\n          delete noProofVerificationMethodVc.proof.verificationMethod;\n          const body = createRequestBody({vc: noProofVerificationMethodVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "XVhcHeGrozFAqf5Mjb4dn",
              "ctx": null,
              "_testId": "urn:uuid:632fca85-1e32-4df1-8776-2e8e3fdd1c16",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Mavennet",
                "rowId": "MUST not verify if \"proof.verificationMethod\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36798,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 13,
              "state": "failed",
              "err": {
                "response": {},
                "request": {},
                "options": {
                  "credentials": "same-origin",
                  "headers": {},
                  "body": {},
                  "method": "POST",
                  "agent": {
                    "_events": {},
                    "_eventsCount": 2,
                    "defaultPort": 443,
                    "protocol": "https:",
                    "options": {
                      "rejectUnauthorized": false,
                      "noDelay": true,
                      "path": null
                    },
                    "requests": {},
                    "sockets": {},
                    "freeSockets": {},
                    "keepAliveMsecs": 1000,
                    "keepAlive": false,
                    "maxSockets": null,
                    "maxFreeSockets": 256,
                    "scheduling": "lifo",
                    "maxTotalSockets": null,
                    "totalSocketCount": 0,
                    "maxCachedSessions": 100,
                    "_sessionCache": {
                      "map": {},
                      "list": []
                    }
                  },
                  "hooks": {
                    "beforeRequest": [],
                    "beforeRetry": [],
                    "beforeError": [],
                    "afterResponse": []
                  },
                  "prefixUrl": "",
                  "retry": {
                    "limit": 2,
                    "methods": [
                      "get",
                      "put",
                      "head",
                      "delete",
                      "options",
                      "trace"
                    ],
                    "statusCodes": [
                      408,
                      413,
                      429,
                      500,
                      502,
                      503,
                      504
                    ],
                    "afterStatusCodes": [
                      413,
                      429,
                      503
                    ],
                    "maxRetryAfter": null,
                    "backoffLimit": null
                  },
                  "throwHttpErrors": true,
                  "timeout": 10000,
                  "signal": {},
                  "duplex": "half"
                },
                "name": "HTTPError",
                "requestUrl": "https://api.staging.refiner.neoflow.energy/v1/auth",
                "status": 403
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.verificationMethod\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofVerificationMethodVc = klona(validVc);\n          delete noProofVerificationMethodVc.proof.verificationMethod;\n          const body = createRequestBody({vc: noProofVerificationMethodVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "0VJ519eb2h6-zOKduTF6f",
              "ctx": null,
              "_testId": "urn:uuid:21137498-20d7-4eea-9eea-cd12426defbd",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "MUST not verify if \"proof.verificationMethod\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 38880,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 110,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.verificationMethod\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofVerificationMethodVc = klona(validVc);\n          delete noProofVerificationMethodVc.proof.verificationMethod;\n          const body = createRequestBody({vc: noProofVerificationMethodVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "GNqLPl0Q6JzyDDZzjv6s1",
              "ctx": null,
              "_testId": "urn:uuid:7dab9948-b0f6-4889-986f-2589165fd1cf",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SecureKey",
                "rowId": "MUST not verify if \"proof.verificationMethod\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44436,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 47,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an HTTP error response code: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an HTTP error response code: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:14:10)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:144:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.verificationMethod\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofVerificationMethodVc = klona(validVc);\n          delete noProofVerificationMethodVc.proof.verificationMethod;\n          const body = createRequestBody({vc: noProofVerificationMethodVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "-y1BEUFkeLgU_Kdcfq_Oi",
              "ctx": null,
              "_testId": "urn:uuid:161aa62b-4b0f-4e37-88cf-f2db9d9a6608",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"proof.verificationMethod\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 45304,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 44,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.verificationMethod\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofVerificationMethodVc = klona(validVc);\n          delete noProofVerificationMethodVc.proof.verificationMethod;\n          const body = createRequestBody({vc: noProofVerificationMethodVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "YpwS-LsvTmU_ZBkUni1Q8",
              "ctx": null,
              "_testId": "urn:uuid:923a5846-13bc-4d95-8c0d-526ddab2d19d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trential",
                "rowId": "MUST not verify if \"proof.verificationMethod\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 54447,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 943,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.verificationMethod\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofVerificationMethodVc = klona(validVc);\n          delete noProofVerificationMethodVc.proof.verificationMethod;\n          const body = createRequestBody({vc: noProofVerificationMethodVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "9uBiF0u9yrJILQdZrevKA",
              "ctx": null,
              "_testId": "urn:uuid:5e825388-89ae-4c09-8e1e-0c5d47d51dc7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "MUST not verify if \"proof.verificationMethod\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 72397,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 42,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 05 Jan 2025 05:11:17 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '7', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=iSmSXmHMILJoVHE79BIIr8%2FplREZsB0FVuaPl27FgBMTWhMyN3t7SpLAU55S26YZylnk2wsBjT9ybyx87FAZI8qLBHQKmnURZ2uDNfbZ7MYWo0%2BC1pfb9S5lSlVtaaLlDNLjYwHmCsEZZ3IfaP5T\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '8fd0f7800d63fa21-ORD', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=2884&min_rtt=1808&rtt_var=1034&sent=36&recv=22&lost=0&retrans=0&sent_bytes=24779&recv_bytes=10707&delivery_rate=1574421&cwnd=257&unsent_bytes=0&cid=86901cd48417d354&ts=687&x=0\"', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 05 Jan 2025 05:11:17 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '7', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=iSmSXmHMILJoVHE79BIIr8%2FplREZsB0FVuaPl27FgBMTWhMyN3t7SpLAU55S26YZylnk2wsBjT9ybyx87FAZI8qLBHQKmnURZ2uDNfbZ7MYWo0%2BC1pfb9S5lSlVtaaLlDNLjYwHmCsEZZ3IfaP5T\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '8fd0f7800d63fa21-ORD', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=2884&min_rtt=1808&rtt_var=1034&sent=36&recv=22&lost=0&retrans=0&sent_bytes=24779&recv_bytes=10707&delivery_rate=1574421&cwnd=257&unsent_bytes=0&cid=86901cd48417d354&ts=687&x=0\"', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:12:14)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:144:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ]
        },
        {
          "id": "MUST not verify if \"proof.proofValue\" property is missing.",
          "cells": [
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofValue\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofValueVc = klona(validVc);\n          delete noProofValueVc.proof.proofValue;\n          const body = createRequestBody({vc: noProofValueVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "GxzXjrrn6fYdu6CdWfWRT",
              "ctx": null,
              "_testId": "urn:uuid:0b7f90c4-73db-41aa-ac70-f531e6d9cc37",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "ACA-py",
                "rowId": "MUST not verify if \"proof.proofValue\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5030,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 203,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected status code 400 or 422.: expected 500 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 500,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Expected status code 400 or 422.: expected 500 to be one of [ 400, 422 ]\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:15:26)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:156:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofValue\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofValueVc = klona(validVc);\n          delete noProofValueVc.proof.proofValue;\n          const body = createRequestBody({vc: noProofValueVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "KfVxuXJq7Q8gTujeU9KkI",
              "ctx": null,
              "_testId": "urn:uuid:ed03880e-6c2d-4e31-b52f-03cdd30cb0fb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "MUST not verify if \"proof.proofValue\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7390,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 19,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected status code 400 or 422.: expected 404 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 404,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Expected status code 400 or 422.: expected 404 to be one of [ 400, 422 ]\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:15:26)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:156:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofValue\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofValueVc = klona(validVc);\n          delete noProofValueVc.proof.proofValue;\n          const body = createRequestBody({vc: noProofValueVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "WVyPSaO_o-99bqJElog3P",
              "ctx": null,
              "_testId": "urn:uuid:3deb8127-c667-4b2b-a60c-816e59c06706",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST not verify if \"proof.proofValue\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11749,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 421,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofValue\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofValueVc = klona(validVc);\n          delete noProofValueVc.proof.proofValue;\n          const body = createRequestBody({vc: noProofValueVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "KhZ7riDdYoRBHWyi6nR1w",
              "ctx": null,
              "_testId": "urn:uuid:4b9a2599-117a-4f16-9a18-78fd0eda6fbb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST not verify if \"proof.proofValue\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25493,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 53,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofValue\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofValueVc = klona(validVc);\n          delete noProofValueVc.proof.proofValue;\n          const body = createRequestBody({vc: noProofValueVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "bfe5DH-bYGqh4ddPcLhb8",
              "ctx": null,
              "_testId": "urn:uuid:08161dd6-41f2-4dd8-9873-78dc69328863",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Credentials Consortium",
                "rowId": "MUST not verify if \"proof.proofValue\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27894,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 58,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofValue\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofValueVc = klona(validVc);\n          delete noProofValueVc.proof.proofValue;\n          const body = createRequestBody({vc: noProofValueVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "c28B6BA2yLEthC9IBC0y9",
              "ctx": null,
              "_testId": "urn:uuid:ef6b5252-d7ef-445e-8567-da6edba93b4e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "MUST not verify if \"proof.proofValue\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29860,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 59,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofValue\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofValueVc = klona(validVc);\n          delete noProofValueVc.proof.proofValue;\n          const body = createRequestBody({vc: noProofValueVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "SFExdScoyLNRqQxssdJPY",
              "ctx": null,
              "_testId": "urn:uuid:a9a33563-a921-4d9f-83f1-c5598497f4ec",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Gen Digital",
                "rowId": "MUST not verify if \"proof.proofValue\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33033,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 22,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofValue\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofValueVc = klona(validVc);\n          delete noProofValueVc.proof.proofValue;\n          const body = createRequestBody({vc: noProofValueVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "LRsbuCXWcbxtK3ce5bVNh",
              "ctx": null,
              "_testId": "urn:uuid:75bdf52d-231e-4fa4-92c6-b9976dc171a4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "MUST not verify if \"proof.proofValue\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 34435,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 39,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofValue\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofValueVc = klona(validVc);\n          delete noProofValueVc.proof.proofValue;\n          const body = createRequestBody({vc: noProofValueVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "XVhcHeGrozFAqf5Mjb4dn",
              "ctx": null,
              "_testId": "urn:uuid:fc23df80-0044-4bc9-9c9e-b39c37ef6e03",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Mavennet",
                "rowId": "MUST not verify if \"proof.proofValue\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36812,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 16,
              "state": "failed",
              "err": {
                "response": {},
                "request": {},
                "options": {
                  "credentials": "same-origin",
                  "headers": {},
                  "body": {},
                  "method": "POST",
                  "agent": {
                    "_events": {},
                    "_eventsCount": 2,
                    "defaultPort": 443,
                    "protocol": "https:",
                    "options": {
                      "rejectUnauthorized": false,
                      "noDelay": true,
                      "path": null
                    },
                    "requests": {},
                    "sockets": {},
                    "freeSockets": {},
                    "keepAliveMsecs": 1000,
                    "keepAlive": false,
                    "maxSockets": null,
                    "maxFreeSockets": 256,
                    "scheduling": "lifo",
                    "maxTotalSockets": null,
                    "totalSocketCount": 0,
                    "maxCachedSessions": 100,
                    "_sessionCache": {
                      "map": {},
                      "list": []
                    }
                  },
                  "hooks": {
                    "beforeRequest": [],
                    "beforeRetry": [],
                    "beforeError": [],
                    "afterResponse": []
                  },
                  "prefixUrl": "",
                  "retry": {
                    "limit": 2,
                    "methods": [
                      "get",
                      "put",
                      "head",
                      "delete",
                      "options",
                      "trace"
                    ],
                    "statusCodes": [
                      408,
                      413,
                      429,
                      500,
                      502,
                      503,
                      504
                    ],
                    "afterStatusCodes": [
                      413,
                      429,
                      503
                    ],
                    "maxRetryAfter": null,
                    "backoffLimit": null
                  },
                  "throwHttpErrors": true,
                  "timeout": 10000,
                  "signal": {},
                  "duplex": "half"
                },
                "name": "HTTPError",
                "requestUrl": "https://api.staging.refiner.neoflow.energy/v1/auth",
                "status": 403
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofValue\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofValueVc = klona(validVc);\n          delete noProofValueVc.proof.proofValue;\n          const body = createRequestBody({vc: noProofValueVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "0VJ519eb2h6-zOKduTF6f",
              "ctx": null,
              "_testId": "urn:uuid:18e74d8d-be20-42ab-9421-6dd14ca2a574",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "MUST not verify if \"proof.proofValue\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 38990,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 110,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofValue\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofValueVc = klona(validVc);\n          delete noProofValueVc.proof.proofValue;\n          const body = createRequestBody({vc: noProofValueVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "GNqLPl0Q6JzyDDZzjv6s1",
              "ctx": null,
              "_testId": "urn:uuid:fd1a2d33-cf2a-4a8b-881f-668c49d11072",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SecureKey",
                "rowId": "MUST not verify if \"proof.proofValue\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44483,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 24,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an HTTP error response code: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an HTTP error response code: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:14:10)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:156:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofValue\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofValueVc = klona(validVc);\n          delete noProofValueVc.proof.proofValue;\n          const body = createRequestBody({vc: noProofValueVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "-y1BEUFkeLgU_Kdcfq_Oi",
              "ctx": null,
              "_testId": "urn:uuid:065f6434-0e1a-4a06-b9d8-7e09d9aa837b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"proof.proofValue\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 45347,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 42,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofValue\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofValueVc = klona(validVc);\n          delete noProofValueVc.proof.proofValue;\n          const body = createRequestBody({vc: noProofValueVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "YpwS-LsvTmU_ZBkUni1Q8",
              "ctx": null,
              "_testId": "urn:uuid:d725378f-e8d2-4333-af9f-3f90e69c8643",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trential",
                "rowId": "MUST not verify if \"proof.proofValue\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 55390,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2164,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofValue\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofValueVc = klona(validVc);\n          delete noProofValueVc.proof.proofValue;\n          const body = createRequestBody({vc: noProofValueVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "9uBiF0u9yrJILQdZrevKA",
              "ctx": null,
              "_testId": "urn:uuid:1f4adec2-326a-44fe-a3ce-3dc17108f6b1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "MUST not verify if \"proof.proofValue\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 72440,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 50,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 05 Jan 2025 05:11:17 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '15', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=hCRyrzZl6%2BZsIXJsnnjY%2BNU7vXMfjo1WHDKvgi9DXa56HhrwepAN0oKTiH%2F2eop6OsR0KDyd%2FC%2FNKF28Y5SyZangDnLLzLkxbUX7JxZn2cUpcMJCbAqtZQOo4WTA9bZMG%2FFku2bquL%2FuoA9QRYUs\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '8fd0f7804df3fa21-ORD', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=2850&min_rtt=1808&rtt_var=945&sent=40&recv=24&lost=0&retrans=0&sent_bytes=27507&recv_bytes=11834&delivery_rate=1574421&cwnd=257&unsent_bytes=0&cid=86901cd48417d354&ts=736&x=0\"', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 05 Jan 2025 05:11:17 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '15', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=hCRyrzZl6%2BZsIXJsnnjY%2BNU7vXMfjo1WHDKvgi9DXa56HhrwepAN0oKTiH%2F2eop6OsR0KDyd%2FC%2FNKF28Y5SyZangDnLLzLkxbUX7JxZn2cUpcMJCbAqtZQOo4WTA9bZMG%2FFku2bquL%2FuoA9QRYUs\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '8fd0f7804df3fa21-ORD', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=2850&min_rtt=1808&rtt_var=945&sent=40&recv=24&lost=0&retrans=0&sent_bytes=27507&recv_bytes=11834&delivery_rate=1574421&cwnd=257&unsent_bytes=0&cid=86901cd48417d354&ts=736&x=0\"', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:12:14)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:156:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ]
        },
        {
          "id": "MUST not verify if \"proof.proofPurpose\" property is missing.",
          "cells": [
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofPurpose\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofPurposeVc = klona(validVc);\n          delete noProofPurposeVc.proof.proofPurpose;\n          const body = createRequestBody({vc: noProofPurposeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "GxzXjrrn6fYdu6CdWfWRT",
              "ctx": null,
              "_testId": "urn:uuid:39da9a3b-7e3f-4b89-b226-f8cf31d99060",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "ACA-py",
                "rowId": "MUST not verify if \"proof.proofPurpose\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5233,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 196,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected status code 400 or 422.: expected 500 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 500,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Expected status code 400 or 422.: expected 500 to be one of [ 400, 422 ]\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:15:26)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:168:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofPurpose\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofPurposeVc = klona(validVc);\n          delete noProofPurposeVc.proof.proofPurpose;\n          const body = createRequestBody({vc: noProofPurposeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "KfVxuXJq7Q8gTujeU9KkI",
              "ctx": null,
              "_testId": "urn:uuid:d45def1d-018d-45a5-afdd-8e21bd9a5bd0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "MUST not verify if \"proof.proofPurpose\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7409,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 19,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected status code 400 or 422.: expected 404 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 404,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Expected status code 400 or 422.: expected 404 to be one of [ 400, 422 ]\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:15:26)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:168:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofPurpose\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofPurposeVc = klona(validVc);\n          delete noProofPurposeVc.proof.proofPurpose;\n          const body = createRequestBody({vc: noProofPurposeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "WVyPSaO_o-99bqJElog3P",
              "ctx": null,
              "_testId": "urn:uuid:e0cbf522-05a8-43c3-822b-f7038864c73a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST not verify if \"proof.proofPurpose\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 12170,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 391,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofPurpose\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofPurposeVc = klona(validVc);\n          delete noProofPurposeVc.proof.proofPurpose;\n          const body = createRequestBody({vc: noProofPurposeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "KhZ7riDdYoRBHWyi6nR1w",
              "ctx": null,
              "_testId": "urn:uuid:39774547-3e1a-4ebd-94ec-a1ad7354910d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST not verify if \"proof.proofPurpose\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25547,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 51,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofPurpose\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofPurposeVc = klona(validVc);\n          delete noProofPurposeVc.proof.proofPurpose;\n          const body = createRequestBody({vc: noProofPurposeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "bfe5DH-bYGqh4ddPcLhb8",
              "ctx": null,
              "_testId": "urn:uuid:91ac334f-ff2e-4dcb-ac88-4d4dee17e081",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Credentials Consortium",
                "rowId": "MUST not verify if \"proof.proofPurpose\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27953,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 22,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofPurpose\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofPurposeVc = klona(validVc);\n          delete noProofPurposeVc.proof.proofPurpose;\n          const body = createRequestBody({vc: noProofPurposeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "c28B6BA2yLEthC9IBC0y9",
              "ctx": null,
              "_testId": "urn:uuid:0a7f34b1-ee17-4828-a3f4-02f3a668a49b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "MUST not verify if \"proof.proofPurpose\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29919,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 61,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofPurpose\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofPurposeVc = klona(validVc);\n          delete noProofPurposeVc.proof.proofPurpose;\n          const body = createRequestBody({vc: noProofPurposeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "SFExdScoyLNRqQxssdJPY",
              "ctx": null,
              "_testId": "urn:uuid:d199cf9e-dd25-44dc-9dce-d1e61a91aa15",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Gen Digital",
                "rowId": "MUST not verify if \"proof.proofPurpose\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33056,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 18,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofPurpose\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofPurposeVc = klona(validVc);\n          delete noProofPurposeVc.proof.proofPurpose;\n          const body = createRequestBody({vc: noProofPurposeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "LRsbuCXWcbxtK3ce5bVNh",
              "ctx": null,
              "_testId": "urn:uuid:d1d007f5-89df-4653-9dda-a1f8250a48cf",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "MUST not verify if \"proof.proofPurpose\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 34474,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 63,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofPurpose\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofPurposeVc = klona(validVc);\n          delete noProofPurposeVc.proof.proofPurpose;\n          const body = createRequestBody({vc: noProofPurposeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "XVhcHeGrozFAqf5Mjb4dn",
              "ctx": null,
              "_testId": "urn:uuid:8344caf4-8c0a-448c-aff0-6ed0206b18f7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Mavennet",
                "rowId": "MUST not verify if \"proof.proofPurpose\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36828,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 14,
              "state": "failed",
              "err": {
                "response": {},
                "request": {},
                "options": {
                  "credentials": "same-origin",
                  "headers": {},
                  "body": {},
                  "method": "POST",
                  "agent": {
                    "_events": {},
                    "_eventsCount": 2,
                    "defaultPort": 443,
                    "protocol": "https:",
                    "options": {
                      "rejectUnauthorized": false,
                      "noDelay": true,
                      "path": null
                    },
                    "requests": {},
                    "sockets": {},
                    "freeSockets": {},
                    "keepAliveMsecs": 1000,
                    "keepAlive": false,
                    "maxSockets": null,
                    "maxFreeSockets": 256,
                    "scheduling": "lifo",
                    "maxTotalSockets": null,
                    "totalSocketCount": 0,
                    "maxCachedSessions": 100,
                    "_sessionCache": {
                      "map": {},
                      "list": []
                    }
                  },
                  "hooks": {
                    "beforeRequest": [],
                    "beforeRetry": [],
                    "beforeError": [],
                    "afterResponse": []
                  },
                  "prefixUrl": "",
                  "retry": {
                    "limit": 2,
                    "methods": [
                      "get",
                      "put",
                      "head",
                      "delete",
                      "options",
                      "trace"
                    ],
                    "statusCodes": [
                      408,
                      413,
                      429,
                      500,
                      502,
                      503,
                      504
                    ],
                    "afterStatusCodes": [
                      413,
                      429,
                      503
                    ],
                    "maxRetryAfter": null,
                    "backoffLimit": null
                  },
                  "throwHttpErrors": true,
                  "timeout": 10000,
                  "signal": {},
                  "duplex": "half"
                },
                "name": "HTTPError",
                "requestUrl": "https://api.staging.refiner.neoflow.energy/v1/auth",
                "status": 403
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofPurpose\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofPurposeVc = klona(validVc);\n          delete noProofPurposeVc.proof.proofPurpose;\n          const body = createRequestBody({vc: noProofPurposeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "0VJ519eb2h6-zOKduTF6f",
              "ctx": null,
              "_testId": "urn:uuid:bff78de2-92c7-4f23-a76f-1da7fe285d6b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "MUST not verify if \"proof.proofPurpose\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 39101,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 110,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofPurpose\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofPurposeVc = klona(validVc);\n          delete noProofPurposeVc.proof.proofPurpose;\n          const body = createRequestBody({vc: noProofPurposeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "GNqLPl0Q6JzyDDZzjv6s1",
              "ctx": null,
              "_testId": "urn:uuid:2a49f81a-9eee-4a97-ae86-a35a499313bc",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SecureKey",
                "rowId": "MUST not verify if \"proof.proofPurpose\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44507,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 6,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an HTTP error response code: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an HTTP error response code: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:14:10)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:168:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofPurpose\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofPurposeVc = klona(validVc);\n          delete noProofPurposeVc.proof.proofPurpose;\n          const body = createRequestBody({vc: noProofPurposeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "-y1BEUFkeLgU_Kdcfq_Oi",
              "ctx": null,
              "_testId": "urn:uuid:ddc2933c-3af1-4a01-a7bc-2b3a927659a5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"proof.proofPurpose\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 45389,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 44,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofPurpose\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofPurposeVc = klona(validVc);\n          delete noProofPurposeVc.proof.proofPurpose;\n          const body = createRequestBody({vc: noProofPurposeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "YpwS-LsvTmU_ZBkUni1Q8",
              "ctx": null,
              "_testId": "urn:uuid:9ac023fd-63fc-4a88-9f6c-cb7c2f6af754",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trential",
                "rowId": "MUST not verify if \"proof.proofPurpose\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 57555,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 231,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofPurpose\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofPurposeVc = klona(validVc);\n          delete noProofPurposeVc.proof.proofPurpose;\n          const body = createRequestBody({vc: noProofPurposeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "9uBiF0u9yrJILQdZrevKA",
              "ctx": null,
              "_testId": "urn:uuid:5f66abe9-9413-4909-85b5-f75c2edd8c8b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "MUST not verify if \"proof.proofPurpose\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 72491,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 43,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 05 Jan 2025 05:11:17 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '8', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=%2By7m7%2FlonJCGHb1Dp3QJiQo5Rrzom6TbgPIOl%2B%2FUxl1DtrbSg7irJuHcIGqTJ%2FIOOTIxlRILw98wZZB7KLF505BT9a%2Fpq6NG5yDdQSko75JdtMLyFTObgmov3A0Py675%2BbMZ0LnUJ5Oo5nHhNdvW\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '8fd0f780ae9bfa21-ORD', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=2904&min_rtt=1808&rtt_var=817&sent=43&recv=26&lost=0&retrans=0&sent_bytes=30245&recv_bytes=13033&delivery_rate=1574421&cwnd=257&unsent_bytes=0&cid=86901cd48417d354&ts=782&x=0\"', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 05 Jan 2025 05:11:17 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '8', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=%2By7m7%2FlonJCGHb1Dp3QJiQo5Rrzom6TbgPIOl%2B%2FUxl1DtrbSg7irJuHcIGqTJ%2FIOOTIxlRILw98wZZB7KLF505BT9a%2Fpq6NG5yDdQSko75JdtMLyFTObgmov3A0Py675%2BbMZ0LnUJ5Oo5nHhNdvW\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '8fd0f780ae9bfa21-ORD', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=2904&min_rtt=1808&rtt_var=817&sent=43&recv=26&lost=0&retrans=0&sent_bytes=30245&recv_bytes=13033&delivery_rate=1574421&cwnd=257&unsent_bytes=0&cid=86901cd48417d354&ts=782&x=0\"', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:12:14)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:168:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ]
        },
        {
          "id": "MUST not verify if \"@context\" is not an array.",
          "cells": [
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidContextTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidContextType of invalidContextTypes) {\n          copyVc['@context'] = invalidContextType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "GxzXjrrn6fYdu6CdWfWRT",
              "ctx": null,
              "_testId": "urn:uuid:3cf9e570-7a91-49b3-8464-7555852c0b61",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "ACA-py",
                "rowId": "MUST not verify if \"@context\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5430,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 207,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected status code 400 or 422.: expected 500 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 500,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Expected status code 400 or 422.: expected 500 to be one of [ 400, 422 ]\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:15:26)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:181:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidContextTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidContextType of invalidContextTypes) {\n          copyVc['@context'] = invalidContextType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "KfVxuXJq7Q8gTujeU9KkI",
              "ctx": null,
              "_testId": "urn:uuid:76675b8d-c984-4d6b-a33c-149fcbe8194d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "MUST not verify if \"@context\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7428,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 18,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected status code 400 or 422.: expected 404 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 404,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Expected status code 400 or 422.: expected 404 to be one of [ 400, 422 ]\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:15:26)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:181:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidContextTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidContextType of invalidContextTypes) {\n          copyVc['@context'] = invalidContextType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "WVyPSaO_o-99bqJElog3P",
              "ctx": null,
              "_testId": "urn:uuid:177e4b82-de4d-471f-a535-2257d08496b3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST not verify if \"@context\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 12560,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1265,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidContextTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidContextType of invalidContextTypes) {\n          copyVc['@context'] = invalidContextType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "KhZ7riDdYoRBHWyi6nR1w",
              "ctx": null,
              "_testId": "urn:uuid:a2c0366c-3f4a-4a11-88c8-dc030fd5f352",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST not verify if \"@context\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25598,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 269,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidContextTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidContextType of invalidContextTypes) {\n          copyVc['@context'] = invalidContextType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "bfe5DH-bYGqh4ddPcLhb8",
              "ctx": null,
              "_testId": "urn:uuid:b036ac0d-1d50-4a5b-acb6-bee66d0aec07",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Credentials Consortium",
                "rowId": "MUST not verify if \"@context\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27976,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 366,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidContextTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidContextType of invalidContextTypes) {\n          copyVc['@context'] = invalidContextType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "c28B6BA2yLEthC9IBC0y9",
              "ctx": null,
              "_testId": "urn:uuid:c8cabd0b-f5b6-4cf2-81b1-60a6649052a0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "MUST not verify if \"@context\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29981,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 523,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidContextTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidContextType of invalidContextTypes) {\n          copyVc['@context'] = invalidContextType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "SFExdScoyLNRqQxssdJPY",
              "ctx": null,
              "_testId": "urn:uuid:6d0d5e6b-2104-4e20-98b7-f31b60f20bda",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Gen Digital",
                "rowId": "MUST not verify if \"@context\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33074,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 135,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidContextTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidContextType of invalidContextTypes) {\n          copyVc['@context'] = invalidContextType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "LRsbuCXWcbxtK3ce5bVNh",
              "ctx": null,
              "_testId": "urn:uuid:24f666df-0990-47c3-855a-f07d432e35b2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "MUST not verify if \"@context\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 34538,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 361,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidContextTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidContextType of invalidContextTypes) {\n          copyVc['@context'] = invalidContextType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "XVhcHeGrozFAqf5Mjb4dn",
              "ctx": null,
              "_testId": "urn:uuid:1efea43e-d99f-4eba-ab38-4980e9b1084f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Mavennet",
                "rowId": "MUST not verify if \"@context\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36843,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 13,
              "state": "failed",
              "err": {
                "response": {},
                "request": {},
                "options": {
                  "credentials": "same-origin",
                  "headers": {},
                  "body": {},
                  "method": "POST",
                  "agent": {
                    "_events": {},
                    "_eventsCount": 2,
                    "defaultPort": 443,
                    "protocol": "https:",
                    "options": {
                      "rejectUnauthorized": false,
                      "noDelay": true,
                      "path": null
                    },
                    "requests": {},
                    "sockets": {},
                    "freeSockets": {},
                    "keepAliveMsecs": 1000,
                    "keepAlive": false,
                    "maxSockets": null,
                    "maxFreeSockets": 256,
                    "scheduling": "lifo",
                    "maxTotalSockets": null,
                    "totalSocketCount": 0,
                    "maxCachedSessions": 100,
                    "_sessionCache": {
                      "map": {},
                      "list": []
                    }
                  },
                  "hooks": {
                    "beforeRequest": [],
                    "beforeRetry": [],
                    "beforeError": [],
                    "afterResponse": []
                  },
                  "prefixUrl": "",
                  "retry": {
                    "limit": 2,
                    "methods": [
                      "get",
                      "put",
                      "head",
                      "delete",
                      "options",
                      "trace"
                    ],
                    "statusCodes": [
                      408,
                      413,
                      429,
                      500,
                      502,
                      503,
                      504
                    ],
                    "afterStatusCodes": [
                      413,
                      429,
                      503
                    ],
                    "maxRetryAfter": null,
                    "backoffLimit": null
                  },
                  "throwHttpErrors": true,
                  "timeout": 10000,
                  "signal": {},
                  "duplex": "half"
                },
                "name": "HTTPError",
                "requestUrl": "https://api.staging.refiner.neoflow.energy/v1/auth",
                "status": 403
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidContextTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidContextType of invalidContextTypes) {\n          copyVc['@context'] = invalidContextType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "0VJ519eb2h6-zOKduTF6f",
              "ctx": null,
              "_testId": "urn:uuid:0b6be91a-68f6-4227-8b34-bf55c24fbfef",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "MUST not verify if \"@context\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 39211,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 921,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidContextTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidContextType of invalidContextTypes) {\n          copyVc['@context'] = invalidContextType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "GNqLPl0Q6JzyDDZzjv6s1",
              "ctx": null,
              "_testId": "urn:uuid:048b2cb8-353f-4997-9cfb-c4ee6eff899f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SecureKey",
                "rowId": "MUST not verify if \"@context\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44513,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 79,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an HTTP error response code: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an HTTP error response code: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:14:10)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:181:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidContextTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidContextType of invalidContextTypes) {\n          copyVc['@context'] = invalidContextType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "-y1BEUFkeLgU_Kdcfq_Oi",
              "ctx": null,
              "_testId": "urn:uuid:298756de-ef25-443c-a11b-dfa2896962d6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"@context\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 45434,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 356,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidContextTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidContextType of invalidContextTypes) {\n          copyVc['@context'] = invalidContextType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "YpwS-LsvTmU_ZBkUni1Q8",
              "ctx": null,
              "_testId": "urn:uuid:ac7740e7-a64c-4211-a5d6-8100e7dcb6c9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trential",
                "rowId": "MUST not verify if \"@context\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 57786,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2090,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidContextTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidContextType of invalidContextTypes) {\n          copyVc['@context'] = invalidContextType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "9uBiF0u9yrJILQdZrevKA",
              "ctx": null,
              "_testId": "urn:uuid:6bf78a8a-9741-4c67-a01c-4d056dbccce9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "MUST not verify if \"@context\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 72535,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 54,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 05 Jan 2025 05:11:17 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '20', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=S219B5pm5NQRMhWD8PW9iUBeTzDYxFi6KxkNa4EDTVbF7IlH7MKfL12H11FZmRHKMU3kHedu920mcPGh7xMBRXkJd5I60qvg5P6KO%2FytSystq5oSljvpPWjSOlMP7doLKXy6DLCeNA0TdJoCe62g\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '8fd0f780ef35fa21-ORD', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=2880&min_rtt=1808&rtt_var=825&sent=47&recv=28&lost=0&retrans=0&sent_bytes=32982&recv_bytes=14134&delivery_rate=1574421&cwnd=257&unsent_bytes=0&cid=86901cd48417d354&ts=836&x=0\"', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 05 Jan 2025 05:11:17 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '20', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=S219B5pm5NQRMhWD8PW9iUBeTzDYxFi6KxkNa4EDTVbF7IlH7MKfL12H11FZmRHKMU3kHedu920mcPGh7xMBRXkJd5I60qvg5P6KO%2FytSystq5oSljvpPWjSOlMP7doLKXy6DLCeNA0TdJoCe62g\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '8fd0f780ef35fa21-ORD', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=2880&min_rtt=1808&rtt_var=825&sent=47&recv=28&lost=0&retrans=0&sent_bytes=32982&recv_bytes=14134&delivery_rate=1574421&cwnd=257&unsent_bytes=0&cid=86901cd48417d354&ts=836&x=0\"', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:12:14)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:181:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ]
        },
        {
          "id": "MUST not verify if \"@context\" items are not strings or objects.",
          "cells": [
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" items are not strings or objects.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidContextItemTypes = [[], null, undefined, 10, true];\n          for(const invalidContextItemType of invalidContextItemTypes) {\n            copyVc['@context'] = [invalidContextItemType];\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "GxzXjrrn6fYdu6CdWfWRT",
              "ctx": null,
              "_testId": "urn:uuid:aa2a54da-97fa-4779-901f-7ed6f47a90fb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "ACA-py",
                "rowId": "MUST not verify if \"@context\" items are not strings or objects."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5639,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 319,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected status code 400 or 422.: expected 500 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 500,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Expected status code 400 or 422.: expected 500 to be one of [ 400, 422 ]\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:15:26)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:196:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" items are not strings or objects.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidContextItemTypes = [[], null, undefined, 10, true];\n          for(const invalidContextItemType of invalidContextItemTypes) {\n            copyVc['@context'] = [invalidContextItemType];\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "KfVxuXJq7Q8gTujeU9KkI",
              "ctx": null,
              "_testId": "urn:uuid:5a4366b4-bbe6-4a98-9cbb-b34f2f6d3bb0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "MUST not verify if \"@context\" items are not strings or objects."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7447,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 20,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected status code 400 or 422.: expected 404 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 404,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Expected status code 400 or 422.: expected 404 to be one of [ 400, 422 ]\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:15:26)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:196:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" items are not strings or objects.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidContextItemTypes = [[], null, undefined, 10, true];\n          for(const invalidContextItemType of invalidContextItemTypes) {\n            copyVc['@context'] = [invalidContextItemType];\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "WVyPSaO_o-99bqJElog3P",
              "ctx": null,
              "_testId": "urn:uuid:1cb027bf-67d2-4f49-9e55-0d38db9c3c98",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST not verify if \"@context\" items are not strings or objects."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13826,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 655,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" items are not strings or objects.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidContextItemTypes = [[], null, undefined, 10, true];\n          for(const invalidContextItemType of invalidContextItemTypes) {\n            copyVc['@context'] = [invalidContextItemType];\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "KhZ7riDdYoRBHWyi6nR1w",
              "ctx": null,
              "_testId": "urn:uuid:d69d81ca-e066-438d-952d-bcf78c18f660",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST not verify if \"@context\" items are not strings or objects."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25866,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 229,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" items are not strings or objects.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidContextItemTypes = [[], null, undefined, 10, true];\n          for(const invalidContextItemType of invalidContextItemTypes) {\n            copyVc['@context'] = [invalidContextItemType];\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "bfe5DH-bYGqh4ddPcLhb8",
              "ctx": null,
              "_testId": "urn:uuid:7ac27801-1901-49de-bd3a-7c29365f8cbd",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Credentials Consortium",
                "rowId": "MUST not verify if \"@context\" items are not strings or objects."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28342,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 100,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" items are not strings or objects.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidContextItemTypes = [[], null, undefined, 10, true];\n          for(const invalidContextItemType of invalidContextItemTypes) {\n            copyVc['@context'] = [invalidContextItemType];\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "c28B6BA2yLEthC9IBC0y9",
              "ctx": null,
              "_testId": "urn:uuid:f5267906-19fd-4239-8fa2-d814aa8e9b28",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "MUST not verify if \"@context\" items are not strings or objects."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30504,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 310,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" items are not strings or objects.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidContextItemTypes = [[], null, undefined, 10, true];\n          for(const invalidContextItemType of invalidContextItemTypes) {\n            copyVc['@context'] = [invalidContextItemType];\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "SFExdScoyLNRqQxssdJPY",
              "ctx": null,
              "_testId": "urn:uuid:cf3396ec-1c4c-4c06-affc-1a234f13ba90",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Gen Digital",
                "rowId": "MUST not verify if \"@context\" items are not strings or objects."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33209,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 82,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" items are not strings or objects.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidContextItemTypes = [[], null, undefined, 10, true];\n          for(const invalidContextItemType of invalidContextItemTypes) {\n            copyVc['@context'] = [invalidContextItemType];\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "LRsbuCXWcbxtK3ce5bVNh",
              "ctx": null,
              "_testId": "urn:uuid:96d006cf-e20a-4156-a060-244c63492760",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "MUST not verify if \"@context\" items are not strings or objects."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 34899,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 233,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" items are not strings or objects.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidContextItemTypes = [[], null, undefined, 10, true];\n          for(const invalidContextItemType of invalidContextItemTypes) {\n            copyVc['@context'] = [invalidContextItemType];\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "XVhcHeGrozFAqf5Mjb4dn",
              "ctx": null,
              "_testId": "urn:uuid:05869382-7b1c-4acc-ac05-1e6f7f4509d5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Mavennet",
                "rowId": "MUST not verify if \"@context\" items are not strings or objects."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36856,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 12,
              "state": "failed",
              "err": {
                "response": {},
                "request": {},
                "options": {
                  "credentials": "same-origin",
                  "headers": {},
                  "body": {},
                  "method": "POST",
                  "agent": {
                    "_events": {},
                    "_eventsCount": 2,
                    "defaultPort": 443,
                    "protocol": "https:",
                    "options": {
                      "rejectUnauthorized": false,
                      "noDelay": true,
                      "path": null
                    },
                    "requests": {},
                    "sockets": {},
                    "freeSockets": {},
                    "keepAliveMsecs": 1000,
                    "keepAlive": false,
                    "maxSockets": null,
                    "maxFreeSockets": 256,
                    "scheduling": "lifo",
                    "maxTotalSockets": null,
                    "totalSocketCount": 0,
                    "maxCachedSessions": 100,
                    "_sessionCache": {
                      "map": {},
                      "list": []
                    }
                  },
                  "hooks": {
                    "beforeRequest": [],
                    "beforeRetry": [],
                    "beforeError": [],
                    "afterResponse": []
                  },
                  "prefixUrl": "",
                  "retry": {
                    "limit": 2,
                    "methods": [
                      "get",
                      "put",
                      "head",
                      "delete",
                      "options",
                      "trace"
                    ],
                    "statusCodes": [
                      408,
                      413,
                      429,
                      500,
                      502,
                      503,
                      504
                    ],
                    "afterStatusCodes": [
                      413,
                      429,
                      503
                    ],
                    "maxRetryAfter": null,
                    "backoffLimit": null
                  },
                  "throwHttpErrors": true,
                  "timeout": 10000,
                  "signal": {},
                  "duplex": "half"
                },
                "name": "HTTPError",
                "requestUrl": "https://api.staging.refiner.neoflow.energy/v1/auth",
                "status": 403
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" items are not strings or objects.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidContextItemTypes = [[], null, undefined, 10, true];\n          for(const invalidContextItemType of invalidContextItemTypes) {\n            copyVc['@context'] = [invalidContextItemType];\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "0VJ519eb2h6-zOKduTF6f",
              "ctx": null,
              "_testId": "urn:uuid:3025884e-ac6d-4a05-aee4-a249acf22302",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "MUST not verify if \"@context\" items are not strings or objects."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 40132,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 558,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" items are not strings or objects.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidContextItemTypes = [[], null, undefined, 10, true];\n          for(const invalidContextItemType of invalidContextItemTypes) {\n            copyVc['@context'] = [invalidContextItemType];\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "GNqLPl0Q6JzyDDZzjv6s1",
              "ctx": null,
              "_testId": "urn:uuid:39eb5638-cd02-47b4-8ae3-52661384395d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SecureKey",
                "rowId": "MUST not verify if \"@context\" items are not strings or objects."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44592,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 6,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an HTTP error response code: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an HTTP error response code: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:14:10)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:196:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" items are not strings or objects.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidContextItemTypes = [[], null, undefined, 10, true];\n          for(const invalidContextItemType of invalidContextItemTypes) {\n            copyVc['@context'] = [invalidContextItemType];\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "-y1BEUFkeLgU_Kdcfq_Oi",
              "ctx": null,
              "_testId": "urn:uuid:f5bb5153-9df1-4d68-babc-3371ac4784e0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"@context\" items are not strings or objects."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 45790,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 218,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" items are not strings or objects.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidContextItemTypes = [[], null, undefined, 10, true];\n          for(const invalidContextItemType of invalidContextItemTypes) {\n            copyVc['@context'] = [invalidContextItemType];\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "YpwS-LsvTmU_ZBkUni1Q8",
              "ctx": null,
              "_testId": "urn:uuid:8ad9e689-10d0-4045-9874-1a1d9eaa8c29",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trential",
                "rowId": "MUST not verify if \"@context\" items are not strings or objects."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59877,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1158,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" items are not strings or objects.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidContextItemTypes = [[], null, undefined, 10, true];\n          for(const invalidContextItemType of invalidContextItemTypes) {\n            copyVc['@context'] = [invalidContextItemType];\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "9uBiF0u9yrJILQdZrevKA",
              "ctx": null,
              "_testId": "urn:uuid:4b734fc4-156a-4f78-8256-6f9b6c09bc86",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "MUST not verify if \"@context\" items are not strings or objects."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 72590,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 51,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 05 Jan 2025 05:11:18 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '17', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=YU2PmFBnbWZCnAibJq2OBKaAU9MsU%2FAG9Ku2CvolU%2Fu2IvAqua%2BRcRy%2FhlVF60NBXBSOudrDqbIYhKl55ieODF24NgPLAlMHWsicC6eYaib%2FatIVbe8%2Fjb3YsXmrl1HgGvjoFHcvoH1%2Bpq5MsC%2BZ\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '8fd0f7813832fa21-ORD', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=2761&min_rtt=1808&rtt_var=829&sent=50&recv=30&lost=0&retrans=0&sent_bytes=35735&recv_bytes=15231&delivery_rate=1574421&cwnd=257&unsent_bytes=0&cid=86901cd48417d354&ts=888&x=0\"', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 05 Jan 2025 05:11:18 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '17', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=YU2PmFBnbWZCnAibJq2OBKaAU9MsU%2FAG9Ku2CvolU%2Fu2IvAqua%2BRcRy%2FhlVF60NBXBSOudrDqbIYhKl55ieODF24NgPLAlMHWsicC6eYaib%2FatIVbe8%2Fjb3YsXmrl1HgGvjoFHcvoH1%2Bpq5MsC%2BZ\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '8fd0f7813832fa21-ORD', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=2761&min_rtt=1808&rtt_var=829&sent=50&recv=30&lost=0&retrans=0&sent_bytes=35735&recv_bytes=15231&delivery_rate=1574421&cwnd=257&unsent_bytes=0&cid=86901cd48417d354&ts=888&x=0\"', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:12:14)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:196:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ]
        },
        {
          "id": "MUST not verify if \"type\" is not an array.",
          "cells": [
            {
              "type": "test",
              "title": "MUST not verify if \"type\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidType of invalidTypes) {\n          copyVc.type = invalidType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "GxzXjrrn6fYdu6CdWfWRT",
              "ctx": null,
              "_testId": "urn:uuid:c2b17641-9f6f-4f74-b99d-fba6bfa79e76",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "ACA-py",
                "rowId": "MUST not verify if \"type\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5958,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 270,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected status code 400 or 422.: expected 500 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 500,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Expected status code 400 or 422.: expected 500 to be one of [ 400, 422 ]\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:15:26)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:210:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidType of invalidTypes) {\n          copyVc.type = invalidType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "KfVxuXJq7Q8gTujeU9KkI",
              "ctx": null,
              "_testId": "urn:uuid:11e0a396-77cd-4bde-a3fb-d0bb86c20e3e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "MUST not verify if \"type\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7468,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 19,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected status code 400 or 422.: expected 404 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 404,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Expected status code 400 or 422.: expected 404 to be one of [ 400, 422 ]\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:15:26)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:210:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidType of invalidTypes) {\n          copyVc.type = invalidType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "WVyPSaO_o-99bqJElog3P",
              "ctx": null,
              "_testId": "urn:uuid:c51acc94-9398-402f-a07e-fb22c7298a90",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST not verify if \"type\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14481,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2576,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidType of invalidTypes) {\n          copyVc.type = invalidType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "KhZ7riDdYoRBHWyi6nR1w",
              "ctx": null,
              "_testId": "urn:uuid:a033ec5d-aea6-406d-b393-39d2226409e6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST not verify if \"type\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26096,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 262,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidType of invalidTypes) {\n          copyVc.type = invalidType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "bfe5DH-bYGqh4ddPcLhb8",
              "ctx": null,
              "_testId": "urn:uuid:9af5a5b0-10d9-4f31-b56c-b84ac301b1c9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Credentials Consortium",
                "rowId": "MUST not verify if \"type\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28442,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 122,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidType of invalidTypes) {\n          copyVc.type = invalidType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "c28B6BA2yLEthC9IBC0y9",
              "ctx": null,
              "_testId": "urn:uuid:341de9c3-0add-4752-9755-f544d3726e9f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "MUST not verify if \"type\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30813,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 359,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidType of invalidTypes) {\n          copyVc.type = invalidType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "SFExdScoyLNRqQxssdJPY",
              "ctx": null,
              "_testId": "urn:uuid:4fbee0c5-5c4d-4d19-9191-e81d4316fd6d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Gen Digital",
                "rowId": "MUST not verify if \"type\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33291,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 101,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidType of invalidTypes) {\n          copyVc.type = invalidType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "LRsbuCXWcbxtK3ce5bVNh",
              "ctx": null,
              "_testId": "urn:uuid:0d3c9dd1-a848-42ec-893f-f1c010649504",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "MUST not verify if \"type\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 35132,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 274,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidType of invalidTypes) {\n          copyVc.type = invalidType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "XVhcHeGrozFAqf5Mjb4dn",
              "ctx": null,
              "_testId": "urn:uuid:c4934e36-363e-427d-be6c-0868c07f5030",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Mavennet",
                "rowId": "MUST not verify if \"type\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36869,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 12,
              "state": "failed",
              "err": {
                "response": {},
                "request": {},
                "options": {
                  "credentials": "same-origin",
                  "headers": {},
                  "body": {},
                  "method": "POST",
                  "agent": {
                    "_events": {},
                    "_eventsCount": 2,
                    "defaultPort": 443,
                    "protocol": "https:",
                    "options": {
                      "rejectUnauthorized": false,
                      "noDelay": true,
                      "path": null
                    },
                    "requests": {},
                    "sockets": {},
                    "freeSockets": {},
                    "keepAliveMsecs": 1000,
                    "keepAlive": false,
                    "maxSockets": null,
                    "maxFreeSockets": 256,
                    "scheduling": "lifo",
                    "maxTotalSockets": null,
                    "totalSocketCount": 0,
                    "maxCachedSessions": 100,
                    "_sessionCache": {
                      "map": {},
                      "list": []
                    }
                  },
                  "hooks": {
                    "beforeRequest": [],
                    "beforeRetry": [],
                    "beforeError": [],
                    "afterResponse": []
                  },
                  "prefixUrl": "",
                  "retry": {
                    "limit": 2,
                    "methods": [
                      "get",
                      "put",
                      "head",
                      "delete",
                      "options",
                      "trace"
                    ],
                    "statusCodes": [
                      408,
                      413,
                      429,
                      500,
                      502,
                      503,
                      504
                    ],
                    "afterStatusCodes": [
                      413,
                      429,
                      503
                    ],
                    "maxRetryAfter": null,
                    "backoffLimit": null
                  },
                  "throwHttpErrors": true,
                  "timeout": 10000,
                  "signal": {},
                  "duplex": "half"
                },
                "name": "HTTPError",
                "requestUrl": "https://api.staging.refiner.neoflow.energy/v1/auth",
                "status": 403
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidType of invalidTypes) {\n          copyVc.type = invalidType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "0VJ519eb2h6-zOKduTF6f",
              "ctx": null,
              "_testId": "urn:uuid:492b5b33-49f7-4801-a705-e28a593a9a51",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "MUST not verify if \"type\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 40690,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 672,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidType of invalidTypes) {\n          copyVc.type = invalidType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "GNqLPl0Q6JzyDDZzjv6s1",
              "ctx": null,
              "_testId": "urn:uuid:de42e8f5-962a-46a2-b35c-705bada777ca",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SecureKey",
                "rowId": "MUST not verify if \"type\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44597,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 8,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an HTTP error response code: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an HTTP error response code: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:14:10)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:210:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidType of invalidTypes) {\n          copyVc.type = invalidType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "-y1BEUFkeLgU_Kdcfq_Oi",
              "ctx": null,
              "_testId": "urn:uuid:f3225ae5-bb41-46b9-ad32-1780b65f9b3c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"type\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 46007,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 281,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidType of invalidTypes) {\n          copyVc.type = invalidType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "YpwS-LsvTmU_ZBkUni1Q8",
              "ctx": null,
              "_testId": "urn:uuid:0703a351-1ae9-443c-a9a7-375f34f7adf7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trential",
                "rowId": "MUST not verify if \"type\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 61035,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1390,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidType of invalidTypes) {\n          copyVc.type = invalidType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "9uBiF0u9yrJILQdZrevKA",
              "ctx": null,
              "_testId": "urn:uuid:6ce067a6-0d8f-4c58-95e1-1971ae8553de",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "MUST not verify if \"type\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 72641,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 51,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 05 Jan 2025 05:11:18 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '17', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=v8%2BJwT72zs%2FGGqoDAGXE3IMILJL56RmD590yUOOm83gwqkiRgCOsWsv0zju%2FO9ntCebXV9nHSkXnFK8WLgFPaP7kAtdbNb2D2T1blM4qjyP2tsBa%2BnX%2BVq%2BHMn%2BaN%2Bzvzahi%2Fru5iQH1qdLXxBbR\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '8fd0f7819904fa21-ORD', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=2658&min_rtt=1808&rtt_var=829&sent=53&recv=32&lost=0&retrans=0&sent_bytes=38475&recv_bytes=16428&delivery_rate=1574421&cwnd=257&unsent_bytes=0&cid=86901cd48417d354&ts=940&x=0\"', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 05 Jan 2025 05:11:18 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '17', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=v8%2BJwT72zs%2FGGqoDAGXE3IMILJL56RmD590yUOOm83gwqkiRgCOsWsv0zju%2FO9ntCebXV9nHSkXnFK8WLgFPaP7kAtdbNb2D2T1blM4qjyP2tsBa%2BnX%2BVq%2BHMn%2BaN%2Bzvzahi%2Fru5iQH1qdLXxBbR\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '8fd0f7819904fa21-ORD', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=2658&min_rtt=1808&rtt_var=829&sent=53&recv=32&lost=0&retrans=0&sent_bytes=38475&recv_bytes=16428&delivery_rate=1574421&cwnd=257&unsent_bytes=0&cid=86901cd48417d354&ts=940&x=0\"', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:12:14)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:210:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ]
        },
        {
          "id": "MUST not verify if \"type\" items are not strings.",
          "cells": [
            {
              "type": "test",
              "title": "MUST not verify if \"type\" items are not strings.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypeItemTypes = [[], {}, null, undefined, 10, true];\n        for(const invalidItemType of invalidTypeItemTypes) {\n          copyVc.type = [invalidItemType];\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "GxzXjrrn6fYdu6CdWfWRT",
              "ctx": null,
              "_testId": "urn:uuid:17ffb062-9afd-4417-9d60-4bbcddd50c90",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "ACA-py",
                "rowId": "MUST not verify if \"type\" items are not strings."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6228,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 304,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected status code 400 or 422.: expected 500 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 500,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Expected status code 400 or 422.: expected 500 to be one of [ 400, 422 ]\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:15:26)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:224:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" items are not strings.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypeItemTypes = [[], {}, null, undefined, 10, true];\n        for(const invalidItemType of invalidTypeItemTypes) {\n          copyVc.type = [invalidItemType];\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "KfVxuXJq7Q8gTujeU9KkI",
              "ctx": null,
              "_testId": "urn:uuid:44397367-6008-4390-81e9-ffaaf10e2371",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "MUST not verify if \"type\" items are not strings."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7486,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 19,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected status code 400 or 422.: expected 404 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 404,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Expected status code 400 or 422.: expected 404 to be one of [ 400, 422 ]\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:15:26)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:224:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" items are not strings.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypeItemTypes = [[], {}, null, undefined, 10, true];\n        for(const invalidItemType of invalidTypeItemTypes) {\n          copyVc.type = [invalidItemType];\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "WVyPSaO_o-99bqJElog3P",
              "ctx": null,
              "_testId": "urn:uuid:60db1cac-4aa7-4426-b7d2-2a6e52174414",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST not verify if \"type\" items are not strings."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17057,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2550,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" items are not strings.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypeItemTypes = [[], {}, null, undefined, 10, true];\n        for(const invalidItemType of invalidTypeItemTypes) {\n          copyVc.type = [invalidItemType];\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "KhZ7riDdYoRBHWyi6nR1w",
              "ctx": null,
              "_testId": "urn:uuid:ede56ee8-dd98-4eaf-beae-5ff6d664a734",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST not verify if \"type\" items are not strings."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26357,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 260,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" items are not strings.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypeItemTypes = [[], {}, null, undefined, 10, true];\n        for(const invalidItemType of invalidTypeItemTypes) {\n          copyVc.type = [invalidItemType];\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "bfe5DH-bYGqh4ddPcLhb8",
              "ctx": null,
              "_testId": "urn:uuid:8db28838-b918-4183-a06d-c9763fa0267e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Credentials Consortium",
                "rowId": "MUST not verify if \"type\" items are not strings."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28565,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 122,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" items are not strings.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypeItemTypes = [[], {}, null, undefined, 10, true];\n        for(const invalidItemType of invalidTypeItemTypes) {\n          copyVc.type = [invalidItemType];\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "c28B6BA2yLEthC9IBC0y9",
              "ctx": null,
              "_testId": "urn:uuid:fc48cc4a-99b7-4ac7-b193-ddaf5d5e3681",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "MUST not verify if \"type\" items are not strings."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31172,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 363,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" items are not strings.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypeItemTypes = [[], {}, null, undefined, 10, true];\n        for(const invalidItemType of invalidTypeItemTypes) {\n          copyVc.type = [invalidItemType];\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "SFExdScoyLNRqQxssdJPY",
              "ctx": null,
              "_testId": "urn:uuid:290bdbff-ffc0-4ee0-8f1c-89f0c1f6ffa2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Gen Digital",
                "rowId": "MUST not verify if \"type\" items are not strings."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33392,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 101,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" items are not strings.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypeItemTypes = [[], {}, null, undefined, 10, true];\n        for(const invalidItemType of invalidTypeItemTypes) {\n          copyVc.type = [invalidItemType];\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "LRsbuCXWcbxtK3ce5bVNh",
              "ctx": null,
              "_testId": "urn:uuid:02a21dba-f3da-4e1a-8a95-c005c3d29977",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "MUST not verify if \"type\" items are not strings."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 35407,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 292,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" items are not strings.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypeItemTypes = [[], {}, null, undefined, 10, true];\n        for(const invalidItemType of invalidTypeItemTypes) {\n          copyVc.type = [invalidItemType];\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "XVhcHeGrozFAqf5Mjb4dn",
              "ctx": null,
              "_testId": "urn:uuid:385b70f9-bcff-4c68-9dad-88d5c3564a43",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Mavennet",
                "rowId": "MUST not verify if \"type\" items are not strings."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36882,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 13,
              "state": "failed",
              "err": {
                "response": {},
                "request": {},
                "options": {
                  "credentials": "same-origin",
                  "headers": {},
                  "body": {},
                  "method": "POST",
                  "agent": {
                    "_events": {},
                    "_eventsCount": 2,
                    "defaultPort": 443,
                    "protocol": "https:",
                    "options": {
                      "rejectUnauthorized": false,
                      "noDelay": true,
                      "path": null
                    },
                    "requests": {},
                    "sockets": {},
                    "freeSockets": {},
                    "keepAliveMsecs": 1000,
                    "keepAlive": false,
                    "maxSockets": null,
                    "maxFreeSockets": 256,
                    "scheduling": "lifo",
                    "maxTotalSockets": null,
                    "totalSocketCount": 0,
                    "maxCachedSessions": 100,
                    "_sessionCache": {
                      "map": {},
                      "list": []
                    }
                  },
                  "hooks": {
                    "beforeRequest": [],
                    "beforeRetry": [],
                    "beforeError": [],
                    "afterResponse": []
                  },
                  "prefixUrl": "",
                  "retry": {
                    "limit": 2,
                    "methods": [
                      "get",
                      "put",
                      "head",
                      "delete",
                      "options",
                      "trace"
                    ],
                    "statusCodes": [
                      408,
                      413,
                      429,
                      500,
                      502,
                      503,
                      504
                    ],
                    "afterStatusCodes": [
                      413,
                      429,
                      503
                    ],
                    "maxRetryAfter": null,
                    "backoffLimit": null
                  },
                  "throwHttpErrors": true,
                  "timeout": 10000,
                  "signal": {},
                  "duplex": "half"
                },
                "name": "HTTPError",
                "requestUrl": "https://api.staging.refiner.neoflow.energy/v1/auth",
                "status": 403
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" items are not strings.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypeItemTypes = [[], {}, null, undefined, 10, true];\n        for(const invalidItemType of invalidTypeItemTypes) {\n          copyVc.type = [invalidItemType];\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "0VJ519eb2h6-zOKduTF6f",
              "ctx": null,
              "_testId": "urn:uuid:238407fd-c7ec-4c4c-975f-7fd57ed99a4e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "MUST not verify if \"type\" items are not strings."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 41363,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 672,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" items are not strings.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypeItemTypes = [[], {}, null, undefined, 10, true];\n        for(const invalidItemType of invalidTypeItemTypes) {\n          copyVc.type = [invalidItemType];\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "GNqLPl0Q6JzyDDZzjv6s1",
              "ctx": null,
              "_testId": "urn:uuid:0041a2d4-82ff-4fe2-bcb9-d8f74d18fd56",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SecureKey",
                "rowId": "MUST not verify if \"type\" items are not strings."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44606,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 28,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an HTTP error response code: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an HTTP error response code: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:14:10)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:224:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" items are not strings.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypeItemTypes = [[], {}, null, undefined, 10, true];\n        for(const invalidItemType of invalidTypeItemTypes) {\n          copyVc.type = [invalidItemType];\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "-y1BEUFkeLgU_Kdcfq_Oi",
              "ctx": null,
              "_testId": "urn:uuid:c6b37b7d-87e9-4422-8bd7-7fcaae7fbdbd",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"type\" items are not strings."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 46288,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 259,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" items are not strings.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypeItemTypes = [[], {}, null, undefined, 10, true];\n        for(const invalidItemType of invalidTypeItemTypes) {\n          copyVc.type = [invalidItemType];\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "YpwS-LsvTmU_ZBkUni1Q8",
              "ctx": null,
              "_testId": "urn:uuid:cf18e89b-b27a-4c36-9fe5-888877aa58ec",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trential",
                "rowId": "MUST not verify if \"type\" items are not strings."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 62426,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2124,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" items are not strings.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypeItemTypes = [[], {}, null, undefined, 10, true];\n        for(const invalidItemType of invalidTypeItemTypes) {\n          copyVc.type = [invalidItemType];\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "9uBiF0u9yrJILQdZrevKA",
              "ctx": null,
              "_testId": "urn:uuid:29bdcf22-40f3-4daa-a691-5fedc3a76c31",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "MUST not verify if \"type\" items are not strings."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 72693,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 58,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 05 Jan 2025 05:11:18 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '22', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=3aM8%2BTSphWnC74PCP4xE%2FCTCGoMpgQe7lp3UOTsP7diqSxRiTQ%2FjU3KlW76wG924AB56A8miivE%2FLPc6J7FE7RVfgxxQEf3Jyw%2Bj%2BsedLv3jiUbhMjbppx8Ud%2F5X4ZTxxemsCkwL0qqkURXbxfgU\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '8fd0f781e9b8fa21-ORD', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=2565&min_rtt=1808&rtt_var=807&sent=56&recv=34&lost=0&retrans=0&sent_bytes=41217&recv_bytes=17621&delivery_rate=1574421&cwnd=257&unsent_bytes=0&cid=86901cd48417d354&ts=998&x=0\"', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 05 Jan 2025 05:11:18 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '22', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=3aM8%2BTSphWnC74PCP4xE%2FCTCGoMpgQe7lp3UOTsP7diqSxRiTQ%2FjU3KlW76wG924AB56A8miivE%2FLPc6J7FE7RVfgxxQEf3Jyw%2Bj%2BsedLv3jiUbhMjbppx8Ud%2F5X4ZTxxemsCkwL0qqkURXbxfgU\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '8fd0f781e9b8fa21-ORD', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=2565&min_rtt=1808&rtt_var=807&sent=56&recv=34&lost=0&retrans=0&sent_bytes=41217&recv_bytes=17621&delivery_rate=1574421&cwnd=257&unsent_bytes=0&cid=86901cd48417d354&ts=998&x=0\"', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:12:14)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:224:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ]
        },
        {
          "id": "MUST not verify if \"issuer\" is not an object or a string.",
          "cells": [
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" is not an object or a string.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidIssuerTypes = [[], null, undefined, 10, true];\n          for(const invalidIssuerType of invalidIssuerTypes) {\n            copyVc.issuer = invalidIssuerType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "GxzXjrrn6fYdu6CdWfWRT",
              "ctx": null,
              "_testId": "urn:uuid:8a86bc72-ff0a-4514-9d6f-016d96f2f746",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "ACA-py",
                "rowId": "MUST not verify if \"issuer\" is not an object or a string."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6533,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 204,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected status code 400 or 422.: expected 500 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 500,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Expected status code 400 or 422.: expected 500 to be one of [ 400, 422 ]\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:15:26)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:239:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" is not an object or a string.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidIssuerTypes = [[], null, undefined, 10, true];\n          for(const invalidIssuerType of invalidIssuerTypes) {\n            copyVc.issuer = invalidIssuerType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "KfVxuXJq7Q8gTujeU9KkI",
              "ctx": null,
              "_testId": "urn:uuid:25aae1cf-e31f-4b47-8a08-6ad87aae9b2e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "MUST not verify if \"issuer\" is not an object or a string."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7505,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 19,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected status code 400 or 422.: expected 404 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 404,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Expected status code 400 or 422.: expected 404 to be one of [ 400, 422 ]\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:15:26)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:239:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" is not an object or a string.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidIssuerTypes = [[], null, undefined, 10, true];\n          for(const invalidIssuerType of invalidIssuerTypes) {\n            copyVc.issuer = invalidIssuerType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "WVyPSaO_o-99bqJElog3P",
              "ctx": null,
              "_testId": "urn:uuid:ae31d99e-e952-4dd5-bafa-2ab328015b04",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST not verify if \"issuer\" is not an object or a string."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19606,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1974,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" is not an object or a string.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidIssuerTypes = [[], null, undefined, 10, true];\n          for(const invalidIssuerType of invalidIssuerTypes) {\n            copyVc.issuer = invalidIssuerType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "KhZ7riDdYoRBHWyi6nR1w",
              "ctx": null,
              "_testId": "urn:uuid:1dbb5678-d7c0-43c6-b02d-83e454cca8dc",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST not verify if \"issuer\" is not an object or a string."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26617,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 215,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" is not an object or a string.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidIssuerTypes = [[], null, undefined, 10, true];\n          for(const invalidIssuerType of invalidIssuerTypes) {\n            copyVc.issuer = invalidIssuerType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "bfe5DH-bYGqh4ddPcLhb8",
              "ctx": null,
              "_testId": "urn:uuid:936bde19-ac98-451d-b2b1-bb7ae342050f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Credentials Consortium",
                "rowId": "MUST not verify if \"issuer\" is not an object or a string."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28688,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 101,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" is not an object or a string.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidIssuerTypes = [[], null, undefined, 10, true];\n          for(const invalidIssuerType of invalidIssuerTypes) {\n            copyVc.issuer = invalidIssuerType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "c28B6BA2yLEthC9IBC0y9",
              "ctx": null,
              "_testId": "urn:uuid:58c29058-1d33-44b3-8941-0a2a51b4d89c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "MUST not verify if \"issuer\" is not an object or a string."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31536,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 291,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" is not an object or a string.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidIssuerTypes = [[], null, undefined, 10, true];\n          for(const invalidIssuerType of invalidIssuerTypes) {\n            copyVc.issuer = invalidIssuerType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "SFExdScoyLNRqQxssdJPY",
              "ctx": null,
              "_testId": "urn:uuid:e1be19ed-f2d0-40d5-90f2-70c4e5144a36",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Gen Digital",
                "rowId": "MUST not verify if \"issuer\" is not an object or a string."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33492,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 88,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" is not an object or a string.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidIssuerTypes = [[], null, undefined, 10, true];\n          for(const invalidIssuerType of invalidIssuerTypes) {\n            copyVc.issuer = invalidIssuerType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "LRsbuCXWcbxtK3ce5bVNh",
              "ctx": null,
              "_testId": "urn:uuid:b2b7f26d-b95a-4788-b1ae-e48799aa8429",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "MUST not verify if \"issuer\" is not an object or a string."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 35698,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 236,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" is not an object or a string.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidIssuerTypes = [[], null, undefined, 10, true];\n          for(const invalidIssuerType of invalidIssuerTypes) {\n            copyVc.issuer = invalidIssuerType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "XVhcHeGrozFAqf5Mjb4dn",
              "ctx": null,
              "_testId": "urn:uuid:14641568-3713-46a2-95b4-88f99cdebf12",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Mavennet",
                "rowId": "MUST not verify if \"issuer\" is not an object or a string."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36896,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 13,
              "state": "failed",
              "err": {
                "response": {},
                "request": {},
                "options": {
                  "credentials": "same-origin",
                  "headers": {},
                  "body": {},
                  "method": "POST",
                  "agent": {
                    "_events": {},
                    "_eventsCount": 2,
                    "defaultPort": 443,
                    "protocol": "https:",
                    "options": {
                      "rejectUnauthorized": false,
                      "noDelay": true,
                      "path": null
                    },
                    "requests": {},
                    "sockets": {},
                    "freeSockets": {},
                    "keepAliveMsecs": 1000,
                    "keepAlive": false,
                    "maxSockets": null,
                    "maxFreeSockets": 256,
                    "scheduling": "lifo",
                    "maxTotalSockets": null,
                    "totalSocketCount": 0,
                    "maxCachedSessions": 100,
                    "_sessionCache": {
                      "map": {},
                      "list": []
                    }
                  },
                  "hooks": {
                    "beforeRequest": [],
                    "beforeRetry": [],
                    "beforeError": [],
                    "afterResponse": []
                  },
                  "prefixUrl": "",
                  "retry": {
                    "limit": 2,
                    "methods": [
                      "get",
                      "put",
                      "head",
                      "delete",
                      "options",
                      "trace"
                    ],
                    "statusCodes": [
                      408,
                      413,
                      429,
                      500,
                      502,
                      503,
                      504
                    ],
                    "afterStatusCodes": [
                      413,
                      429,
                      503
                    ],
                    "maxRetryAfter": null,
                    "backoffLimit": null
                  },
                  "throwHttpErrors": true,
                  "timeout": 10000,
                  "signal": {},
                  "duplex": "half"
                },
                "name": "HTTPError",
                "requestUrl": "https://api.staging.refiner.neoflow.energy/v1/auth",
                "status": 403
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" is not an object or a string.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidIssuerTypes = [[], null, undefined, 10, true];\n          for(const invalidIssuerType of invalidIssuerTypes) {\n            copyVc.issuer = invalidIssuerType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "0VJ519eb2h6-zOKduTF6f",
              "ctx": null,
              "_testId": "urn:uuid:4f5f662c-06a2-4c96-988f-85f0cd60a3ce",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "MUST not verify if \"issuer\" is not an object or a string."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 42035,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 558,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" is not an object or a string.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidIssuerTypes = [[], null, undefined, 10, true];\n          for(const invalidIssuerType of invalidIssuerTypes) {\n            copyVc.issuer = invalidIssuerType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "GNqLPl0Q6JzyDDZzjv6s1",
              "ctx": null,
              "_testId": "urn:uuid:9ae64ba7-12c3-4b0d-9d04-1efe988275bb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SecureKey",
                "rowId": "MUST not verify if \"issuer\" is not an object or a string."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44634,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 6,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an HTTP error response code: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an HTTP error response code: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:14:10)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:239:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" is not an object or a string.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidIssuerTypes = [[], null, undefined, 10, true];\n          for(const invalidIssuerType of invalidIssuerTypes) {\n            copyVc.issuer = invalidIssuerType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "-y1BEUFkeLgU_Kdcfq_Oi",
              "ctx": null,
              "_testId": "urn:uuid:005622b9-52c5-45cf-8dee-68c1f25b7363",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"issuer\" is not an object or a string."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 46548,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 239,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" is not an object or a string.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidIssuerTypes = [[], null, undefined, 10, true];\n          for(const invalidIssuerType of invalidIssuerTypes) {\n            copyVc.issuer = invalidIssuerType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "YpwS-LsvTmU_ZBkUni1Q8",
              "ctx": null,
              "_testId": "urn:uuid:db7c8d8e-5a52-4191-ae87-a446906a00c1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trential",
                "rowId": "MUST not verify if \"issuer\" is not an object or a string."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64550,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1842,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" is not an object or a string.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidIssuerTypes = [[], null, undefined, 10, true];\n          for(const invalidIssuerType of invalidIssuerTypes) {\n            copyVc.issuer = invalidIssuerType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "9uBiF0u9yrJILQdZrevKA",
              "ctx": null,
              "_testId": "urn:uuid:991b240f-0667-4548-9cf4-74a424270f33",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "MUST not verify if \"issuer\" is not an object or a string."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 72754,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 56,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 05 Jan 2025 05:11:18 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '18', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=jHrhXTRcTsrp4vQciLf5kE8qzSy7d%2BJYRraAZtxkUvpzMsTxIDFRFU4m9kkGtu2nps7jL2dSRH02nPV6cJJ%2F2BCOq4ptBN19k15Hm%2FCIePWiLogI6vd4WCxs7Xj46A04XSnRaOQsPNOumaanBKKO\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '8fd0f7824a82fa21-ORD', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=2884&min_rtt=1808&rtt_var=1389&sent=60&recv=36&lost=0&retrans=0&sent_bytes=43933&recv_bytes=18822&delivery_rate=1574421&cwnd=257&unsent_bytes=0&cid=86901cd48417d354&ts=1056&x=0\"', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 05 Jan 2025 05:11:18 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '18', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=jHrhXTRcTsrp4vQciLf5kE8qzSy7d%2BJYRraAZtxkUvpzMsTxIDFRFU4m9kkGtu2nps7jL2dSRH02nPV6cJJ%2F2BCOq4ptBN19k15Hm%2FCIePWiLogI6vd4WCxs7Xj46A04XSnRaOQsPNOumaanBKKO\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '8fd0f7824a82fa21-ORD', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=2884&min_rtt=1808&rtt_var=1389&sent=60&recv=36&lost=0&retrans=0&sent_bytes=43933&recv_bytes=18822&delivery_rate=1574421&cwnd=257&unsent_bytes=0&cid=86901cd48417d354&ts=1056&x=0\"', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:12:14)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:239:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ]
        },
        {
          "id": "MUST not verify if \"credentialSubject\" is not an object.",
          "cells": [
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" is not an object.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidCredentialSubjectTypes = [\n            'string', null, undefined, 10, true, []\n          ];\n          for(const invalidType of invalidCredentialSubjectTypes) {\n            copyVc.credentialSubject = invalidType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "GxzXjrrn6fYdu6CdWfWRT",
              "ctx": null,
              "_testId": "urn:uuid:bebe4c3e-1117-474a-a3fa-95c14ee7f7ff",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "ACA-py",
                "rowId": "MUST not verify if \"credentialSubject\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6738,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 194,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected status code 400 or 422.: expected 500 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 500,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Expected status code 400 or 422.: expected 500 to be one of [ 400, 422 ]\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:15:26)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:256:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" is not an object.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidCredentialSubjectTypes = [\n            'string', null, undefined, 10, true, []\n          ];\n          for(const invalidType of invalidCredentialSubjectTypes) {\n            copyVc.credentialSubject = invalidType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "KfVxuXJq7Q8gTujeU9KkI",
              "ctx": null,
              "_testId": "urn:uuid:e74141b8-a2dc-4f1d-b49c-244ce18cf751",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "MUST not verify if \"credentialSubject\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7524,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 19,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected status code 400 or 422.: expected 404 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 404,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Expected status code 400 or 422.: expected 404 to be one of [ 400, 422 ]\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:15:26)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:256:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" is not an object.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidCredentialSubjectTypes = [\n            'string', null, undefined, 10, true, []\n          ];\n          for(const invalidType of invalidCredentialSubjectTypes) {\n            copyVc.credentialSubject = invalidType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "WVyPSaO_o-99bqJElog3P",
              "ctx": null,
              "_testId": "urn:uuid:3a7cf1a6-22d9-4728-8fea-422a432a62cd",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST not verify if \"credentialSubject\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21581,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1625,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" is not an object.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidCredentialSubjectTypes = [\n            'string', null, undefined, 10, true, []\n          ];\n          for(const invalidType of invalidCredentialSubjectTypes) {\n            copyVc.credentialSubject = invalidType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "KhZ7riDdYoRBHWyi6nR1w",
              "ctx": null,
              "_testId": "urn:uuid:9efd8779-0b9c-4fe0-980c-f6fe7c24bbbc",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST not verify if \"credentialSubject\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26833,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 269,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" is not an object.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidCredentialSubjectTypes = [\n            'string', null, undefined, 10, true, []\n          ];\n          for(const invalidType of invalidCredentialSubjectTypes) {\n            copyVc.credentialSubject = invalidType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "bfe5DH-bYGqh4ddPcLhb8",
              "ctx": null,
              "_testId": "urn:uuid:fc8e0ad7-ef0a-4b4b-9e75-800e981fea33",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Credentials Consortium",
                "rowId": "MUST not verify if \"credentialSubject\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28789,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 163,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" is not an object.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidCredentialSubjectTypes = [\n            'string', null, undefined, 10, true, []\n          ];\n          for(const invalidType of invalidCredentialSubjectTypes) {\n            copyVc.credentialSubject = invalidType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "c28B6BA2yLEthC9IBC0y9",
              "ctx": null,
              "_testId": "urn:uuid:d04447a7-a507-4544-a110-9de4fd01a06b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "MUST not verify if \"credentialSubject\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31827,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 363,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" is not an object.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidCredentialSubjectTypes = [\n            'string', null, undefined, 10, true, []\n          ];\n          for(const invalidType of invalidCredentialSubjectTypes) {\n            copyVc.credentialSubject = invalidType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "SFExdScoyLNRqQxssdJPY",
              "ctx": null,
              "_testId": "urn:uuid:66fc3149-08fe-4cd1-a4f7-a7de4fdde991",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Gen Digital",
                "rowId": "MUST not verify if \"credentialSubject\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33580,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 103,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" is not an object.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidCredentialSubjectTypes = [\n            'string', null, undefined, 10, true, []\n          ];\n          for(const invalidType of invalidCredentialSubjectTypes) {\n            copyVc.credentialSubject = invalidType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "LRsbuCXWcbxtK3ce5bVNh",
              "ctx": null,
              "_testId": "urn:uuid:e3d51a48-32c8-491d-9641-ecc3a58b73f6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "MUST not verify if \"credentialSubject\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 35935,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 264,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" is not an object.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidCredentialSubjectTypes = [\n            'string', null, undefined, 10, true, []\n          ];\n          for(const invalidType of invalidCredentialSubjectTypes) {\n            copyVc.credentialSubject = invalidType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "XVhcHeGrozFAqf5Mjb4dn",
              "ctx": null,
              "_testId": "urn:uuid:cd2b0bc5-e2f3-497c-9b6f-00020a46b0c4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Mavennet",
                "rowId": "MUST not verify if \"credentialSubject\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36909,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 13,
              "state": "failed",
              "err": {
                "response": {},
                "request": {},
                "options": {
                  "credentials": "same-origin",
                  "headers": {},
                  "body": {},
                  "method": "POST",
                  "agent": {
                    "_events": {},
                    "_eventsCount": 2,
                    "defaultPort": 443,
                    "protocol": "https:",
                    "options": {
                      "rejectUnauthorized": false,
                      "noDelay": true,
                      "path": null
                    },
                    "requests": {},
                    "sockets": {},
                    "freeSockets": {},
                    "keepAliveMsecs": 1000,
                    "keepAlive": false,
                    "maxSockets": null,
                    "maxFreeSockets": 256,
                    "scheduling": "lifo",
                    "maxTotalSockets": null,
                    "totalSocketCount": 0,
                    "maxCachedSessions": 100,
                    "_sessionCache": {
                      "map": {},
                      "list": []
                    }
                  },
                  "hooks": {
                    "beforeRequest": [],
                    "beforeRetry": [],
                    "beforeError": [],
                    "afterResponse": []
                  },
                  "prefixUrl": "",
                  "retry": {
                    "limit": 2,
                    "methods": [
                      "get",
                      "put",
                      "head",
                      "delete",
                      "options",
                      "trace"
                    ],
                    "statusCodes": [
                      408,
                      413,
                      429,
                      500,
                      502,
                      503,
                      504
                    ],
                    "afterStatusCodes": [
                      413,
                      429,
                      503
                    ],
                    "maxRetryAfter": null,
                    "backoffLimit": null
                  },
                  "throwHttpErrors": true,
                  "timeout": 10000,
                  "signal": {},
                  "duplex": "half"
                },
                "name": "HTTPError",
                "requestUrl": "https://api.staging.refiner.neoflow.energy/v1/auth",
                "status": 403
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" is not an object.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidCredentialSubjectTypes = [\n            'string', null, undefined, 10, true, []\n          ];\n          for(const invalidType of invalidCredentialSubjectTypes) {\n            copyVc.credentialSubject = invalidType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "0VJ519eb2h6-zOKduTF6f",
              "ctx": null,
              "_testId": "urn:uuid:0a933d82-a346-4b9b-948c-2cd0667eb59f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "MUST not verify if \"credentialSubject\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 42593,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 673,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" is not an object.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidCredentialSubjectTypes = [\n            'string', null, undefined, 10, true, []\n          ];\n          for(const invalidType of invalidCredentialSubjectTypes) {\n            copyVc.credentialSubject = invalidType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "GNqLPl0Q6JzyDDZzjv6s1",
              "ctx": null,
              "_testId": "urn:uuid:d51d6f80-09af-486a-bfbd-6d424d54cf59",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SecureKey",
                "rowId": "MUST not verify if \"credentialSubject\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44641,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 23,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an HTTP error response code: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an HTTP error response code: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:14:10)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:256:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" is not an object.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidCredentialSubjectTypes = [\n            'string', null, undefined, 10, true, []\n          ];\n          for(const invalidType of invalidCredentialSubjectTypes) {\n            copyVc.credentialSubject = invalidType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "-y1BEUFkeLgU_Kdcfq_Oi",
              "ctx": null,
              "_testId": "urn:uuid:1ddfc83f-bd23-4a06-91e0-4dc149ad5b13",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"credentialSubject\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 46787,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 250,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" is not an object.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidCredentialSubjectTypes = [\n            'string', null, undefined, 10, true, []\n          ];\n          for(const invalidType of invalidCredentialSubjectTypes) {\n            copyVc.credentialSubject = invalidType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "YpwS-LsvTmU_ZBkUni1Q8",
              "ctx": null,
              "_testId": "urn:uuid:28bc877a-301d-44c4-ba46-89bcf0fac260",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trential",
                "rowId": "MUST not verify if \"credentialSubject\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 66392,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 3160,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" is not an object.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidCredentialSubjectTypes = [\n            'string', null, undefined, 10, true, []\n          ];\n          for(const invalidType of invalidCredentialSubjectTypes) {\n            copyVc.credentialSubject = invalidType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "9uBiF0u9yrJILQdZrevKA",
              "ctx": null,
              "_testId": "urn:uuid:3b0f19b1-2893-4721-80cf-e4e19bd9999c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "MUST not verify if \"credentialSubject\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 72810,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 53,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 05 Jan 2025 05:11:18 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '18', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=Ym%2F876y0oksM8iZD6EPNN%2F%2BfSfe8%2BJXBrOEKsfjt85u0nk68LDW0%2FEr5xPJdQY0LmvCrPFq36%2Fc%2BbRaPEledyTZFnoXrrJBynzJHCBz%2BES4fSKtvy96Vl8EJBvanr6EPh8pudbccKRMwNJfd88yx\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '8fd0f7829b75fa21-ORD', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=2915&min_rtt=1808&rtt_var=1243&sent=64&recv=38&lost=0&retrans=0&sent_bytes=46643&recv_bytes=19997&delivery_rate=1574421&cwnd=257&unsent_bytes=0&cid=86901cd48417d354&ts=1110&x=0\"', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 05 Jan 2025 05:11:18 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '18', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=Ym%2F876y0oksM8iZD6EPNN%2F%2BfSfe8%2BJXBrOEKsfjt85u0nk68LDW0%2FEr5xPJdQY0LmvCrPFq36%2Fc%2BbRaPEledyTZFnoXrrJBynzJHCBz%2BES4fSKtvy96Vl8EJBvanr6EPh8pudbccKRMwNJfd88yx\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '8fd0f7829b75fa21-ORD', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=2915&min_rtt=1808&rtt_var=1243&sent=64&recv=38&lost=0&retrans=0&sent_bytes=46643&recv_bytes=19997&delivery_rate=1574421&cwnd=257&unsent_bytes=0&cid=86901cd48417d354&ts=1110&x=0\"', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:12:14)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:256:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ]
        },
        {
          "id": "MUST not verify if \"proof\" is not an object.",
          "cells": [
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" is not an object.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidProofTypes = ['string', null, undefined, 10, true, []];\n        for(const invalidProofType of invalidProofTypes) {\n          copyVc.proof = invalidProofType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "GxzXjrrn6fYdu6CdWfWRT",
              "ctx": null,
              "_testId": "urn:uuid:f2b58256-8dfd-471c-9928-2801bdeb5930",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "ACA-py",
                "rowId": "MUST not verify if \"proof\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6932,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 199,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected status code 400 or 422.: expected 500 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 500,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Expected status code 400 or 422.: expected 500 to be one of [ 400, 422 ]\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:15:26)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:270:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" is not an object.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidProofTypes = ['string', null, undefined, 10, true, []];\n        for(const invalidProofType of invalidProofTypes) {\n          copyVc.proof = invalidProofType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "KfVxuXJq7Q8gTujeU9KkI",
              "ctx": null,
              "_testId": "urn:uuid:3808de46-e102-4379-899e-60996d084e22",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "MUST not verify if \"proof\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7544,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 21,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected status code 400 or 422.: expected 404 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 404,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Expected status code 400 or 422.: expected 404 to be one of [ 400, 422 ]\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:15:26)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:270:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" is not an object.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidProofTypes = ['string', null, undefined, 10, true, []];\n        for(const invalidProofType of invalidProofTypes) {\n          copyVc.proof = invalidProofType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "WVyPSaO_o-99bqJElog3P",
              "ctx": null,
              "_testId": "urn:uuid:87d9f163-2c12-4c64-91ec-a8d7ff935436",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST not verify if \"proof\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 23206,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 861,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" is not an object.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidProofTypes = ['string', null, undefined, 10, true, []];\n        for(const invalidProofType of invalidProofTypes) {\n          copyVc.proof = invalidProofType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "KhZ7riDdYoRBHWyi6nR1w",
              "ctx": null,
              "_testId": "urn:uuid:6fc90d64-d74f-4af8-a36f-d34b35364da1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST not verify if \"proof\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27101,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 272,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" is not an object.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidProofTypes = ['string', null, undefined, 10, true, []];\n        for(const invalidProofType of invalidProofTypes) {\n          copyVc.proof = invalidProofType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "bfe5DH-bYGqh4ddPcLhb8",
              "ctx": null,
              "_testId": "urn:uuid:c3c25fcf-3ab8-4365-bd3b-6b871838d2d8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Credentials Consortium",
                "rowId": "MUST not verify if \"proof\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28953,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 122,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" is not an object.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidProofTypes = ['string', null, undefined, 10, true, []];\n        for(const invalidProofType of invalidProofTypes) {\n          copyVc.proof = invalidProofType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "c28B6BA2yLEthC9IBC0y9",
              "ctx": null,
              "_testId": "urn:uuid:3abf7134-3478-4cca-8caa-ea47fcc1ea30",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "MUST not verify if \"proof\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32191,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 374,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" is not an object.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidProofTypes = ['string', null, undefined, 10, true, []];\n        for(const invalidProofType of invalidProofTypes) {\n          copyVc.proof = invalidProofType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "SFExdScoyLNRqQxssdJPY",
              "ctx": null,
              "_testId": "urn:uuid:56f9ba00-6282-420f-a3ab-cc1bdc943b4b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Gen Digital",
                "rowId": "MUST not verify if \"proof\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33684,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 103,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" is not an object.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidProofTypes = ['string', null, undefined, 10, true, []];\n        for(const invalidProofType of invalidProofTypes) {\n          copyVc.proof = invalidProofType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "LRsbuCXWcbxtK3ce5bVNh",
              "ctx": null,
              "_testId": "urn:uuid:e8100d89-fe1a-4397-a625-366237074bbb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "MUST not verify if \"proof\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36198,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 290,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" is not an object.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidProofTypes = ['string', null, undefined, 10, true, []];\n        for(const invalidProofType of invalidProofTypes) {\n          copyVc.proof = invalidProofType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "XVhcHeGrozFAqf5Mjb4dn",
              "ctx": null,
              "_testId": "urn:uuid:09c64d2e-ddfb-4cd8-b47f-f59a1b61686e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Mavennet",
                "rowId": "MUST not verify if \"proof\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36922,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 12,
              "state": "failed",
              "err": {
                "response": {},
                "request": {},
                "options": {
                  "credentials": "same-origin",
                  "headers": {},
                  "body": {},
                  "method": "POST",
                  "agent": {
                    "_events": {},
                    "_eventsCount": 2,
                    "defaultPort": 443,
                    "protocol": "https:",
                    "options": {
                      "rejectUnauthorized": false,
                      "noDelay": true,
                      "path": null
                    },
                    "requests": {},
                    "sockets": {},
                    "freeSockets": {},
                    "keepAliveMsecs": 1000,
                    "keepAlive": false,
                    "maxSockets": null,
                    "maxFreeSockets": 256,
                    "scheduling": "lifo",
                    "maxTotalSockets": null,
                    "totalSocketCount": 0,
                    "maxCachedSessions": 100,
                    "_sessionCache": {
                      "map": {},
                      "list": []
                    }
                  },
                  "hooks": {
                    "beforeRequest": [],
                    "beforeRetry": [],
                    "beforeError": [],
                    "afterResponse": []
                  },
                  "prefixUrl": "",
                  "retry": {
                    "limit": 2,
                    "methods": [
                      "get",
                      "put",
                      "head",
                      "delete",
                      "options",
                      "trace"
                    ],
                    "statusCodes": [
                      408,
                      413,
                      429,
                      500,
                      502,
                      503,
                      504
                    ],
                    "afterStatusCodes": [
                      413,
                      429,
                      503
                    ],
                    "maxRetryAfter": null,
                    "backoffLimit": null
                  },
                  "throwHttpErrors": true,
                  "timeout": 10000,
                  "signal": {},
                  "duplex": "half"
                },
                "name": "HTTPError",
                "requestUrl": "https://api.staging.refiner.neoflow.energy/v1/auth",
                "status": 403
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" is not an object.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidProofTypes = ['string', null, undefined, 10, true, []];\n        for(const invalidProofType of invalidProofTypes) {\n          copyVc.proof = invalidProofType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "0VJ519eb2h6-zOKduTF6f",
              "ctx": null,
              "_testId": "urn:uuid:f3a5a0aa-7d5d-41f8-a0e2-0e5c6ccfefd9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "MUST not verify if \"proof\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 43267,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 706,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" is not an object.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidProofTypes = ['string', null, undefined, 10, true, []];\n        for(const invalidProofType of invalidProofTypes) {\n          copyVc.proof = invalidProofType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "GNqLPl0Q6JzyDDZzjv6s1",
              "ctx": null,
              "_testId": "urn:uuid:05bfa966-055e-4619-99ab-e63a1ba2944e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SecureKey",
                "rowId": "MUST not verify if \"proof\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44664,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 5,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an HTTP error response code: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an HTTP error response code: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:14:10)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:270:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" is not an object.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidProofTypes = ['string', null, undefined, 10, true, []];\n        for(const invalidProofType of invalidProofTypes) {\n          copyVc.proof = invalidProofType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "-y1BEUFkeLgU_Kdcfq_Oi",
              "ctx": null,
              "_testId": "urn:uuid:80915f62-af05-414c-be29-be6977c3294e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"proof\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 47037,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 328,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" is not an object.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidProofTypes = ['string', null, undefined, 10, true, []];\n        for(const invalidProofType of invalidProofTypes) {\n          copyVc.proof = invalidProofType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "YpwS-LsvTmU_ZBkUni1Q8",
              "ctx": null,
              "_testId": "urn:uuid:748e794d-1655-4b9c-893e-dc292e882b6c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trential",
                "rowId": "MUST not verify if \"proof\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 69553,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2166,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" is not an object.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidProofTypes = ['string', null, undefined, 10, true, []];\n        for(const invalidProofType of invalidProofTypes) {\n          copyVc.proof = invalidProofType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "9uBiF0u9yrJILQdZrevKA",
              "ctx": null,
              "_testId": "urn:uuid:21ac9656-fbfe-4839-a586-448eecdd99b9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "MUST not verify if \"proof\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 72863,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 44,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 05 Jan 2025 05:11:18 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '8', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=sFcpTILhMCk1T%2B1hocIv2dDJbKtEWhjjPjky3rDkhEFLqoO3beElHrvLNl2newPiAvL5QUIDbde%2F7BRR%2F9n9u99UwrheqLgEOMfssjxhfBs95C0Cs%2BinvbexpU0q%2BSEbjAtyBtGAtAErviZLF6kA\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '8fd0f782fc7afa21-ORD', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=2972&min_rtt=1808&rtt_var=1250&sent=68&recv=40&lost=0&retrans=0&sent_bytes=49363&recv_bytes=20906&delivery_rate=1574421&cwnd=257&unsent_bytes=0&cid=86901cd48417d354&ts=1154&x=0\"', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 05 Jan 2025 05:11:18 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '8', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=sFcpTILhMCk1T%2B1hocIv2dDJbKtEWhjjPjky3rDkhEFLqoO3beElHrvLNl2newPiAvL5QUIDbde%2F7BRR%2F9n9u99UwrheqLgEOMfssjxhfBs95C0Cs%2BinvbexpU0q%2BSEbjAtyBtGAtAErviZLF6kA\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '8fd0f782fc7afa21-ORD', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=2972&min_rtt=1808&rtt_var=1250&sent=68&recv=40&lost=0&retrans=0&sent_bytes=49363&recv_bytes=20906&delivery_rate=1574421&cwnd=257&unsent_bytes=0&cid=86901cd48417d354&ts=1154&x=0\"', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:12:14)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:270:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ]
        }
      ]
    },
    {
      "title": "Verify Credential - JWT",
      "ctx": null,
      "suites": [
        {
          "title": "SpruceID",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC.",
              "body": "async function() {\n        // this tells the test report which cell in the interop matrix\n        // the result goes in\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({vc: validVc});\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error);\n        should.exist(result);\n        should.exist(result.status);\n        result.status.should.equal(200);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "OOs_y10BPHHlRUMfJRYRP",
              "ctx": null,
              "_testId": "urn:uuid:12f0a011-4d20-4917-955f-a01d7c7728b6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST verify a valid VC."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 73150,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 74,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noContextVc = klona(validVc);\n          delete noContextVc['@context'];\n          const body = createRequestBody({vc: noContextVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "OOs_y10BPHHlRUMfJRYRP",
              "ctx": null,
              "_testId": "urn:uuid:6c8bace9-9337-4b9f-97cb-7f0639e92868",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"@context\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 73224,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 62,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noTypeVc = klona(validVc);\n        delete noTypeVc.type;\n        const body = createRequestBody({vc: noTypeVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "OOs_y10BPHHlRUMfJRYRP",
              "ctx": null,
              "_testId": "urn:uuid:579e5590-9279-41fd-abdf-0525253d7515",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 73286,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 64,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noIssuerVc = klona(validVc);\n        delete noIssuerVc.issuer;\n        const body = createRequestBody({vc: noIssuerVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "OOs_y10BPHHlRUMfJRYRP",
              "ctx": null,
              "_testId": "urn:uuid:5799081b-ec0d-48d1-ae5c-9f5b97c0dd68",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"issuer\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 73351,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 62,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noCredentialSubjectVc = klona(validVc);\n          delete noCredentialSubjectVc.credentialSubject;\n          const body = createRequestBody({vc: noCredentialSubjectVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "OOs_y10BPHHlRUMfJRYRP",
              "ctx": null,
              "_testId": "urn:uuid:d674caf5-b6bb-41f2-b9ec-1177707c425c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"credentialSubject\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 73413,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 65,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noProofVc = klona(validVc);\n        delete noProofVc.proof;\n        const body = createRequestBody({vc: noProofVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "OOs_y10BPHHlRUMfJRYRP",
              "ctx": null,
              "_testId": "urn:uuid:f4235daf-f2f7-4a1a-936b-226f7d1029b6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"proof\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 73478,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 62,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.type\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofTypeVc = klona(validVc);\n          delete noProofTypeVc.proof.type;\n          const body = createRequestBody({vc: noProofTypeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "OOs_y10BPHHlRUMfJRYRP",
              "ctx": null,
              "_testId": "urn:uuid:24eecad4-fdb4-4d76-9811-415a471fb81a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"proof.type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 73540,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 67,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.created\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofCreatedVc = klona(validVc);\n          delete noProofCreatedVc.proof.created;\n          const body = createRequestBody({vc: noProofCreatedVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "OOs_y10BPHHlRUMfJRYRP",
              "ctx": null,
              "_testId": "urn:uuid:9ae19bad-caf7-4e53-9055-a47ca79e2c7a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"proof.created\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 73607,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 70,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 05 Jan 2025 05:11:19 GMT', 'content-type': 'application/json', 'content-length': '46', connection: 'keep-alive', 'cf-cache-status': 'DYNAMIC', server: 'cloudflare', 'cf-ray': '8fd0f78799d7aca6-ORD', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 05 Jan 2025 05:11:19 GMT', 'content-type': 'application/json', 'content-length': '46', connection: 'keep-alive', 'cf-cache-status': 'DYNAMIC', server: 'cloudflare', 'cf-ray': '8fd0f78799d7aca6-ORD', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:12:14)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js:141:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.verificationMethod\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofVerificationMethodVc = klona(validVc);\n          delete noProofVerificationMethodVc.proof.verificationMethod;\n          const body = createRequestBody({vc: noProofVerificationMethodVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "OOs_y10BPHHlRUMfJRYRP",
              "ctx": null,
              "_testId": "urn:uuid:e57514f1-4a3d-4076-a175-2730c73e458b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"proof.verificationMethod\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 73677,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 127,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofValue\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofValueVc = klona(validVc);\n          delete noProofValueVc.proof.proofValue;\n          const body = createRequestBody({vc: noProofValueVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "OOs_y10BPHHlRUMfJRYRP",
              "ctx": null,
              "_testId": "urn:uuid:bcbb41e9-ea6c-441e-9fb2-f3f79ab020cb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"proof.proofValue\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 73803,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 62,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofPurpose\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofPurposeVc = klona(validVc);\n          delete noProofPurposeVc.proof.proofPurpose;\n          const body = createRequestBody({vc: noProofPurposeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "OOs_y10BPHHlRUMfJRYRP",
              "ctx": null,
              "_testId": "urn:uuid:129e631e-7816-418f-a219-5ea96fb5cc83",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"proof.proofPurpose\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 73866,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 64,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidContextTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidContextType of invalidContextTypes) {\n          copyVc['@context'] = invalidContextType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "OOs_y10BPHHlRUMfJRYRP",
              "ctx": null,
              "_testId": "urn:uuid:d22d7a2e-2eb9-4481-8663-4d5eb784ebf3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"@context\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 73930,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 322,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" items are not strings or objects.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidContextItemTypes = [[], null, undefined, 10, true];\n          for(const invalidContextItemType of invalidContextItemTypes) {\n            copyVc['@context'] = [invalidContextItemType];\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "OOs_y10BPHHlRUMfJRYRP",
              "ctx": null,
              "_testId": "urn:uuid:d34ba5a4-b3e5-4370-a2b0-2520812f4eb5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"@context\" items are not strings or objects."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 74253,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 289,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidType of invalidTypes) {\n          copyVc.type = invalidType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "OOs_y10BPHHlRUMfJRYRP",
              "ctx": null,
              "_testId": "urn:uuid:4c1f7553-0ef7-4372-a0f9-78ecd586c9eb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"type\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 74541,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 303,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" items are not strings.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypeItemTypes = [[], {}, null, undefined, 10, true];\n        for(const invalidItemType of invalidTypeItemTypes) {\n          copyVc.type = [invalidItemType];\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "OOs_y10BPHHlRUMfJRYRP",
              "ctx": null,
              "_testId": "urn:uuid:01a5b4b1-1bce-48e6-8e70-e288a302d7fe",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"type\" items are not strings."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 74845,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 320,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" is not an object or a string.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidIssuerTypes = [[], null, undefined, 10, true];\n          for(const invalidIssuerType of invalidIssuerTypes) {\n            copyVc.issuer = invalidIssuerType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "OOs_y10BPHHlRUMfJRYRP",
              "ctx": null,
              "_testId": "urn:uuid:dc4d7e4a-c39f-42b2-8157-d2a0eaf23489",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"issuer\" is not an object or a string."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 75165,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 265,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" is not an object.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidCredentialSubjectTypes = [\n            'string', null, undefined, 10, true, []\n          ];\n          for(const invalidType of invalidCredentialSubjectTypes) {\n            copyVc.credentialSubject = invalidType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "OOs_y10BPHHlRUMfJRYRP",
              "ctx": null,
              "_testId": "urn:uuid:4312b1a2-7aac-46ab-8314-ffa2a855cb49",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"credentialSubject\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 75430,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 329,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" is not an object.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidProofTypes = ['string', null, undefined, 10, true, []];\n        for(const invalidProofType of invalidProofTypes) {\n          copyVc.proof = invalidProofType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "OOs_y10BPHHlRUMfJRYRP",
              "ctx": null,
              "_testId": "urn:uuid:9a9550c5-5548-4abf-97b3-6c6483832404",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"proof\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 75760,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 318,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"SpruceID\"",
              "body": "async function() {\n        const issuer = matchingIssuers.get(issuerNameJWT).issuers.find(\n          issuer => issuer.tags.has('JWT'));\n        validVc = await createInitialVc({issuer});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "OOs_y10BPHHlRUMfJRYRP",
              "ctx": null,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 72909,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 241,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "jmukwvl0UtFhxNkSSPIGW",
          "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
          "_testId": "urn:uuid:80b599f2-d915-424c-8bb5-a4d7ee26bfa5"
        },
        {
          "title": "Trential",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC.",
              "body": "async function() {\n        // this tells the test report which cell in the interop matrix\n        // the result goes in\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({vc: validVc});\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error);\n        should.exist(result);\n        should.exist(result.status);\n        result.status.should.equal(200);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "TSdfN2W-oZeBeqNfn0jnG",
              "ctx": null,
              "_testId": "urn:uuid:74d96f30-0864-43d9-9105-ab0ee6ed05e1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trential",
                "rowId": "MUST verify a valid VC."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 76148,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1902,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noContextVc = klona(validVc);\n          delete noContextVc['@context'];\n          const body = createRequestBody({vc: noContextVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "TSdfN2W-oZeBeqNfn0jnG",
              "ctx": null,
              "_testId": "urn:uuid:32f84980-66bd-447b-bf13-4fc9557e589e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trential",
                "rowId": "MUST not verify if \"@context\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 78051,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 232,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noTypeVc = klona(validVc);\n        delete noTypeVc.type;\n        const body = createRequestBody({vc: noTypeVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "TSdfN2W-oZeBeqNfn0jnG",
              "ctx": null,
              "_testId": "urn:uuid:76d6c433-04cc-419d-b0bc-8232c6ce94a4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trential",
                "rowId": "MUST not verify if \"type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 78284,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 242,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noIssuerVc = klona(validVc);\n        delete noIssuerVc.issuer;\n        const body = createRequestBody({vc: noIssuerVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "TSdfN2W-oZeBeqNfn0jnG",
              "ctx": null,
              "_testId": "urn:uuid:43d458ed-e1c1-4742-bf77-8a69a599b011",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trential",
                "rowId": "MUST not verify if \"issuer\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 78526,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 232,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noCredentialSubjectVc = klona(validVc);\n          delete noCredentialSubjectVc.credentialSubject;\n          const body = createRequestBody({vc: noCredentialSubjectVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "TSdfN2W-oZeBeqNfn0jnG",
              "ctx": null,
              "_testId": "urn:uuid:4e352268-3138-4494-974c-8fec3ad7ef0d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trential",
                "rowId": "MUST not verify if \"credentialSubject\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 78757,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 231,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noProofVc = klona(validVc);\n        delete noProofVc.proof;\n        const body = createRequestBody({vc: noProofVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "TSdfN2W-oZeBeqNfn0jnG",
              "ctx": null,
              "_testId": "urn:uuid:58e8859f-9d20-4460-b834-b110daa5df00",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trential",
                "rowId": "MUST not verify if \"proof\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 78988,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 241,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.type\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofTypeVc = klona(validVc);\n          delete noProofTypeVc.proof.type;\n          const body = createRequestBody({vc: noProofTypeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "TSdfN2W-oZeBeqNfn0jnG",
              "ctx": null,
              "_testId": "urn:uuid:ab5c7ee9-7d92-4f80-8b93-8bdd53935778",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trential",
                "rowId": "MUST not verify if \"proof.type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 79230,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 237,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.created\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofCreatedVc = klona(validVc);\n          delete noProofCreatedVc.proof.created;\n          const body = createRequestBody({vc: noProofCreatedVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "TSdfN2W-oZeBeqNfn0jnG",
              "ctx": null,
              "_testId": "urn:uuid:89fccb4d-e6f0-4490-af13-ca791762cfa1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trential",
                "rowId": "MUST not verify if \"proof.created\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 79468,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1670,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier: expected Response { status: 200, statusText: 'OK', headers: Headers { 'access-control-allow-headers': '*', 'access-control-allow-methods': '*', 'access-control-allow-origin': '*', 'access-control-expose-headers': '*', 'access-control-max-age': '5', 'content-length': '17', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 05 Jan 2025 05:11:26 GMT', etag: 'W/\"11-z5EWd6k6y6k0MQWTeNizVwP8d3Y\"', server: 'envoy', 'x-envoy-upstream-service-time': '1444', 'x-powered-by': 'Express', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier: expected Response { status: 200, statusText: 'OK', headers: Headers { 'access-control-allow-headers': '*', 'access-control-allow-methods': '*', 'access-control-allow-origin': '*', 'access-control-expose-headers': '*', 'access-control-max-age': '5', 'content-length': '17', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 05 Jan 2025 05:11:26 GMT', etag: 'W/\"11-z5EWd6k6y6k0MQWTeNizVwP8d3Y\"', server: 'envoy', 'x-envoy-upstream-service-time': '1444', 'x-powered-by': 'Express', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:12:14)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js:141:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.verificationMethod\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofVerificationMethodVc = klona(validVc);\n          delete noProofVerificationMethodVc.proof.verificationMethod;\n          const body = createRequestBody({vc: noProofVerificationMethodVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "TSdfN2W-oZeBeqNfn0jnG",
              "ctx": null,
              "_testId": "urn:uuid:0c574e80-0c76-4443-bf66-d23554310b70",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trential",
                "rowId": "MUST not verify if \"proof.verificationMethod\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 81137,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 233,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofValue\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofValueVc = klona(validVc);\n          delete noProofValueVc.proof.proofValue;\n          const body = createRequestBody({vc: noProofValueVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "TSdfN2W-oZeBeqNfn0jnG",
              "ctx": null,
              "_testId": "urn:uuid:7283d7a5-3278-4302-a661-4ef0bf8118c5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trential",
                "rowId": "MUST not verify if \"proof.proofValue\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 81370,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1656,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofPurpose\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofPurposeVc = klona(validVc);\n          delete noProofPurposeVc.proof.proofPurpose;\n          const body = createRequestBody({vc: noProofPurposeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "TSdfN2W-oZeBeqNfn0jnG",
              "ctx": null,
              "_testId": "urn:uuid:d01e0f40-40cf-4d9f-92ac-f396e232f2c6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trential",
                "rowId": "MUST not verify if \"proof.proofPurpose\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 83027,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 239,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidContextTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidContextType of invalidContextTypes) {\n          copyVc['@context'] = invalidContextType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "TSdfN2W-oZeBeqNfn0jnG",
              "ctx": null,
              "_testId": "urn:uuid:f009c1dd-689b-4619-bab2-f8a347d76b79",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trential",
                "rowId": "MUST not verify if \"@context\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 83266,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2811,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" items are not strings or objects.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidContextItemTypes = [[], null, undefined, 10, true];\n          for(const invalidContextItemType of invalidContextItemTypes) {\n            copyVc['@context'] = [invalidContextItemType];\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "TSdfN2W-oZeBeqNfn0jnG",
              "ctx": null,
              "_testId": "urn:uuid:b3904f32-0044-4214-aeef-1930f7345513",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trential",
                "rowId": "MUST not verify if \"@context\" items are not strings or objects."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 86077,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1163,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidType of invalidTypes) {\n          copyVc.type = invalidType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "TSdfN2W-oZeBeqNfn0jnG",
              "ctx": null,
              "_testId": "urn:uuid:2646fe90-a046-4113-8b08-fb77d0ab052b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trential",
                "rowId": "MUST not verify if \"type\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 87240,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1406,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" items are not strings.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypeItemTypes = [[], {}, null, undefined, 10, true];\n        for(const invalidItemType of invalidTypeItemTypes) {\n          copyVc.type = [invalidItemType];\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "TSdfN2W-oZeBeqNfn0jnG",
              "ctx": null,
              "_testId": "urn:uuid:178be217-e426-4d0b-82b3-72b99b053233",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trential",
                "rowId": "MUST not verify if \"type\" items are not strings."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 88647,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1382,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" is not an object or a string.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidIssuerTypes = [[], null, undefined, 10, true];\n          for(const invalidIssuerType of invalidIssuerTypes) {\n            copyVc.issuer = invalidIssuerType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "TSdfN2W-oZeBeqNfn0jnG",
              "ctx": null,
              "_testId": "urn:uuid:74659d0f-ade9-4159-a1dd-f47a418e0f8d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trential",
                "rowId": "MUST not verify if \"issuer\" is not an object or a string."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 90029,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1154,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" is not an object.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidCredentialSubjectTypes = [\n            'string', null, undefined, 10, true, []\n          ];\n          for(const invalidType of invalidCredentialSubjectTypes) {\n            copyVc.credentialSubject = invalidType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "TSdfN2W-oZeBeqNfn0jnG",
              "ctx": null,
              "_testId": "urn:uuid:3b3f8366-4e85-47e7-bf07-b0748456399c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trential",
                "rowId": "MUST not verify if \"credentialSubject\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 91183,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2874,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" is not an object.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidProofTypes = ['string', null, undefined, 10, true, []];\n        for(const invalidProofType of invalidProofTypes) {\n          copyVc.proof = invalidProofType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "TSdfN2W-oZeBeqNfn0jnG",
              "ctx": null,
              "_testId": "urn:uuid:8db2d712-9030-4c37-a86b-0dbc7a85666f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trential",
                "rowId": "MUST not verify if \"proof\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 94058,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2765,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Trential\"",
              "body": "async function() {\n        const issuer = matchingIssuers.get(issuerNameJWT).issuers.find(\n          issuer => issuer.tags.has('JWT'));\n        validVc = await createInitialVc({issuer});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "TSdfN2W-oZeBeqNfn0jnG",
              "ctx": null,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 76078,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 70,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "jmukwvl0UtFhxNkSSPIGW",
          "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
          "_testId": "urn:uuid:1f0090df-fe6f-4e60-9831-27c8c881826c"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "cT5ODpHc7i9Lff5L11X8K",
      "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
      "summary": {},
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Verifier",
      "reportData": [],
      "_testId": "urn:uuid:ac849299-4004-4b82-bad6-7d75fc8c3c05",
      "columns": [
        "SpruceID",
        "Trential"
      ],
      "rows": [
        {
          "id": "MUST verify a valid VC.",
          "cells": [
            {
              "type": "test",
              "title": "MUST verify a valid VC.",
              "body": "async function() {\n        // this tells the test report which cell in the interop matrix\n        // the result goes in\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({vc: validVc});\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error);\n        should.exist(result);\n        should.exist(result.status);\n        result.status.should.equal(200);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "OOs_y10BPHHlRUMfJRYRP",
              "ctx": null,
              "_testId": "urn:uuid:12f0a011-4d20-4917-955f-a01d7c7728b6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST verify a valid VC."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 73150,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 74,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC.",
              "body": "async function() {\n        // this tells the test report which cell in the interop matrix\n        // the result goes in\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({vc: validVc});\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error);\n        should.exist(result);\n        should.exist(result.status);\n        result.status.should.equal(200);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "TSdfN2W-oZeBeqNfn0jnG",
              "ctx": null,
              "_testId": "urn:uuid:74d96f30-0864-43d9-9105-ab0ee6ed05e1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trential",
                "rowId": "MUST verify a valid VC."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 76148,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1902,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "MUST not verify if \"@context\" property is missing.",
          "cells": [
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noContextVc = klona(validVc);\n          delete noContextVc['@context'];\n          const body = createRequestBody({vc: noContextVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "OOs_y10BPHHlRUMfJRYRP",
              "ctx": null,
              "_testId": "urn:uuid:6c8bace9-9337-4b9f-97cb-7f0639e92868",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"@context\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 73224,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 62,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noContextVc = klona(validVc);\n          delete noContextVc['@context'];\n          const body = createRequestBody({vc: noContextVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "TSdfN2W-oZeBeqNfn0jnG",
              "ctx": null,
              "_testId": "urn:uuid:32f84980-66bd-447b-bf13-4fc9557e589e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trential",
                "rowId": "MUST not verify if \"@context\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 78051,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 232,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "MUST not verify if \"type\" property is missing.",
          "cells": [
            {
              "type": "test",
              "title": "MUST not verify if \"type\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noTypeVc = klona(validVc);\n        delete noTypeVc.type;\n        const body = createRequestBody({vc: noTypeVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "OOs_y10BPHHlRUMfJRYRP",
              "ctx": null,
              "_testId": "urn:uuid:579e5590-9279-41fd-abdf-0525253d7515",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 73286,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 64,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noTypeVc = klona(validVc);\n        delete noTypeVc.type;\n        const body = createRequestBody({vc: noTypeVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "TSdfN2W-oZeBeqNfn0jnG",
              "ctx": null,
              "_testId": "urn:uuid:76d6c433-04cc-419d-b0bc-8232c6ce94a4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trential",
                "rowId": "MUST not verify if \"type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 78284,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 242,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "MUST not verify if \"issuer\" property is missing.",
          "cells": [
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noIssuerVc = klona(validVc);\n        delete noIssuerVc.issuer;\n        const body = createRequestBody({vc: noIssuerVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "OOs_y10BPHHlRUMfJRYRP",
              "ctx": null,
              "_testId": "urn:uuid:5799081b-ec0d-48d1-ae5c-9f5b97c0dd68",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"issuer\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 73351,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 62,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noIssuerVc = klona(validVc);\n        delete noIssuerVc.issuer;\n        const body = createRequestBody({vc: noIssuerVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "TSdfN2W-oZeBeqNfn0jnG",
              "ctx": null,
              "_testId": "urn:uuid:43d458ed-e1c1-4742-bf77-8a69a599b011",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trential",
                "rowId": "MUST not verify if \"issuer\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 78526,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 232,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "MUST not verify if \"credentialSubject\" property is missing.",
          "cells": [
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noCredentialSubjectVc = klona(validVc);\n          delete noCredentialSubjectVc.credentialSubject;\n          const body = createRequestBody({vc: noCredentialSubjectVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "OOs_y10BPHHlRUMfJRYRP",
              "ctx": null,
              "_testId": "urn:uuid:d674caf5-b6bb-41f2-b9ec-1177707c425c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"credentialSubject\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 73413,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 65,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noCredentialSubjectVc = klona(validVc);\n          delete noCredentialSubjectVc.credentialSubject;\n          const body = createRequestBody({vc: noCredentialSubjectVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "TSdfN2W-oZeBeqNfn0jnG",
              "ctx": null,
              "_testId": "urn:uuid:4e352268-3138-4494-974c-8fec3ad7ef0d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trential",
                "rowId": "MUST not verify if \"credentialSubject\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 78757,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 231,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "MUST not verify if \"proof\" property is missing.",
          "cells": [
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noProofVc = klona(validVc);\n        delete noProofVc.proof;\n        const body = createRequestBody({vc: noProofVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "OOs_y10BPHHlRUMfJRYRP",
              "ctx": null,
              "_testId": "urn:uuid:f4235daf-f2f7-4a1a-936b-226f7d1029b6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"proof\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 73478,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 62,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noProofVc = klona(validVc);\n        delete noProofVc.proof;\n        const body = createRequestBody({vc: noProofVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "TSdfN2W-oZeBeqNfn0jnG",
              "ctx": null,
              "_testId": "urn:uuid:58e8859f-9d20-4460-b834-b110daa5df00",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trential",
                "rowId": "MUST not verify if \"proof\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 78988,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 241,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "MUST not verify if \"proof.type\" property is missing.",
          "cells": [
            {
              "type": "test",
              "title": "MUST not verify if \"proof.type\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofTypeVc = klona(validVc);\n          delete noProofTypeVc.proof.type;\n          const body = createRequestBody({vc: noProofTypeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "OOs_y10BPHHlRUMfJRYRP",
              "ctx": null,
              "_testId": "urn:uuid:24eecad4-fdb4-4d76-9811-415a471fb81a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"proof.type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 73540,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 67,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.type\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofTypeVc = klona(validVc);\n          delete noProofTypeVc.proof.type;\n          const body = createRequestBody({vc: noProofTypeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "TSdfN2W-oZeBeqNfn0jnG",
              "ctx": null,
              "_testId": "urn:uuid:ab5c7ee9-7d92-4f80-8b93-8bdd53935778",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trential",
                "rowId": "MUST not verify if \"proof.type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 79230,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 237,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "MUST not verify if \"proof.created\" property is missing.",
          "cells": [
            {
              "type": "test",
              "title": "MUST not verify if \"proof.created\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofCreatedVc = klona(validVc);\n          delete noProofCreatedVc.proof.created;\n          const body = createRequestBody({vc: noProofCreatedVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "OOs_y10BPHHlRUMfJRYRP",
              "ctx": null,
              "_testId": "urn:uuid:9ae19bad-caf7-4e53-9055-a47ca79e2c7a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"proof.created\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 73607,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 70,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 05 Jan 2025 05:11:19 GMT', 'content-type': 'application/json', 'content-length': '46', connection: 'keep-alive', 'cf-cache-status': 'DYNAMIC', server: 'cloudflare', 'cf-ray': '8fd0f78799d7aca6-ORD', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 05 Jan 2025 05:11:19 GMT', 'content-type': 'application/json', 'content-length': '46', connection: 'keep-alive', 'cf-cache-status': 'DYNAMIC', server: 'cloudflare', 'cf-ray': '8fd0f78799d7aca6-ORD', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:12:14)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js:141:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.created\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofCreatedVc = klona(validVc);\n          delete noProofCreatedVc.proof.created;\n          const body = createRequestBody({vc: noProofCreatedVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "TSdfN2W-oZeBeqNfn0jnG",
              "ctx": null,
              "_testId": "urn:uuid:89fccb4d-e6f0-4490-af13-ca791762cfa1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trential",
                "rowId": "MUST not verify if \"proof.created\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 79468,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1670,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier: expected Response { status: 200, statusText: 'OK', headers: Headers { 'access-control-allow-headers': '*', 'access-control-allow-methods': '*', 'access-control-allow-origin': '*', 'access-control-expose-headers': '*', 'access-control-max-age': '5', 'content-length': '17', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 05 Jan 2025 05:11:26 GMT', etag: 'W/\"11-z5EWd6k6y6k0MQWTeNizVwP8d3Y\"', server: 'envoy', 'x-envoy-upstream-service-time': '1444', 'x-powered-by': 'Express', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier: expected Response { status: 200, statusText: 'OK', headers: Headers { 'access-control-allow-headers': '*', 'access-control-allow-methods': '*', 'access-control-allow-origin': '*', 'access-control-expose-headers': '*', 'access-control-max-age': '5', 'content-length': '17', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 05 Jan 2025 05:11:26 GMT', etag: 'W/\"11-z5EWd6k6y6k0MQWTeNizVwP8d3Y\"', server: 'envoy', 'x-envoy-upstream-service-time': '1444', 'x-powered-by': 'Express', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:12:14)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js:141:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ]
        },
        {
          "id": "MUST not verify if \"proof.verificationMethod\" property is missing.",
          "cells": [
            {
              "type": "test",
              "title": "MUST not verify if \"proof.verificationMethod\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofVerificationMethodVc = klona(validVc);\n          delete noProofVerificationMethodVc.proof.verificationMethod;\n          const body = createRequestBody({vc: noProofVerificationMethodVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "OOs_y10BPHHlRUMfJRYRP",
              "ctx": null,
              "_testId": "urn:uuid:e57514f1-4a3d-4076-a175-2730c73e458b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"proof.verificationMethod\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 73677,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 127,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.verificationMethod\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofVerificationMethodVc = klona(validVc);\n          delete noProofVerificationMethodVc.proof.verificationMethod;\n          const body = createRequestBody({vc: noProofVerificationMethodVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "TSdfN2W-oZeBeqNfn0jnG",
              "ctx": null,
              "_testId": "urn:uuid:0c574e80-0c76-4443-bf66-d23554310b70",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trential",
                "rowId": "MUST not verify if \"proof.verificationMethod\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 81137,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 233,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "MUST not verify if \"proof.proofValue\" property is missing.",
          "cells": [
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofValue\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofValueVc = klona(validVc);\n          delete noProofValueVc.proof.proofValue;\n          const body = createRequestBody({vc: noProofValueVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "OOs_y10BPHHlRUMfJRYRP",
              "ctx": null,
              "_testId": "urn:uuid:bcbb41e9-ea6c-441e-9fb2-f3f79ab020cb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"proof.proofValue\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 73803,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 62,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofValue\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofValueVc = klona(validVc);\n          delete noProofValueVc.proof.proofValue;\n          const body = createRequestBody({vc: noProofValueVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "TSdfN2W-oZeBeqNfn0jnG",
              "ctx": null,
              "_testId": "urn:uuid:7283d7a5-3278-4302-a661-4ef0bf8118c5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trential",
                "rowId": "MUST not verify if \"proof.proofValue\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 81370,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1656,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "MUST not verify if \"proof.proofPurpose\" property is missing.",
          "cells": [
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofPurpose\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofPurposeVc = klona(validVc);\n          delete noProofPurposeVc.proof.proofPurpose;\n          const body = createRequestBody({vc: noProofPurposeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "OOs_y10BPHHlRUMfJRYRP",
              "ctx": null,
              "_testId": "urn:uuid:129e631e-7816-418f-a219-5ea96fb5cc83",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"proof.proofPurpose\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 73866,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 64,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofPurpose\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofPurposeVc = klona(validVc);\n          delete noProofPurposeVc.proof.proofPurpose;\n          const body = createRequestBody({vc: noProofPurposeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "TSdfN2W-oZeBeqNfn0jnG",
              "ctx": null,
              "_testId": "urn:uuid:d01e0f40-40cf-4d9f-92ac-f396e232f2c6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trential",
                "rowId": "MUST not verify if \"proof.proofPurpose\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 83027,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 239,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "MUST not verify if \"@context\" is not an array.",
          "cells": [
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidContextTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidContextType of invalidContextTypes) {\n          copyVc['@context'] = invalidContextType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "OOs_y10BPHHlRUMfJRYRP",
              "ctx": null,
              "_testId": "urn:uuid:d22d7a2e-2eb9-4481-8663-4d5eb784ebf3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"@context\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 73930,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 322,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidContextTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidContextType of invalidContextTypes) {\n          copyVc['@context'] = invalidContextType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "TSdfN2W-oZeBeqNfn0jnG",
              "ctx": null,
              "_testId": "urn:uuid:f009c1dd-689b-4619-bab2-f8a347d76b79",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trential",
                "rowId": "MUST not verify if \"@context\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 83266,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2811,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "MUST not verify if \"@context\" items are not strings or objects.",
          "cells": [
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" items are not strings or objects.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidContextItemTypes = [[], null, undefined, 10, true];\n          for(const invalidContextItemType of invalidContextItemTypes) {\n            copyVc['@context'] = [invalidContextItemType];\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "OOs_y10BPHHlRUMfJRYRP",
              "ctx": null,
              "_testId": "urn:uuid:d34ba5a4-b3e5-4370-a2b0-2520812f4eb5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"@context\" items are not strings or objects."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 74253,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 289,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" items are not strings or objects.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidContextItemTypes = [[], null, undefined, 10, true];\n          for(const invalidContextItemType of invalidContextItemTypes) {\n            copyVc['@context'] = [invalidContextItemType];\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "TSdfN2W-oZeBeqNfn0jnG",
              "ctx": null,
              "_testId": "urn:uuid:b3904f32-0044-4214-aeef-1930f7345513",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trential",
                "rowId": "MUST not verify if \"@context\" items are not strings or objects."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 86077,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1163,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "MUST not verify if \"type\" is not an array.",
          "cells": [
            {
              "type": "test",
              "title": "MUST not verify if \"type\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidType of invalidTypes) {\n          copyVc.type = invalidType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "OOs_y10BPHHlRUMfJRYRP",
              "ctx": null,
              "_testId": "urn:uuid:4c1f7553-0ef7-4372-a0f9-78ecd586c9eb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"type\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 74541,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 303,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidType of invalidTypes) {\n          copyVc.type = invalidType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "TSdfN2W-oZeBeqNfn0jnG",
              "ctx": null,
              "_testId": "urn:uuid:2646fe90-a046-4113-8b08-fb77d0ab052b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trential",
                "rowId": "MUST not verify if \"type\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 87240,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1406,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "MUST not verify if \"type\" items are not strings.",
          "cells": [
            {
              "type": "test",
              "title": "MUST not verify if \"type\" items are not strings.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypeItemTypes = [[], {}, null, undefined, 10, true];\n        for(const invalidItemType of invalidTypeItemTypes) {\n          copyVc.type = [invalidItemType];\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "OOs_y10BPHHlRUMfJRYRP",
              "ctx": null,
              "_testId": "urn:uuid:01a5b4b1-1bce-48e6-8e70-e288a302d7fe",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"type\" items are not strings."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 74845,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 320,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" items are not strings.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypeItemTypes = [[], {}, null, undefined, 10, true];\n        for(const invalidItemType of invalidTypeItemTypes) {\n          copyVc.type = [invalidItemType];\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "TSdfN2W-oZeBeqNfn0jnG",
              "ctx": null,
              "_testId": "urn:uuid:178be217-e426-4d0b-82b3-72b99b053233",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trential",
                "rowId": "MUST not verify if \"type\" items are not strings."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 88647,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1382,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "MUST not verify if \"issuer\" is not an object or a string.",
          "cells": [
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" is not an object or a string.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidIssuerTypes = [[], null, undefined, 10, true];\n          for(const invalidIssuerType of invalidIssuerTypes) {\n            copyVc.issuer = invalidIssuerType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "OOs_y10BPHHlRUMfJRYRP",
              "ctx": null,
              "_testId": "urn:uuid:dc4d7e4a-c39f-42b2-8157-d2a0eaf23489",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"issuer\" is not an object or a string."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 75165,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 265,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" is not an object or a string.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidIssuerTypes = [[], null, undefined, 10, true];\n          for(const invalidIssuerType of invalidIssuerTypes) {\n            copyVc.issuer = invalidIssuerType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "TSdfN2W-oZeBeqNfn0jnG",
              "ctx": null,
              "_testId": "urn:uuid:74659d0f-ade9-4159-a1dd-f47a418e0f8d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trential",
                "rowId": "MUST not verify if \"issuer\" is not an object or a string."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 90029,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1154,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "MUST not verify if \"credentialSubject\" is not an object.",
          "cells": [
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" is not an object.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidCredentialSubjectTypes = [\n            'string', null, undefined, 10, true, []\n          ];\n          for(const invalidType of invalidCredentialSubjectTypes) {\n            copyVc.credentialSubject = invalidType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "OOs_y10BPHHlRUMfJRYRP",
              "ctx": null,
              "_testId": "urn:uuid:4312b1a2-7aac-46ab-8314-ffa2a855cb49",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"credentialSubject\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 75430,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 329,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" is not an object.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidCredentialSubjectTypes = [\n            'string', null, undefined, 10, true, []\n          ];\n          for(const invalidType of invalidCredentialSubjectTypes) {\n            copyVc.credentialSubject = invalidType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "TSdfN2W-oZeBeqNfn0jnG",
              "ctx": null,
              "_testId": "urn:uuid:3b3f8366-4e85-47e7-bf07-b0748456399c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trential",
                "rowId": "MUST not verify if \"credentialSubject\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 91183,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2874,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "MUST not verify if \"proof\" is not an object.",
          "cells": [
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" is not an object.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidProofTypes = ['string', null, undefined, 10, true, []];\n        for(const invalidProofType of invalidProofTypes) {\n          copyVc.proof = invalidProofType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "OOs_y10BPHHlRUMfJRYRP",
              "ctx": null,
              "_testId": "urn:uuid:9a9550c5-5548-4abf-97b3-6c6483832404",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"proof\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 75760,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 318,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" is not an object.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidProofTypes = ['string', null, undefined, 10, true, []];\n        for(const invalidProofType of invalidProofTypes) {\n          copyVc.proof = invalidProofType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "TSdfN2W-oZeBeqNfn0jnG",
              "ctx": null,
              "_testId": "urn:uuid:8db2d712-9030-4c37-a86b-0dbc7a85666f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trential",
                "rowId": "MUST not verify if \"proof\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 94058,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2765,
              "state": "passed",
              "speed": "slow"
            }
          ]
        }
      ]
    },
    {
      "title": "Verify Presentation - Data Integrity",
      "ctx": null,
      "suites": [],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "cT5ODpHc7i9Lff5L11X8K",
      "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/12-vp-di.js",
      "summary": {},
      "matrix": true,
      "report": true,
      "columns": [],
      "rows": []
    },
    {
      "title": "Verify Presentation - JWT",
      "ctx": null,
      "suites": [],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "cT5ODpHc7i9Lff5L11X8K",
      "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/13-vp-jwt.js",
      "summary": {},
      "matrix": true,
      "report": true,
      "columns": [],
      "rows": []
    },
    {
      "title": "At Risk",
      "rowLabel": "Statement",
      "columnLabel": "Reason",
      "columns": [
        "At least 2 passing implementations"
      ],
      "rows": [
        {
          "id": "MUST not verify if \"proof.created\" property is missing.",
          "cells": [
            {
              "state": "failed"
            }
          ]
        }
      ]
    }
  ],
  "tables": [],
  "summary": [],
  "respecConfig": {
    "specStatus": "unofficial",
    "shortName": "vc-api-verifier-test-suite",
    "subtitle": "Test Interoperability Report for Verifiable Credentials API Verifier",
    "github": "https://github.com/w3c-ccg/vc-api-verifier-test-suite",
    "edDraftURI": "https://w3c-ccg.github.io/vc-api-verifier-test-suite/",
    "doJsonLd": true,
    "includePermalinks": false,
    "editors": [
      {
        "name": "Tashi D. Gyeltshen",
        "url": "https://github.com/JSAssassin",
        "company": "Digital Bazaar",
        "companyURL": "http://digitalbazaar.com/"
      }
    ],
    "authors": [
      {
        "name": "Tashi D. Gyeltshen",
        "url": "https://github.com/JSAssassin",
        "company": "Digital Bazaar",
        "companyURL": "http://digitalbazaar.com/"
      },
      {
        "name": "Manu Sporny",
        "url": "http://manu.sporny.org/",
        "company": "Digital Bazaar",
        "companyURL": "http://digitalbazaar.com/"
      }
    ]
  },
  "title": "VC API Verifier Interoperability Report 1.0",
  "stats": [],
  "statusMarkLabels": {
    "pending": {
      "icon": "🚫",
      "label": "Pending"
    },
    "passed": {
      "icon": "✓",
      "label": "Passed"
    },
    "failed": {
      "icon": "❌",
      "label": "Failed"
    },
    "accessDenied": {
      "icon": "⊘",
      "label": "Access Denied"
    },
    "timeout": {
      "icon": "⏱",
      "label": "Timeout"
    },
    "notImplemented": {
      "icon": "—",
      "label": "Not Implemented"
    }
  }
}