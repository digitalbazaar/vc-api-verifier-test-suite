{
  "matrices": [
    {
      "title": "Verify Credential - Data Integrity",
      "ctx": null,
      "suites": [
        {
          "title": "ACA-py",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC.",
              "body": "async function() {\n        // this tells the test report which cell in the interop matrix\n        // the result goes in\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({vc: validVc});\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error);\n        should.exist(result);\n        should.exist(result.status);\n        result.status.should.equal(200);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "AOe_-HGloPsHAhdLr6f_o",
              "ctx": null,
              "_testId": "urn:uuid:30019b1e-fdf6-409d-b704-5764d2db8897",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "ACA-py",
                "rowId": "MUST verify a valid VC."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 294,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 213,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected HTTPError: 2 validation errors for Creden… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",\"https://www.w3.org/ns/credentials/examples/v2\",\"https://w3id.org/security/suites/ed25519-2020/v1\"],\"id\":\"urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33\",\"type\":[\"VerifiableCredential\",\"AlumniCredential\"],\"name\":\"Alumni Credential\",\"description\":\"A minimum viable example of an Alumni Credential.\",\"issuer\":\"https://vc.example/issuers/5678\",\"validFrom\":\"2023-01-01T00:00:00Z\",\"credentialSubject\":{\"id\":\"did:example:abcdefgh\",\"alumniOf\":\"The School of Examples\"},\"proof\":{\"type\":\"Ed25519Signature2020\",\"created\":\"2023-02-24T23:36:38Z\",\"verificationMethod\":\"did:key:z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2#z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z57Mm1vboMtZiCyJ4aReZsv8co4Re64Y8GEjL1ZARzMbXZgkARFLqFs1P345NpPGG2hgCrS4nNdvJhpwnrNyG3kEF\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          "https://www.w3.org/ns/credentials/examples/v2",
                          "https://w3id.org/security/suites/ed25519-2020/v1"
                        ],
                        "id": "urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33",
                        "type": [
                          "VerifiableCredential",
                          "AlumniCredential"
                        ],
                        "name": "Alumni Credential",
                        "description": "A minimum viable example of an Alumni Credential.",
                        "issuer": "https://vc.example/issuers/5678",
                        "validFrom": "2023-01-01T00:00:00Z",
                        "credentialSubject": {
                          "id": "did:example:abcdefgh",
                          "alumniOf": "The School of Examples"
                        },
                        "proof": {
                          "type": "Ed25519Signature2020",
                          "created": "2023-02-24T23:36:38Z",
                          "verificationMethod": "did:key:z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2#z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z57Mm1vboMtZiCyJ4aReZsv8co4Re64Y8GEjL1ZARzMbXZgkARFLqFs1P345NpPGG2hgCrS4nNdvJhpwnrNyG3kEF"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://aca-py.test-suite.app/vc/credentials/verify",
                  "status": 400,
                  "data": {
                    "message": "2 validation errors for Credential\nproof.list[DataIntegrityProof]\n  Input should be a valid list [type=list_type, input_value={'type': 'Ed25519Signatur...gCrS4nNdvJhpwnrNyG3kEF'}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.9/v/list_type\nproof.DataIntegrityProof.cryptosuite\n  Field required [type=missing, input_value={'type': 'Ed25519Signatur...gCrS4nNdvJhpwnrNyG3kEF'}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.9/v/missing"
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: expected HTTPError: 2 validation errors for Creden… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:48:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noContextVc = klona(validVc);\n          delete noContextVc['@context'];\n          const body = createRequestBody({vc: noContextVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "AOe_-HGloPsHAhdLr6f_o",
              "ctx": null,
              "_testId": "urn:uuid:e90317d1-b90d-4e25-ac7c-4c437e8048b5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "ACA-py",
                "rowId": "MUST not verify if \"@context\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 511,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 32,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noTypeVc = klona(validVc);\n        delete noTypeVc.type;\n        const body = createRequestBody({vc: noTypeVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "AOe_-HGloPsHAhdLr6f_o",
              "ctx": null,
              "_testId": "urn:uuid:e6ee760f-e1ee-41d8-a11a-3510042a664a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "ACA-py",
                "rowId": "MUST not verify if \"type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 543,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 31,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noIssuerVc = klona(validVc);\n        delete noIssuerVc.issuer;\n        const body = createRequestBody({vc: noIssuerVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "AOe_-HGloPsHAhdLr6f_o",
              "ctx": null,
              "_testId": "urn:uuid:2445b8c4-bf99-4dc7-9eae-b51a5521c534",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "ACA-py",
                "rowId": "MUST not verify if \"issuer\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 574,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 27,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noCredentialSubjectVc = klona(validVc);\n          delete noCredentialSubjectVc.credentialSubject;\n          const body = createRequestBody({vc: noCredentialSubjectVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "AOe_-HGloPsHAhdLr6f_o",
              "ctx": null,
              "_testId": "urn:uuid:52f15d70-ed0c-4ad9-8598-34a420638ef9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "ACA-py",
                "rowId": "MUST not verify if \"credentialSubject\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 601,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 26,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noProofVc = klona(validVc);\n        delete noProofVc.proof;\n        const body = createRequestBody({vc: noProofVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "AOe_-HGloPsHAhdLr6f_o",
              "ctx": null,
              "_testId": "urn:uuid:47064dd8-309e-487c-b13e-9ca087f9a0bb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "ACA-py",
                "rowId": "MUST not verify if \"proof\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 628,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 32,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected status code 400 or 422.: expected 500 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 500,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Expected status code 400 or 422.: expected 500 to be one of [ 400, 422 ]\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:15:26)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:108:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.type\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofTypeVc = klona(validVc);\n          delete noProofTypeVc.proof.type;\n          const body = createRequestBody({vc: noProofTypeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "AOe_-HGloPsHAhdLr6f_o",
              "ctx": null,
              "_testId": "urn:uuid:0bf14455-33f1-4926-bfb9-06ddecd7304c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "ACA-py",
                "rowId": "MUST not verify if \"proof.type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 660,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 26,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.created\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofCreatedVc = klona(validVc);\n          delete noProofCreatedVc.proof.created;\n          const body = createRequestBody({vc: noProofCreatedVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "AOe_-HGloPsHAhdLr6f_o",
              "ctx": null,
              "_testId": "urn:uuid:28b008ab-1749-45bd-a15e-b6eaef21f9da",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "ACA-py",
                "rowId": "MUST not verify if \"proof.created\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 686,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 25,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.verificationMethod\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofVerificationMethodVc = klona(validVc);\n          delete noProofVerificationMethodVc.proof.verificationMethod;\n          const body = createRequestBody({vc: noProofVerificationMethodVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "AOe_-HGloPsHAhdLr6f_o",
              "ctx": null,
              "_testId": "urn:uuid:146e03d4-0242-4c65-9ee7-f17bbbc86f75",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "ACA-py",
                "rowId": "MUST not verify if \"proof.verificationMethod\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 712,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 25,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofValue\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofValueVc = klona(validVc);\n          delete noProofValueVc.proof.proofValue;\n          const body = createRequestBody({vc: noProofValueVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "AOe_-HGloPsHAhdLr6f_o",
              "ctx": null,
              "_testId": "urn:uuid:acd901b0-2299-4030-b8ef-8900c4418611",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "ACA-py",
                "rowId": "MUST not verify if \"proof.proofValue\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 737,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 25,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofPurpose\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofPurposeVc = klona(validVc);\n          delete noProofPurposeVc.proof.proofPurpose;\n          const body = createRequestBody({vc: noProofPurposeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "AOe_-HGloPsHAhdLr6f_o",
              "ctx": null,
              "_testId": "urn:uuid:5806ed8e-421c-4412-8d59-fa0b111d464d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "ACA-py",
                "rowId": "MUST not verify if \"proof.proofPurpose\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 763,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 27,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidContextTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidContextType of invalidContextTypes) {\n          copyVc['@context'] = invalidContextType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "AOe_-HGloPsHAhdLr6f_o",
              "ctx": null,
              "_testId": "urn:uuid:f732d37d-04dc-4de9-ac44-f9e66e8c63ce",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "ACA-py",
                "rowId": "MUST not verify if \"@context\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 790,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 235,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" items are not strings.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidContextItemTypes = [[], {}, null, undefined, 10, true];\n          for(const invalidContextItemType of invalidContextItemTypes) {\n            copyVc['@context'] = [invalidContextItemType];\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "AOe_-HGloPsHAhdLr6f_o",
              "ctx": null,
              "_testId": "urn:uuid:bfd0c455-2a97-4992-8891-f62c26f790cb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "ACA-py",
                "rowId": "MUST not verify if \"@context\" items are not strings."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1025,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 55,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected status code 400 or 422.: expected 500 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 500,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Expected status code 400 or 422.: expected 500 to be one of [ 400, 422 ]\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:15:26)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:196:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidType of invalidTypes) {\n          copyVc.type = invalidType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "AOe_-HGloPsHAhdLr6f_o",
              "ctx": null,
              "_testId": "urn:uuid:820f0337-1772-4e81-9d54-d9a5bdc314cd",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "ACA-py",
                "rowId": "MUST not verify if \"type\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1081,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 162,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" items are not strings.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypeItemTypes = [[], {}, null, undefined, 10, true];\n        for(const invalidItemType of invalidTypeItemTypes) {\n          copyVc.type = [invalidItemType];\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "AOe_-HGloPsHAhdLr6f_o",
              "ctx": null,
              "_testId": "urn:uuid:3670ce44-0e7a-4b56-bb4f-276308f8240e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "ACA-py",
                "rowId": "MUST not verify if \"type\" items are not strings."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1242,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 155,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" is not an object or a string.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidIssuerTypes = [[], null, undefined, 10, true];\n          for(const invalidIssuerType of invalidIssuerTypes) {\n            copyVc.issuer = invalidIssuerType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "AOe_-HGloPsHAhdLr6f_o",
              "ctx": null,
              "_testId": "urn:uuid:69252770-d165-49d1-84ad-cd3388a81862",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "ACA-py",
                "rowId": "MUST not verify if \"issuer\" is not an object or a string."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1398,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 126,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" is not an object.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidCredentialSubjectTypes = [\n            'string', null, undefined, 10, true, []\n          ];\n          for(const invalidType of invalidCredentialSubjectTypes) {\n            copyVc.credentialSubject = invalidType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "AOe_-HGloPsHAhdLr6f_o",
              "ctx": null,
              "_testId": "urn:uuid:93b8f7a8-8ba0-440d-95db-0963605b5ef7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "ACA-py",
                "rowId": "MUST not verify if \"credentialSubject\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1524,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 167,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" is not an object.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidProofTypes = ['string', null, undefined, 10, true, []];\n        for(const invalidProofType of invalidProofTypes) {\n          copyVc.proof = invalidProofType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "AOe_-HGloPsHAhdLr6f_o",
              "ctx": null,
              "_testId": "urn:uuid:9bba478d-5211-4d18-8105-bca70da7bb01",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "ACA-py",
                "rowId": "MUST not verify if \"proof\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1691,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 81,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected status code 400 or 422.: expected 500 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 500,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Expected status code 400 or 422.: expected 500 to be one of [ 400, 422 ]\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:15:26)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:270:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "N70v7KmkPRZoXXlX_hgBk",
          "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
          "_testId": "urn:uuid:9200019c-993c-4ec5-8d51-2b6227d98c54"
        },
        {
          "title": "apicatalog.com",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC.",
              "body": "async function() {\n        // this tells the test report which cell in the interop matrix\n        // the result goes in\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({vc: validVc});\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error);\n        should.exist(result);\n        should.exist(result.status);\n        result.status.should.equal(200);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "mAx_PESTu4vobhbslrz9-",
              "ctx": null,
              "_testId": "urn:uuid:5de52301-3ae7-4949-bf86-bfb80f1cf49b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "MUST verify a valid VC."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1772,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 3077,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noContextVc = klona(validVc);\n          delete noContextVc['@context'];\n          const body = createRequestBody({vc: noContextVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "mAx_PESTu4vobhbslrz9-",
              "ctx": null,
              "_testId": "urn:uuid:6db923a7-dc79-4169-8573-f4bdb9a51e94",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "MUST not verify if \"@context\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4850,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 43,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noTypeVc = klona(validVc);\n        delete noTypeVc.type;\n        const body = createRequestBody({vc: noTypeVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "mAx_PESTu4vobhbslrz9-",
              "ctx": null,
              "_testId": "urn:uuid:6b9387e6-9ee7-4424-a742-d0dfae6d0367",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "MUST not verify if \"type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4894,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 49,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noIssuerVc = klona(validVc);\n        delete noIssuerVc.issuer;\n        const body = createRequestBody({vc: noIssuerVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "mAx_PESTu4vobhbslrz9-",
              "ctx": null,
              "_testId": "urn:uuid:8ca29043-a0ef-4dcc-bd7b-cfc3988ac33f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "MUST not verify if \"issuer\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4943,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 52,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noCredentialSubjectVc = klona(validVc);\n          delete noCredentialSubjectVc.credentialSubject;\n          const body = createRequestBody({vc: noCredentialSubjectVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "mAx_PESTu4vobhbslrz9-",
              "ctx": null,
              "_testId": "urn:uuid:a6bb9dba-75c1-4c92-9371-661869b082ef",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "MUST not verify if \"credentialSubject\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4995,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 47,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noProofVc = klona(validVc);\n        delete noProofVc.proof;\n        const body = createRequestBody({vc: noProofVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "mAx_PESTu4vobhbslrz9-",
              "ctx": null,
              "_testId": "urn:uuid:80762647-7912-414e-a4ef-9040e5361318",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "MUST not verify if \"proof\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5043,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 46,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.type\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofTypeVc = klona(validVc);\n          delete noProofTypeVc.proof.type;\n          const body = createRequestBody({vc: noProofTypeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "mAx_PESTu4vobhbslrz9-",
              "ctx": null,
              "_testId": "urn:uuid:761edd95-4c04-4bed-b11f-22fefb4a3a66",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "MUST not verify if \"proof.type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5089,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 57,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.created\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofCreatedVc = klona(validVc);\n          delete noProofCreatedVc.proof.created;\n          const body = createRequestBody({vc: noProofCreatedVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "mAx_PESTu4vobhbslrz9-",
              "ctx": null,
              "_testId": "urn:uuid:991e24d4-71c2-4534-8003-70dc8e1a971e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "MUST not verify if \"proof.created\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5146,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 46,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.verificationMethod\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofVerificationMethodVc = klona(validVc);\n          delete noProofVerificationMethodVc.proof.verificationMethod;\n          const body = createRequestBody({vc: noProofVerificationMethodVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "mAx_PESTu4vobhbslrz9-",
              "ctx": null,
              "_testId": "urn:uuid:45748f81-a550-42a2-bb5e-4d494e0039cf",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "MUST not verify if \"proof.verificationMethod\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5193,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 47,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofValue\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofValueVc = klona(validVc);\n          delete noProofValueVc.proof.proofValue;\n          const body = createRequestBody({vc: noProofValueVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "mAx_PESTu4vobhbslrz9-",
              "ctx": null,
              "_testId": "urn:uuid:7f01af97-1455-4d21-be14-2ac3c2ff2e9d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "MUST not verify if \"proof.proofValue\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5241,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 45,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofPurpose\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofPurposeVc = klona(validVc);\n          delete noProofPurposeVc.proof.proofPurpose;\n          const body = createRequestBody({vc: noProofPurposeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "mAx_PESTu4vobhbslrz9-",
              "ctx": null,
              "_testId": "urn:uuid:6f5f1328-be1b-4d53-9a23-0d42ad7a46a7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "MUST not verify if \"proof.proofPurpose\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5286,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 49,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidContextTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidContextType of invalidContextTypes) {\n          copyVc['@context'] = invalidContextType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "mAx_PESTu4vobhbslrz9-",
              "ctx": null,
              "_testId": "urn:uuid:c3d1d7d5-7c95-4762-ba18-3169c124f56c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "MUST not verify if \"@context\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5336,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 295,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" items are not strings.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidContextItemTypes = [[], {}, null, undefined, 10, true];\n          for(const invalidContextItemType of invalidContextItemTypes) {\n            copyVc['@context'] = [invalidContextItemType];\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "mAx_PESTu4vobhbslrz9-",
              "ctx": null,
              "_testId": "urn:uuid:13cc9a2e-8ff6-4ab4-8a14-2583da44cc22",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "MUST not verify if \"@context\" items are not strings."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5631,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 257,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidType of invalidTypes) {\n          copyVc.type = invalidType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "mAx_PESTu4vobhbslrz9-",
              "ctx": null,
              "_testId": "urn:uuid:02adc570-ea9a-40ce-82b3-9a403de1f91d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "MUST not verify if \"type\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5889,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 271,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" items are not strings.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypeItemTypes = [[], {}, null, undefined, 10, true];\n        for(const invalidItemType of invalidTypeItemTypes) {\n          copyVc.type = [invalidItemType];\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "mAx_PESTu4vobhbslrz9-",
              "ctx": null,
              "_testId": "urn:uuid:90db6ee8-e52c-48cd-8542-09750982415c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "MUST not verify if \"type\" items are not strings."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6160,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 252,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" is not an object or a string.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidIssuerTypes = [[], null, undefined, 10, true];\n          for(const invalidIssuerType of invalidIssuerTypes) {\n            copyVc.issuer = invalidIssuerType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "mAx_PESTu4vobhbslrz9-",
              "ctx": null,
              "_testId": "urn:uuid:cb547a6d-9635-4eb9-8f24-84aabfbf9651",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "MUST not verify if \"issuer\" is not an object or a string."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6412,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 223,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" is not an object.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidCredentialSubjectTypes = [\n            'string', null, undefined, 10, true, []\n          ];\n          for(const invalidType of invalidCredentialSubjectTypes) {\n            copyVc.credentialSubject = invalidType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "mAx_PESTu4vobhbslrz9-",
              "ctx": null,
              "_testId": "urn:uuid:e476362d-7198-4408-8dc0-65e6329d8558",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "MUST not verify if \"credentialSubject\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6634,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 275,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" is not an object.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidProofTypes = ['string', null, undefined, 10, true, []];\n        for(const invalidProofType of invalidProofTypes) {\n          copyVc.proof = invalidProofType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "mAx_PESTu4vobhbslrz9-",
              "ctx": null,
              "_testId": "urn:uuid:b6d5a339-e6f0-4cf9-aa42-2814759968d0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "MUST not verify if \"proof\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6910,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 258,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "N70v7KmkPRZoXXlX_hgBk",
          "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
          "_testId": "urn:uuid:a229070d-d8af-4293-83c0-cae9fefed848"
        },
        {
          "title": "Danube Tech",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC.",
              "body": "async function() {\n        // this tells the test report which cell in the interop matrix\n        // the result goes in\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({vc: validVc});\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error);\n        should.exist(result);\n        should.exist(result.status);\n        result.status.should.equal(200);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "_UkIhtjzW3MWxNhOVRP61",
              "ctx": null,
              "_testId": "urn:uuid:179d4ee5-6e59-405e-87c4-713c840c6667",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST verify a valid VC."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7168,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 967,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",\"https://www.w3.org/ns/credentials/examples/v2\",\"https://w3id.org/security/suites/ed25519-2020/v1\"],\"id\":\"urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33\",\"type\":[\"VerifiableCredential\",\"AlumniCredential\"],\"name\":\"Alumni Credential\",\"description\":\"A minimum viable example of an Alumni Credential.\",\"issuer\":\"https://vc.example/issuers/5678\",\"validFrom\":\"2023-01-01T00:00:00Z\",\"credentialSubject\":{\"id\":\"did:example:abcdefgh\",\"alumniOf\":\"The School of Examples\"},\"proof\":{\"type\":\"Ed25519Signature2020\",\"created\":\"2023-02-24T23:36:38Z\",\"verificationMethod\":\"did:key:z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2#z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z57Mm1vboMtZiCyJ4aReZsv8co4Re64Y8GEjL1ZARzMbXZgkARFLqFs1P345NpPGG2hgCrS4nNdvJhpwnrNyG3kEF\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          "https://www.w3.org/ns/credentials/examples/v2",
                          "https://w3id.org/security/suites/ed25519-2020/v1"
                        ],
                        "id": "urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33",
                        "type": [
                          "VerifiableCredential",
                          "AlumniCredential"
                        ],
                        "name": "Alumni Credential",
                        "description": "A minimum viable example of an Alumni Credential.",
                        "issuer": "https://vc.example/issuers/5678",
                        "validFrom": "2023-01-01T00:00:00Z",
                        "credentialSubject": {
                          "id": "did:example:abcdefgh",
                          "alumniOf": "The School of Examples"
                        },
                        "proof": {
                          "type": "Ed25519Signature2020",
                          "created": "2023-02-24T23:36:38Z",
                          "verificationMethod": "did:key:z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2#z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z57Mm1vboMtZiCyJ4aReZsv8co4Re64Y8GEjL1ZARzMbXZgkARFLqFs1P345NpPGG2hgCrS4nNdvJhpwnrNyG3kEF"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://univerifier.io/1.0/credentials/verify",
                  "status": 400,
                  "data": {
                    "checks": []
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:48:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noContextVc = klona(validVc);\n          delete noContextVc['@context'];\n          const body = createRequestBody({vc: noContextVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "_UkIhtjzW3MWxNhOVRP61",
              "ctx": null,
              "_testId": "urn:uuid:8be4c3f9-7da7-4cd6-974d-4407a20ac5c2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST not verify if \"@context\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8136,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 111,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noTypeVc = klona(validVc);\n        delete noTypeVc.type;\n        const body = createRequestBody({vc: noTypeVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "_UkIhtjzW3MWxNhOVRP61",
              "ctx": null,
              "_testId": "urn:uuid:3c1629dc-7251-498b-9c33-a27b1862bbc4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST not verify if \"type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8247,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 644,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noIssuerVc = klona(validVc);\n        delete noIssuerVc.issuer;\n        const body = createRequestBody({vc: noIssuerVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "_UkIhtjzW3MWxNhOVRP61",
              "ctx": null,
              "_testId": "urn:uuid:52b57baf-fc6b-42bb-9d0d-0815677bf383",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST not verify if \"issuer\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8891,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 432,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noCredentialSubjectVc = klona(validVc);\n          delete noCredentialSubjectVc.credentialSubject;\n          const body = createRequestBody({vc: noCredentialSubjectVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "_UkIhtjzW3MWxNhOVRP61",
              "ctx": null,
              "_testId": "urn:uuid:78f0e562-e491-445a-973e-da4964aca214",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST not verify if \"credentialSubject\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9324,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 388,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noProofVc = klona(validVc);\n        delete noProofVc.proof;\n        const body = createRequestBody({vc: noProofVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "_UkIhtjzW3MWxNhOVRP61",
              "ctx": null,
              "_testId": "urn:uuid:9208776d-dcb1-46ac-b2e4-a66c338245de",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST not verify if \"proof\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9712,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 390,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.type\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofTypeVc = klona(validVc);\n          delete noProofTypeVc.proof.type;\n          const body = createRequestBody({vc: noProofTypeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "_UkIhtjzW3MWxNhOVRP61",
              "ctx": null,
              "_testId": "urn:uuid:caefd0b9-c80f-4f73-8cb8-50118216f34a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST not verify if \"proof.type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10101,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 425,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.created\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofCreatedVc = klona(validVc);\n          delete noProofCreatedVc.proof.created;\n          const body = createRequestBody({vc: noProofCreatedVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "_UkIhtjzW3MWxNhOVRP61",
              "ctx": null,
              "_testId": "urn:uuid:5b87612f-d70b-47c5-a0d9-6084ab82570c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST not verify if \"proof.created\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10527,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 399,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.verificationMethod\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofVerificationMethodVc = klona(validVc);\n          delete noProofVerificationMethodVc.proof.verificationMethod;\n          const body = createRequestBody({vc: noProofVerificationMethodVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "_UkIhtjzW3MWxNhOVRP61",
              "ctx": null,
              "_testId": "urn:uuid:c02712f7-4f63-4571-95a1-8df12fb42e95",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST not verify if \"proof.verificationMethod\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10926,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 680,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofValue\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofValueVc = klona(validVc);\n          delete noProofValueVc.proof.proofValue;\n          const body = createRequestBody({vc: noProofValueVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "_UkIhtjzW3MWxNhOVRP61",
              "ctx": null,
              "_testId": "urn:uuid:21b0e98b-206a-4d3e-b111-1191c0b29ba6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST not verify if \"proof.proofValue\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11606,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 397,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofPurpose\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofPurposeVc = klona(validVc);\n          delete noProofPurposeVc.proof.proofPurpose;\n          const body = createRequestBody({vc: noProofPurposeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "_UkIhtjzW3MWxNhOVRP61",
              "ctx": null,
              "_testId": "urn:uuid:2b90dbcd-3592-4cfa-8fad-081da1a6049c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST not verify if \"proof.proofPurpose\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 12003,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 405,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidContextTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidContextType of invalidContextTypes) {\n          copyVc['@context'] = invalidContextType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "_UkIhtjzW3MWxNhOVRP61",
              "ctx": null,
              "_testId": "urn:uuid:7319d25c-49c4-4194-bdeb-60f24defbac5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST not verify if \"@context\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 12408,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1132,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" items are not strings.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidContextItemTypes = [[], {}, null, undefined, 10, true];\n          for(const invalidContextItemType of invalidContextItemTypes) {\n            copyVc['@context'] = [invalidContextItemType];\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "_UkIhtjzW3MWxNhOVRP61",
              "ctx": null,
              "_testId": "urn:uuid:2f21e6de-840e-4be6-800b-ac956efd713b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST not verify if \"@context\" items are not strings."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13540,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 655,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidType of invalidTypes) {\n          copyVc.type = invalidType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "_UkIhtjzW3MWxNhOVRP61",
              "ctx": null,
              "_testId": "urn:uuid:1a0ef892-f494-41dd-bfd7-6715424c0e2f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST not verify if \"type\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14196,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2597,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" items are not strings.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypeItemTypes = [[], {}, null, undefined, 10, true];\n        for(const invalidItemType of invalidTypeItemTypes) {\n          copyVc.type = [invalidItemType];\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "_UkIhtjzW3MWxNhOVRP61",
              "ctx": null,
              "_testId": "urn:uuid:c0a31a73-2df4-4e6d-8840-2fadd8c1e442",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST not verify if \"type\" items are not strings."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16793,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 3563,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" is not an object or a string.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidIssuerTypes = [[], null, undefined, 10, true];\n          for(const invalidIssuerType of invalidIssuerTypes) {\n            copyVc.issuer = invalidIssuerType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "_UkIhtjzW3MWxNhOVRP61",
              "ctx": null,
              "_testId": "urn:uuid:b0d353d9-a915-4024-9198-ec2738ca9254",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST not verify if \"issuer\" is not an object or a string."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20356,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2070,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" is not an object.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidCredentialSubjectTypes = [\n            'string', null, undefined, 10, true, []\n          ];\n          for(const invalidType of invalidCredentialSubjectTypes) {\n            copyVc.credentialSubject = invalidType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "_UkIhtjzW3MWxNhOVRP61",
              "ctx": null,
              "_testId": "urn:uuid:6ce34f66-fe60-4308-af72-e417cab9ab07",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST not verify if \"credentialSubject\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22427,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2411,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" is not an object.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidProofTypes = ['string', null, undefined, 10, true, []];\n        for(const invalidProofType of invalidProofTypes) {\n          copyVc.proof = invalidProofType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "_UkIhtjzW3MWxNhOVRP61",
              "ctx": null,
              "_testId": "urn:uuid:bf68b866-b54e-465a-9848-6bc7202db864",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST not verify if \"proof\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 24838,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 767,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "N70v7KmkPRZoXXlX_hgBk",
          "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
          "_testId": "urn:uuid:b47b18a0-67cd-4660-a06b-b3ee850f0d12"
        },
        {
          "title": "Digital Bazaar",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC.",
              "body": "async function() {\n        // this tells the test report which cell in the interop matrix\n        // the result goes in\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({vc: validVc});\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error);\n        should.exist(result);\n        should.exist(result.status);\n        result.status.should.equal(200);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "_dPXADbOS22P5WN0MjTy7",
              "ctx": null,
              "_testId": "urn:uuid:8a0472a3-0af2-464e-85e8-b95a0a2f8825",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST verify a valid VC."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25606,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 209,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected HTTPError: Authorization error. { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          "https://www.w3.org/ns/credentials/examples/v2",
                          "https://w3id.org/security/suites/ed25519-2020/v1"
                        ],
                        "id": "urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33",
                        "type": [
                          "VerifiableCredential",
                          "AlumniCredential"
                        ],
                        "name": "Alumni Credential",
                        "description": "A minimum viable example of an Alumni Credential.",
                        "issuer": "https://vc.example/issuers/5678",
                        "validFrom": "2023-01-01T00:00:00Z",
                        "credentialSubject": {
                          "id": "did:example:abcdefgh",
                          "alumniOf": "The School of Examples"
                        },
                        "proof": {
                          "type": "Ed25519Signature2020",
                          "created": "2023-02-24T23:36:38Z",
                          "verificationMethod": "did:key:z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2#z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z57Mm1vboMtZiCyJ4aReZsv8co4Re64Y8GEjL1ZARzMbXZgkARFLqFs1P345NpPGG2hgCrS4nNdvJhpwnrNyG3kEF"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half",
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",\"https://www.w3.org/ns/credentials/examples/v2\",\"https://w3id.org/security/suites/ed25519-2020/v1\"],\"id\":\"urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33\",\"type\":[\"VerifiableCredential\",\"AlumniCredential\"],\"name\":\"Alumni Credential\",\"description\":\"A minimum viable example of an Alumni Credential.\",\"issuer\":\"https://vc.example/issuers/5678\",\"validFrom\":\"2023-01-01T00:00:00Z\",\"credentialSubject\":{\"id\":\"did:example:abcdefgh\",\"alumniOf\":\"The School of Examples\"},\"proof\":{\"type\":\"Ed25519Signature2020\",\"created\":\"2023-02-24T23:36:38Z\",\"verificationMethod\":\"did:key:z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2#z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z57Mm1vboMtZiCyJ4aReZsv8co4Re64Y8GEjL1ZARzMbXZgkARFLqFs1P345NpPGG2hgCrS4nNdvJhpwnrNyG3kEF\"}},\"options\":{\"checks\":[\"proof\"]}}"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://verifier.qa.veres.app/verifiers/z19jXQPi819fJVaBRFxZXqXay/credentials/verify",
                  "status": 403,
                  "data": {
                    "name": "NotAllowedError",
                    "message": "Authorization error.",
                    "details": {
                      "httpStatusCode": 403
                    },
                    "cause": {
                      "name": "Error",
                      "message": "The invoked capability has expired.",
                      "details": {},
                      "cause": {
                        "message": "An unspecified error occurred.",
                        "name": "OperationError",
                        "type": "OperationError"
                      },
                      "stack": "Error: The invoked capability has expired.\n    at onError (file:///home/node/app/node_modules/@bedrock/service-core/lib/http/middleware.js:188:13)\n    at Module.handleError (file:///home/node/app/node_modules/@digitalbazaar/ezcap-express/lib/helpers.js:145:12)\n    at file:///home/node/app/node_modules/@digitalbazaar/ezcap-express/lib/authorize.js:137:15\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                      "type": "Error"
                    },
                    "stack": "NotAllowedError: Authorization error.\n    at onError (file:///home/node/app/node_modules/@bedrock/service-core/lib/http/middleware.js:195:9)\n    at Module.handleError (file:///home/node/app/node_modules/@digitalbazaar/ezcap-express/lib/helpers.js:145:12)\n    at file:///home/node/app/node_modules/@digitalbazaar/ezcap-express/lib/authorize.js:137:15\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                    "type": "NotAllowedError"
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: expected HTTPError: Authorization error. { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:48:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noContextVc = klona(validVc);\n          delete noContextVc['@context'];\n          const body = createRequestBody({vc: noContextVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "_dPXADbOS22P5WN0MjTy7",
              "ctx": null,
              "_testId": "urn:uuid:c08dcb39-a09a-4537-b389-c9860e3358f2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST not verify if \"@context\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25816,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 49,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noTypeVc = klona(validVc);\n        delete noTypeVc.type;\n        const body = createRequestBody({vc: noTypeVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "_dPXADbOS22P5WN0MjTy7",
              "ctx": null,
              "_testId": "urn:uuid:bd7c99ed-d3ce-4709-85ab-dfaa028aa1b7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST not verify if \"type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25864,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 34,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noIssuerVc = klona(validVc);\n        delete noIssuerVc.issuer;\n        const body = createRequestBody({vc: noIssuerVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "_dPXADbOS22P5WN0MjTy7",
              "ctx": null,
              "_testId": "urn:uuid:61085e87-b22e-4db5-b4ba-f0b1a2e23dea",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST not verify if \"issuer\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25899,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 35,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noCredentialSubjectVc = klona(validVc);\n          delete noCredentialSubjectVc.credentialSubject;\n          const body = createRequestBody({vc: noCredentialSubjectVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "_dPXADbOS22P5WN0MjTy7",
              "ctx": null,
              "_testId": "urn:uuid:774fda60-6b75-4f9b-8f27-075cc9cebc0c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST not verify if \"credentialSubject\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25934,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 34,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noProofVc = klona(validVc);\n        delete noProofVc.proof;\n        const body = createRequestBody({vc: noProofVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "_dPXADbOS22P5WN0MjTy7",
              "ctx": null,
              "_testId": "urn:uuid:03408886-3473-4d3e-afe4-6a83b846bfdb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST not verify if \"proof\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25969,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 45,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected status code 400 or 422.: expected 403 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 403,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Expected status code 400 or 422.: expected 403 to be one of [ 400, 422 ]\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:15:26)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:108:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.type\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofTypeVc = klona(validVc);\n          delete noProofTypeVc.proof.type;\n          const body = createRequestBody({vc: noProofTypeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "_dPXADbOS22P5WN0MjTy7",
              "ctx": null,
              "_testId": "urn:uuid:1899d1fb-ac89-4a55-a4ef-ad83ccc28aa7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST not verify if \"proof.type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26014,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 40,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected status code 400 or 422.: expected 403 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 403,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Expected status code 400 or 422.: expected 403 to be one of [ 400, 422 ]\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:15:26)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:120:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.created\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofCreatedVc = klona(validVc);\n          delete noProofCreatedVc.proof.created;\n          const body = createRequestBody({vc: noProofCreatedVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "_dPXADbOS22P5WN0MjTy7",
              "ctx": null,
              "_testId": "urn:uuid:773db781-382e-45cc-8a8e-557630a88761",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST not verify if \"proof.created\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26055,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 38,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected status code 400 or 422.: expected 403 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 403,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Expected status code 400 or 422.: expected 403 to be one of [ 400, 422 ]\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:15:26)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:132:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.verificationMethod\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofVerificationMethodVc = klona(validVc);\n          delete noProofVerificationMethodVc.proof.verificationMethod;\n          const body = createRequestBody({vc: noProofVerificationMethodVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "_dPXADbOS22P5WN0MjTy7",
              "ctx": null,
              "_testId": "urn:uuid:6e86348e-95e1-4133-8de4-6b32beb5feea",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST not verify if \"proof.verificationMethod\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26093,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 36,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected status code 400 or 422.: expected 403 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 403,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Expected status code 400 or 422.: expected 403 to be one of [ 400, 422 ]\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:15:26)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:144:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofValue\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofValueVc = klona(validVc);\n          delete noProofValueVc.proof.proofValue;\n          const body = createRequestBody({vc: noProofValueVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "_dPXADbOS22P5WN0MjTy7",
              "ctx": null,
              "_testId": "urn:uuid:097f6bd8-b39c-499f-8bb5-404fceb15fc1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST not verify if \"proof.proofValue\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26129,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 36,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected status code 400 or 422.: expected 403 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 403,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Expected status code 400 or 422.: expected 403 to be one of [ 400, 422 ]\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:15:26)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:156:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofPurpose\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofPurposeVc = klona(validVc);\n          delete noProofPurposeVc.proof.proofPurpose;\n          const body = createRequestBody({vc: noProofPurposeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "_dPXADbOS22P5WN0MjTy7",
              "ctx": null,
              "_testId": "urn:uuid:bdad315d-7258-42a2-8f0f-a16f798d3b1a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST not verify if \"proof.proofPurpose\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26165,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 38,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected status code 400 or 422.: expected 403 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 403,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Expected status code 400 or 422.: expected 403 to be one of [ 400, 422 ]\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:15:26)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:168:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidContextTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidContextType of invalidContextTypes) {\n          copyVc['@context'] = invalidContextType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "_dPXADbOS22P5WN0MjTy7",
              "ctx": null,
              "_testId": "urn:uuid:cbbd4707-0e07-45d6-977d-69d4329827dc",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST not verify if \"@context\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26203,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 230,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" items are not strings.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidContextItemTypes = [[], {}, null, undefined, 10, true];\n          for(const invalidContextItemType of invalidContextItemTypes) {\n            copyVc['@context'] = [invalidContextItemType];\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "_dPXADbOS22P5WN0MjTy7",
              "ctx": null,
              "_testId": "urn:uuid:eada148a-404c-4d91-8e82-e4e9c6b1e725",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST not verify if \"@context\" items are not strings."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26433,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 199,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidType of invalidTypes) {\n          copyVc.type = invalidType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "_dPXADbOS22P5WN0MjTy7",
              "ctx": null,
              "_testId": "urn:uuid:30a26d3c-8b3b-492a-9d68-265d64ed0eb2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST not verify if \"type\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26633,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 253,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" items are not strings.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypeItemTypes = [[], {}, null, undefined, 10, true];\n        for(const invalidItemType of invalidTypeItemTypes) {\n          copyVc.type = [invalidItemType];\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "_dPXADbOS22P5WN0MjTy7",
              "ctx": null,
              "_testId": "urn:uuid:ec36ce8a-04b6-460f-8dc6-a6d28cd514fc",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST not verify if \"type\" items are not strings."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26886,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 199,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" is not an object or a string.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidIssuerTypes = [[], null, undefined, 10, true];\n          for(const invalidIssuerType of invalidIssuerTypes) {\n            copyVc.issuer = invalidIssuerType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "_dPXADbOS22P5WN0MjTy7",
              "ctx": null,
              "_testId": "urn:uuid:05ce44c6-ed8f-450e-a2cb-420231f6ef01",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST not verify if \"issuer\" is not an object or a string."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27084,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 165,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" is not an object.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidCredentialSubjectTypes = [\n            'string', null, undefined, 10, true, []\n          ];\n          for(const invalidType of invalidCredentialSubjectTypes) {\n            copyVc.credentialSubject = invalidType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "_dPXADbOS22P5WN0MjTy7",
              "ctx": null,
              "_testId": "urn:uuid:a209898d-f57b-470b-beac-b60766c8e937",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST not verify if \"credentialSubject\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27249,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 205,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" is not an object.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidProofTypes = ['string', null, undefined, 10, true, []];\n        for(const invalidProofType of invalidProofTypes) {\n          copyVc.proof = invalidProofType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "_dPXADbOS22P5WN0MjTy7",
              "ctx": null,
              "_testId": "urn:uuid:08a0bc8b-7e90-4ab1-b54d-b5002c682fc4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST not verify if \"proof\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27455,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 102,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected status code 400 or 422.: expected 403 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 403,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Expected status code 400 or 422.: expected 403 to be one of [ 400, 422 ]\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:15:26)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:270:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "N70v7KmkPRZoXXlX_hgBk",
          "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
          "_testId": "urn:uuid:3538ca41-8ae1-4296-9cf0-3f23f11b3fb0"
        },
        {
          "title": "EWF",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC.",
              "body": "async function() {\n        // this tells the test report which cell in the interop matrix\n        // the result goes in\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({vc: validVc});\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error);\n        should.exist(result);\n        should.exist(result.status);\n        result.status.should.equal(200);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "Uyk6JwVHU3SoEbycQ9XnY",
              "ctx": null,
              "_testId": "urn:uuid:2d2e33cd-8e7b-4c5b-9927-95a0c50d05b8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "MUST verify a valid VC."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27558,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 546,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected HTTPError { …(7) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",\"https://www.w3.org/ns/credentials/examples/v2\",\"https://w3id.org/security/suites/ed25519-2020/v1\"],\"id\":\"urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33\",\"type\":[\"VerifiableCredential\",\"AlumniCredential\"],\"name\":\"Alumni Credential\",\"description\":\"A minimum viable example of an Alumni Credential.\",\"issuer\":\"https://vc.example/issuers/5678\",\"validFrom\":\"2023-01-01T00:00:00Z\",\"credentialSubject\":{\"id\":\"did:example:abcdefgh\",\"alumniOf\":\"The School of Examples\"},\"proof\":{\"type\":\"Ed25519Signature2020\",\"created\":\"2023-02-24T23:36:38Z\",\"verificationMethod\":\"did:key:z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2#z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z57Mm1vboMtZiCyJ4aReZsv8co4Re64Y8GEjL1ZARzMbXZgkARFLqFs1P345NpPGG2hgCrS4nNdvJhpwnrNyG3kEF\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          "https://www.w3.org/ns/credentials/examples/v2",
                          "https://w3id.org/security/suites/ed25519-2020/v1"
                        ],
                        "id": "urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33",
                        "type": [
                          "VerifiableCredential",
                          "AlumniCredential"
                        ],
                        "name": "Alumni Credential",
                        "description": "A minimum viable example of an Alumni Credential.",
                        "issuer": "https://vc.example/issuers/5678",
                        "validFrom": "2023-01-01T00:00:00Z",
                        "credentialSubject": {
                          "id": "did:example:abcdefgh",
                          "alumniOf": "The School of Examples"
                        },
                        "proof": {
                          "type": "Ed25519Signature2020",
                          "created": "2023-02-24T23:36:38Z",
                          "verificationMethod": "did:key:z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2#z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z57Mm1vboMtZiCyJ4aReZsv8co4Re64Y8GEjL1ZARzMbXZgkARFLqFs1P345NpPGG2hgCrS4nNdvJhpwnrNyG3kEF"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc-api-dev.energyweb.org/v1/vc-api/credentials/verify",
                  "status": 400,
                  "data": {
                    "message": [
                      "verifiableCredential.issuanceDate must be a valid ISO 8601 date string"
                    ],
                    "error": "Bad Request",
                    "statusCode": 400
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: expected HTTPError { …(7) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:48:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noContextVc = klona(validVc);\n          delete noContextVc['@context'];\n          const body = createRequestBody({vc: noContextVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "Uyk6JwVHU3SoEbycQ9XnY",
              "ctx": null,
              "_testId": "urn:uuid:08740375-0504-49b2-b8c5-f67e38efbe94",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "MUST not verify if \"@context\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28104,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 90,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noTypeVc = klona(validVc);\n        delete noTypeVc.type;\n        const body = createRequestBody({vc: noTypeVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "Uyk6JwVHU3SoEbycQ9XnY",
              "ctx": null,
              "_testId": "urn:uuid:1f69c69f-c9ac-4698-8b85-48f678c7e923",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "MUST not verify if \"type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28195,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 90,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noIssuerVc = klona(validVc);\n        delete noIssuerVc.issuer;\n        const body = createRequestBody({vc: noIssuerVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "Uyk6JwVHU3SoEbycQ9XnY",
              "ctx": null,
              "_testId": "urn:uuid:9396db9b-9034-454e-ad11-4f227fdf764d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "MUST not verify if \"issuer\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28286,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 92,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noCredentialSubjectVc = klona(validVc);\n          delete noCredentialSubjectVc.credentialSubject;\n          const body = createRequestBody({vc: noCredentialSubjectVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "Uyk6JwVHU3SoEbycQ9XnY",
              "ctx": null,
              "_testId": "urn:uuid:01be421f-4b5a-453b-95a2-ceba7f43acd8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "MUST not verify if \"credentialSubject\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28379,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 94,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noProofVc = klona(validVc);\n        delete noProofVc.proof;\n        const body = createRequestBody({vc: noProofVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "Uyk6JwVHU3SoEbycQ9XnY",
              "ctx": null,
              "_testId": "urn:uuid:d1b1a6fd-18cd-4d22-b3e8-105660c118ee",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "MUST not verify if \"proof\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28473,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 90,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.type\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofTypeVc = klona(validVc);\n          delete noProofTypeVc.proof.type;\n          const body = createRequestBody({vc: noProofTypeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "Uyk6JwVHU3SoEbycQ9XnY",
              "ctx": null,
              "_testId": "urn:uuid:da61d344-0275-494f-8932-58dac909dfad",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "MUST not verify if \"proof.type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28563,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 91,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.created\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofCreatedVc = klona(validVc);\n          delete noProofCreatedVc.proof.created;\n          const body = createRequestBody({vc: noProofCreatedVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "Uyk6JwVHU3SoEbycQ9XnY",
              "ctx": null,
              "_testId": "urn:uuid:8c903d58-d360-43a1-8d04-fd0bb33aa412",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "MUST not verify if \"proof.created\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28655,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 90,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.verificationMethod\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofVerificationMethodVc = klona(validVc);\n          delete noProofVerificationMethodVc.proof.verificationMethod;\n          const body = createRequestBody({vc: noProofVerificationMethodVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "Uyk6JwVHU3SoEbycQ9XnY",
              "ctx": null,
              "_testId": "urn:uuid:f025ef8b-c376-4ff5-991b-c365f5331fa4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "MUST not verify if \"proof.verificationMethod\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28745,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 92,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofValue\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofValueVc = klona(validVc);\n          delete noProofValueVc.proof.proofValue;\n          const body = createRequestBody({vc: noProofValueVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "Uyk6JwVHU3SoEbycQ9XnY",
              "ctx": null,
              "_testId": "urn:uuid:744565fd-8ddd-4871-8fea-5d38fd069ce0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "MUST not verify if \"proof.proofValue\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28837,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 92,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofPurpose\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofPurposeVc = klona(validVc);\n          delete noProofPurposeVc.proof.proofPurpose;\n          const body = createRequestBody({vc: noProofPurposeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "Uyk6JwVHU3SoEbycQ9XnY",
              "ctx": null,
              "_testId": "urn:uuid:1f22f07a-ef73-4bc1-aaf4-207092537e55",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "MUST not verify if \"proof.proofPurpose\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28929,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 90,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidContextTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidContextType of invalidContextTypes) {\n          copyVc['@context'] = invalidContextType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "Uyk6JwVHU3SoEbycQ9XnY",
              "ctx": null,
              "_testId": "urn:uuid:cfd1c97c-aac9-4403-b45b-29de81f547e8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "MUST not verify if \"@context\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29020,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 817,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" items are not strings.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidContextItemTypes = [[], {}, null, undefined, 10, true];\n          for(const invalidContextItemType of invalidContextItemTypes) {\n            copyVc['@context'] = [invalidContextItemType];\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "Uyk6JwVHU3SoEbycQ9XnY",
              "ctx": null,
              "_testId": "urn:uuid:6b6766d8-aa4f-417c-b870-17d2361c9221",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "MUST not verify if \"@context\" items are not strings."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29837,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 553,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidType of invalidTypes) {\n          copyVc.type = invalidType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "Uyk6JwVHU3SoEbycQ9XnY",
              "ctx": null,
              "_testId": "urn:uuid:98a77d21-04b5-4b5b-80bf-949620d86305",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "MUST not verify if \"type\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30391,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 564,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" items are not strings.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypeItemTypes = [[], {}, null, undefined, 10, true];\n        for(const invalidItemType of invalidTypeItemTypes) {\n          copyVc.type = [invalidItemType];\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "Uyk6JwVHU3SoEbycQ9XnY",
              "ctx": null,
              "_testId": "urn:uuid:f324d208-7a1f-413a-ab82-9c7ba2946ac1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "MUST not verify if \"type\" items are not strings."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30955,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 534,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" is not an object or a string.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidIssuerTypes = [[], null, undefined, 10, true];\n          for(const invalidIssuerType of invalidIssuerTypes) {\n            copyVc.issuer = invalidIssuerType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "Uyk6JwVHU3SoEbycQ9XnY",
              "ctx": null,
              "_testId": "urn:uuid:631ee1df-137f-4119-9e0a-3fb935bc7ba5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "MUST not verify if \"issuer\" is not an object or a string."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31489,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 445,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" is not an object.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidCredentialSubjectTypes = [\n            'string', null, undefined, 10, true, []\n          ];\n          for(const invalidType of invalidCredentialSubjectTypes) {\n            copyVc.credentialSubject = invalidType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "Uyk6JwVHU3SoEbycQ9XnY",
              "ctx": null,
              "_testId": "urn:uuid:fcdf56ec-60c5-4f0b-a45c-f1b3df76eb68",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "MUST not verify if \"credentialSubject\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31934,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 537,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" is not an object.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidProofTypes = ['string', null, undefined, 10, true, []];\n        for(const invalidProofType of invalidProofTypes) {\n          copyVc.proof = invalidProofType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "Uyk6JwVHU3SoEbycQ9XnY",
              "ctx": null,
              "_testId": "urn:uuid:7757e7b1-6c1d-4181-b713-81e4a001d5d7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "MUST not verify if \"proof\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32472,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 535,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "N70v7KmkPRZoXXlX_hgBk",
          "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
          "_testId": "urn:uuid:09568536-2679-4831-9f74-db267e0a6171"
        },
        {
          "title": "LearnCard",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC.",
              "body": "async function() {\n        // this tells the test report which cell in the interop matrix\n        // the result goes in\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({vc: validVc});\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error);\n        should.exist(result);\n        should.exist(result.status);\n        result.status.should.equal(200);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "5oEvMqGzI6CDXT8zSgOUa",
              "ctx": null,
              "_testId": "urn:uuid:49167625-7c8e-4214-8f7b-17e6c6cb3298",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "MUST verify a valid VC."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33007,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 148,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",\"https://www.w3.org/ns/credentials/examples/v2\",\"https://w3id.org/security/suites/ed25519-2020/v1\"],\"id\":\"urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33\",\"type\":[\"VerifiableCredential\",\"AlumniCredential\"],\"name\":\"Alumni Credential\",\"description\":\"A minimum viable example of an Alumni Credential.\",\"issuer\":\"https://vc.example/issuers/5678\",\"validFrom\":\"2023-01-01T00:00:00Z\",\"credentialSubject\":{\"id\":\"did:example:abcdefgh\",\"alumniOf\":\"The School of Examples\"},\"proof\":{\"type\":\"Ed25519Signature2020\",\"created\":\"2023-02-24T23:36:38Z\",\"verificationMethod\":\"did:key:z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2#z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z57Mm1vboMtZiCyJ4aReZsv8co4Re64Y8GEjL1ZARzMbXZgkARFLqFs1P345NpPGG2hgCrS4nNdvJhpwnrNyG3kEF\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          "https://www.w3.org/ns/credentials/examples/v2",
                          "https://w3id.org/security/suites/ed25519-2020/v1"
                        ],
                        "id": "urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33",
                        "type": [
                          "VerifiableCredential",
                          "AlumniCredential"
                        ],
                        "name": "Alumni Credential",
                        "description": "A minimum viable example of an Alumni Credential.",
                        "issuer": "https://vc.example/issuers/5678",
                        "validFrom": "2023-01-01T00:00:00Z",
                        "credentialSubject": {
                          "id": "did:example:abcdefgh",
                          "alumniOf": "The School of Examples"
                        },
                        "proof": {
                          "type": "Ed25519Signature2020",
                          "created": "2023-02-24T23:36:38Z",
                          "verificationMethod": "did:key:z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2#z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z57Mm1vboMtZiCyJ4aReZsv8co4Re64Y8GEjL1ZARzMbXZgkARFLqFs1P345NpPGG2hgCrS4nNdvJhpwnrNyG3kEF"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://bridge.learncard.com/credentials/verify",
                  "status": 400,
                  "data": "Invalid input: [\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"verifiableCredential\",\n      \"issuanceDate\"\n    ],\n    \"message\": \"Required\"\n  }\n]"
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:48:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noContextVc = klona(validVc);\n          delete noContextVc['@context'];\n          const body = createRequestBody({vc: noContextVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "5oEvMqGzI6CDXT8zSgOUa",
              "ctx": null,
              "_testId": "urn:uuid:f56f89e5-c4b4-4fd1-9854-de17fc7b8037",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "MUST not verify if \"@context\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33156,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 54,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noTypeVc = klona(validVc);\n        delete noTypeVc.type;\n        const body = createRequestBody({vc: noTypeVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "5oEvMqGzI6CDXT8zSgOUa",
              "ctx": null,
              "_testId": "urn:uuid:4e8fce3a-1189-42aa-bce3-3db2d3cecba5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "MUST not verify if \"type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33210,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 46,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noIssuerVc = klona(validVc);\n        delete noIssuerVc.issuer;\n        const body = createRequestBody({vc: noIssuerVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "5oEvMqGzI6CDXT8zSgOUa",
              "ctx": null,
              "_testId": "urn:uuid:353dad76-fd10-4fcd-8c32-2924f7f691f5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "MUST not verify if \"issuer\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33256,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 41,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noCredentialSubjectVc = klona(validVc);\n          delete noCredentialSubjectVc.credentialSubject;\n          const body = createRequestBody({vc: noCredentialSubjectVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "5oEvMqGzI6CDXT8zSgOUa",
              "ctx": null,
              "_testId": "urn:uuid:ffff19ad-793b-43a5-a6b1-a406eadb30a4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "MUST not verify if \"credentialSubject\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33298,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 42,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noProofVc = klona(validVc);\n        delete noProofVc.proof;\n        const body = createRequestBody({vc: noProofVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "5oEvMqGzI6CDXT8zSgOUa",
              "ctx": null,
              "_testId": "urn:uuid:3a0f67c0-3f32-4f83-9a2b-176750a7887e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "MUST not verify if \"proof\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33340,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 45,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.type\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofTypeVc = klona(validVc);\n          delete noProofTypeVc.proof.type;\n          const body = createRequestBody({vc: noProofTypeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "5oEvMqGzI6CDXT8zSgOUa",
              "ctx": null,
              "_testId": "urn:uuid:64d4e9c6-6c49-4779-bd36-01930233fb79",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "MUST not verify if \"proof.type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33385,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 40,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.created\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofCreatedVc = klona(validVc);\n          delete noProofCreatedVc.proof.created;\n          const body = createRequestBody({vc: noProofCreatedVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "5oEvMqGzI6CDXT8zSgOUa",
              "ctx": null,
              "_testId": "urn:uuid:e45f1df5-0b44-4af0-a6c6-f7085876cf4d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "MUST not verify if \"proof.created\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33426,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 37,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.verificationMethod\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofVerificationMethodVc = klona(validVc);\n          delete noProofVerificationMethodVc.proof.verificationMethod;\n          const body = createRequestBody({vc: noProofVerificationMethodVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "5oEvMqGzI6CDXT8zSgOUa",
              "ctx": null,
              "_testId": "urn:uuid:6ec5b905-9f57-45dc-a646-4cdbc8d7a0a2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "MUST not verify if \"proof.verificationMethod\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33463,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 51,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofValue\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofValueVc = klona(validVc);\n          delete noProofValueVc.proof.proofValue;\n          const body = createRequestBody({vc: noProofValueVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "5oEvMqGzI6CDXT8zSgOUa",
              "ctx": null,
              "_testId": "urn:uuid:6af805b4-9290-448e-bf12-98dec9d7c5e6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "MUST not verify if \"proof.proofValue\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33514,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 48,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofPurpose\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofPurposeVc = klona(validVc);\n          delete noProofPurposeVc.proof.proofPurpose;\n          const body = createRequestBody({vc: noProofPurposeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "5oEvMqGzI6CDXT8zSgOUa",
              "ctx": null,
              "_testId": "urn:uuid:93211f70-d478-4d26-8bf5-69d67dbbb512",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "MUST not verify if \"proof.proofPurpose\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33562,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 48,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidContextTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidContextType of invalidContextTypes) {\n          copyVc['@context'] = invalidContextType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "5oEvMqGzI6CDXT8zSgOUa",
              "ctx": null,
              "_testId": "urn:uuid:84794480-3d9c-4db5-9918-fd4448dc129f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "MUST not verify if \"@context\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33610,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 318,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" items are not strings.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidContextItemTypes = [[], {}, null, undefined, 10, true];\n          for(const invalidContextItemType of invalidContextItemTypes) {\n            copyVc['@context'] = [invalidContextItemType];\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "5oEvMqGzI6CDXT8zSgOUa",
              "ctx": null,
              "_testId": "urn:uuid:69ebbe84-f5f0-4ee0-9e84-80c72091cd6d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "MUST not verify if \"@context\" items are not strings."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33928,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 281,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidType of invalidTypes) {\n          copyVc.type = invalidType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "5oEvMqGzI6CDXT8zSgOUa",
              "ctx": null,
              "_testId": "urn:uuid:0f402955-a679-48c6-8a67-11ffb29d91a3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "MUST not verify if \"type\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 34209,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 263,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" items are not strings.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypeItemTypes = [[], {}, null, undefined, 10, true];\n        for(const invalidItemType of invalidTypeItemTypes) {\n          copyVc.type = [invalidItemType];\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "5oEvMqGzI6CDXT8zSgOUa",
              "ctx": null,
              "_testId": "urn:uuid:c3ecdc2f-90c8-488d-b0e5-227df5e5ad3e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "MUST not verify if \"type\" items are not strings."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 34472,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 215,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" is not an object or a string.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidIssuerTypes = [[], null, undefined, 10, true];\n          for(const invalidIssuerType of invalidIssuerTypes) {\n            copyVc.issuer = invalidIssuerType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "5oEvMqGzI6CDXT8zSgOUa",
              "ctx": null,
              "_testId": "urn:uuid:252bb28b-d3c2-4c6f-a588-8c29d4342b93",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "MUST not verify if \"issuer\" is not an object or a string."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 34687,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 154,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" is not an object.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidCredentialSubjectTypes = [\n            'string', null, undefined, 10, true, []\n          ];\n          for(const invalidType of invalidCredentialSubjectTypes) {\n            copyVc.credentialSubject = invalidType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "5oEvMqGzI6CDXT8zSgOUa",
              "ctx": null,
              "_testId": "urn:uuid:16de8279-dc4b-484f-9a63-ab1c24b26795",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "MUST not verify if \"credentialSubject\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 34841,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 209,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" is not an object.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidProofTypes = ['string', null, undefined, 10, true, []];\n        for(const invalidProofType of invalidProofTypes) {\n          copyVc.proof = invalidProofType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "5oEvMqGzI6CDXT8zSgOUa",
              "ctx": null,
              "_testId": "urn:uuid:f076da68-fcac-4955-be03-ae550149c373",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "MUST not verify if \"proof\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 35051,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 247,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "N70v7KmkPRZoXXlX_hgBk",
          "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
          "_testId": "urn:uuid:96e8bfd0-eb50-4867-925e-62bf80f9c814"
        },
        {
          "title": "Mavennet",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC.",
              "body": "async function() {\n        // this tells the test report which cell in the interop matrix\n        // the result goes in\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({vc: validVc});\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error);\n        should.exist(result);\n        should.exist(result.status);\n        result.status.should.equal(200);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "hvOfNszx7L1coXhRnj02P",
              "ctx": null,
              "_testId": "urn:uuid:8ea890b9-aa51-4e83-97df-e0747a44e686",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Mavennet",
                "rowId": "MUST verify a valid VC."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 35299,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 408,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected HTTPError { message: [ …(6) ], …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",\"https://www.w3.org/ns/credentials/examples/v2\",\"https://w3id.org/security/suites/ed25519-2020/v1\"],\"id\":\"urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33\",\"type\":[\"VerifiableCredential\",\"AlumniCredential\"],\"name\":\"Alumni Credential\",\"description\":\"A minimum viable example of an Alumni Credential.\",\"issuer\":\"https://vc.example/issuers/5678\",\"validFrom\":\"2023-01-01T00:00:00Z\",\"credentialSubject\":{\"id\":\"did:example:abcdefgh\",\"alumniOf\":\"The School of Examples\"},\"proof\":{\"type\":\"Ed25519Signature2020\",\"created\":\"2023-02-24T23:36:38Z\",\"verificationMethod\":\"did:key:z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2#z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z57Mm1vboMtZiCyJ4aReZsv8co4Re64Y8GEjL1ZARzMbXZgkARFLqFs1P345NpPGG2hgCrS4nNdvJhpwnrNyG3kEF\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          "https://www.w3.org/ns/credentials/examples/v2",
                          "https://w3id.org/security/suites/ed25519-2020/v1"
                        ],
                        "id": "urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33",
                        "type": [
                          "VerifiableCredential",
                          "AlumniCredential"
                        ],
                        "name": "Alumni Credential",
                        "description": "A minimum viable example of an Alumni Credential.",
                        "issuer": "https://vc.example/issuers/5678",
                        "validFrom": "2023-01-01T00:00:00Z",
                        "credentialSubject": {
                          "id": "did:example:abcdefgh",
                          "alumniOf": "The School of Examples"
                        },
                        "proof": {
                          "type": "Ed25519Signature2020",
                          "created": "2023-02-24T23:36:38Z",
                          "verificationMethod": "did:key:z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2#z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z57Mm1vboMtZiCyJ4aReZsv8co4Re64Y8GEjL1ZARzMbXZgkARFLqFs1P345NpPGG2hgCrS4nNdvJhpwnrNyG3kEF"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://api.staging.refiner.neoflow.energy/credentials/verify",
                  "status": 400,
                  "data": {
                    "message": [
                      "each value in @context must be a URL address",
                      "@context must contain at least 1 elements",
                      "@context must be an array",
                      "id must be a string",
                      "id should not be empty",
                      "type must be a string"
                    ],
                    "error": "Bad Request",
                    "statusCode": 400
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: expected HTTPError { message: [ …(6) ], …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:48:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noContextVc = klona(validVc);\n          delete noContextVc['@context'];\n          const body = createRequestBody({vc: noContextVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "hvOfNszx7L1coXhRnj02P",
              "ctx": null,
              "_testId": "urn:uuid:6e95797f-9f5f-4d3c-a53f-c3252e6e3da2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Mavennet",
                "rowId": "MUST not verify if \"@context\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 35712,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 53,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noTypeVc = klona(validVc);\n        delete noTypeVc.type;\n        const body = createRequestBody({vc: noTypeVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "hvOfNszx7L1coXhRnj02P",
              "ctx": null,
              "_testId": "urn:uuid:1ed0c01a-4252-4445-afe2-ee7da88c139d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Mavennet",
                "rowId": "MUST not verify if \"type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 35766,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 35,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noIssuerVc = klona(validVc);\n        delete noIssuerVc.issuer;\n        const body = createRequestBody({vc: noIssuerVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "hvOfNszx7L1coXhRnj02P",
              "ctx": null,
              "_testId": "urn:uuid:50a67048-13d1-4386-9812-c3f04c41bcaf",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Mavennet",
                "rowId": "MUST not verify if \"issuer\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 35802,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 37,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noCredentialSubjectVc = klona(validVc);\n          delete noCredentialSubjectVc.credentialSubject;\n          const body = createRequestBody({vc: noCredentialSubjectVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "hvOfNszx7L1coXhRnj02P",
              "ctx": null,
              "_testId": "urn:uuid:f489dd13-1fec-4610-a4f2-42c284c863b4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Mavennet",
                "rowId": "MUST not verify if \"credentialSubject\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 35839,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 34,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noProofVc = klona(validVc);\n        delete noProofVc.proof;\n        const body = createRequestBody({vc: noProofVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "hvOfNszx7L1coXhRnj02P",
              "ctx": null,
              "_testId": "urn:uuid:e8230bcd-3127-4153-9618-950ef920233d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Mavennet",
                "rowId": "MUST not verify if \"proof\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 35873,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 37,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.type\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofTypeVc = klona(validVc);\n          delete noProofTypeVc.proof.type;\n          const body = createRequestBody({vc: noProofTypeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "hvOfNszx7L1coXhRnj02P",
              "ctx": null,
              "_testId": "urn:uuid:52949b19-b03f-4e4e-805a-dd400a335ea5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Mavennet",
                "rowId": "MUST not verify if \"proof.type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 35910,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 35,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.created\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofCreatedVc = klona(validVc);\n          delete noProofCreatedVc.proof.created;\n          const body = createRequestBody({vc: noProofCreatedVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "hvOfNszx7L1coXhRnj02P",
              "ctx": null,
              "_testId": "urn:uuid:8bf0bd14-b614-4c44-9f4e-14a377c95355",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Mavennet",
                "rowId": "MUST not verify if \"proof.created\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 35945,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 36,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.verificationMethod\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofVerificationMethodVc = klona(validVc);\n          delete noProofVerificationMethodVc.proof.verificationMethod;\n          const body = createRequestBody({vc: noProofVerificationMethodVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "hvOfNszx7L1coXhRnj02P",
              "ctx": null,
              "_testId": "urn:uuid:f1346b8a-3844-4af2-8451-248d1f3416b4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Mavennet",
                "rowId": "MUST not verify if \"proof.verificationMethod\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 35982,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 43,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofValue\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofValueVc = klona(validVc);\n          delete noProofValueVc.proof.proofValue;\n          const body = createRequestBody({vc: noProofValueVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "hvOfNszx7L1coXhRnj02P",
              "ctx": null,
              "_testId": "urn:uuid:73888d83-223a-4ddb-b947-2679e3a51f7c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Mavennet",
                "rowId": "MUST not verify if \"proof.proofValue\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36025,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 37,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofPurpose\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofPurposeVc = klona(validVc);\n          delete noProofPurposeVc.proof.proofPurpose;\n          const body = createRequestBody({vc: noProofPurposeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "hvOfNszx7L1coXhRnj02P",
              "ctx": null,
              "_testId": "urn:uuid:20ab890e-d7b6-4934-9e75-3512939808a4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Mavennet",
                "rowId": "MUST not verify if \"proof.proofPurpose\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36063,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 34,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidContextTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidContextType of invalidContextTypes) {\n          copyVc['@context'] = invalidContextType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "hvOfNszx7L1coXhRnj02P",
              "ctx": null,
              "_testId": "urn:uuid:1fbbd5ae-c7d3-4541-835b-aec9d4229d71",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Mavennet",
                "rowId": "MUST not verify if \"@context\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36097,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 217,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" items are not strings.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidContextItemTypes = [[], {}, null, undefined, 10, true];\n          for(const invalidContextItemType of invalidContextItemTypes) {\n            copyVc['@context'] = [invalidContextItemType];\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "hvOfNszx7L1coXhRnj02P",
              "ctx": null,
              "_testId": "urn:uuid:ff2418ab-64c3-42cf-bc61-78af1bb20765",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Mavennet",
                "rowId": "MUST not verify if \"@context\" items are not strings."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36313,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 252,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidType of invalidTypes) {\n          copyVc.type = invalidType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "hvOfNszx7L1coXhRnj02P",
              "ctx": null,
              "_testId": "urn:uuid:7dcda74a-3457-4256-b4ce-05a5377d5b65",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Mavennet",
                "rowId": "MUST not verify if \"type\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36566,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 417,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" items are not strings.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypeItemTypes = [[], {}, null, undefined, 10, true];\n        for(const invalidItemType of invalidTypeItemTypes) {\n          copyVc.type = [invalidItemType];\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "hvOfNszx7L1coXhRnj02P",
              "ctx": null,
              "_testId": "urn:uuid:5cfdf853-e4e5-4783-a065-36c8e296523e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Mavennet",
                "rowId": "MUST not verify if \"type\" items are not strings."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36983,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 215,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" is not an object or a string.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidIssuerTypes = [[], null, undefined, 10, true];\n          for(const invalidIssuerType of invalidIssuerTypes) {\n            copyVc.issuer = invalidIssuerType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "hvOfNszx7L1coXhRnj02P",
              "ctx": null,
              "_testId": "urn:uuid:9f7f220f-37ef-4270-96cd-652356ce3cc8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Mavennet",
                "rowId": "MUST not verify if \"issuer\" is not an object or a string."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 37198,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 186,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" is not an object.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidCredentialSubjectTypes = [\n            'string', null, undefined, 10, true, []\n          ];\n          for(const invalidType of invalidCredentialSubjectTypes) {\n            copyVc.credentialSubject = invalidType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "hvOfNszx7L1coXhRnj02P",
              "ctx": null,
              "_testId": "urn:uuid:ed6feb86-e01a-4c69-b99c-43ebb8fae410",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Mavennet",
                "rowId": "MUST not verify if \"credentialSubject\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 37384,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 206,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" is not an object.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidProofTypes = ['string', null, undefined, 10, true, []];\n        for(const invalidProofType of invalidProofTypes) {\n          copyVc.proof = invalidProofType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "hvOfNszx7L1coXhRnj02P",
              "ctx": null,
              "_testId": "urn:uuid:bcf8af7f-93ce-4e17-a573-7b10d9b7192f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Mavennet",
                "rowId": "MUST not verify if \"proof\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 37591,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 207,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "N70v7KmkPRZoXXlX_hgBk",
          "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
          "_testId": "urn:uuid:ab447123-09fe-4b69-a75d-d16d09b0cd9a"
        },
        {
          "title": "SecureKey",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC.",
              "body": "async function() {\n        // this tells the test report which cell in the interop matrix\n        // the result goes in\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({vc: validVc});\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error);\n        should.exist(result);\n        should.exist(result.status);\n        result.status.should.equal(200);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "9ovA8b3BrvylUkiZe-TQ_",
              "ctx": null,
              "_testId": "urn:uuid:bb05abfa-4df8-4a4a-a62c-cf726aa3cafc",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SecureKey",
                "rowId": "MUST verify a valid VC."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 37799,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 116,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected TypeError: fetch failed { …(2) } to not exist",
                "showDiff": false,
                "actual": {
                  "requestUrl": "https://verifier-vcs.sandbox.trustbloc.dev/vc-verifier-interop/verifier/credentials/verify"
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: expected TypeError: fetch failed { …(2) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:48:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noContextVc = klona(validVc);\n          delete noContextVc['@context'];\n          const body = createRequestBody({vc: noContextVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "9ovA8b3BrvylUkiZe-TQ_",
              "ctx": null,
              "_testId": "urn:uuid:c167cbd2-e519-4eab-854c-f27427987bea",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SecureKey",
                "rowId": "MUST not verify if \"@context\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 37917,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 118,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an HTTP error response code: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an HTTP error response code: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:14:10)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:63:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noTypeVc = klona(validVc);\n        delete noTypeVc.type;\n        const body = createRequestBody({vc: noTypeVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "9ovA8b3BrvylUkiZe-TQ_",
              "ctx": null,
              "_testId": "urn:uuid:e9d0cfcb-6ead-49ca-9460-29b11da29d47",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SecureKey",
                "rowId": "MUST not verify if \"type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 38035,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 127,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an HTTP error response code: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an HTTP error response code: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:14:10)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:74:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noIssuerVc = klona(validVc);\n        delete noIssuerVc.issuer;\n        const body = createRequestBody({vc: noIssuerVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "9ovA8b3BrvylUkiZe-TQ_",
              "ctx": null,
              "_testId": "urn:uuid:fc39b620-5dd2-443b-98f5-62dcb5b46400",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SecureKey",
                "rowId": "MUST not verify if \"issuer\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 38163,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 45,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an HTTP error response code: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an HTTP error response code: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:14:10)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:85:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noCredentialSubjectVc = klona(validVc);\n          delete noCredentialSubjectVc.credentialSubject;\n          const body = createRequestBody({vc: noCredentialSubjectVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "9ovA8b3BrvylUkiZe-TQ_",
              "ctx": null,
              "_testId": "urn:uuid:5c5c2497-098e-469a-ad74-7975745abd27",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SecureKey",
                "rowId": "MUST not verify if \"credentialSubject\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 38207,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 106,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an HTTP error response code: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an HTTP error response code: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:14:10)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:97:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noProofVc = klona(validVc);\n        delete noProofVc.proof;\n        const body = createRequestBody({vc: noProofVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "9ovA8b3BrvylUkiZe-TQ_",
              "ctx": null,
              "_testId": "urn:uuid:5f1b3d59-7824-496f-a40f-a6805c70346f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SecureKey",
                "rowId": "MUST not verify if \"proof\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 38314,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 71,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an HTTP error response code: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an HTTP error response code: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:14:10)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:108:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.type\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofTypeVc = klona(validVc);\n          delete noProofTypeVc.proof.type;\n          const body = createRequestBody({vc: noProofTypeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "9ovA8b3BrvylUkiZe-TQ_",
              "ctx": null,
              "_testId": "urn:uuid:dba28404-42d9-477e-b8cc-5bbf067bd465",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SecureKey",
                "rowId": "MUST not verify if \"proof.type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 38386,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 9,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an HTTP error response code: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an HTTP error response code: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:14:10)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:120:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.created\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofCreatedVc = klona(validVc);\n          delete noProofCreatedVc.proof.created;\n          const body = createRequestBody({vc: noProofCreatedVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "9ovA8b3BrvylUkiZe-TQ_",
              "ctx": null,
              "_testId": "urn:uuid:48fea509-f039-4d56-90f2-8dfe503bd7eb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SecureKey",
                "rowId": "MUST not verify if \"proof.created\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 38396,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 50,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an HTTP error response code: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an HTTP error response code: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:14:10)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:132:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.verificationMethod\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofVerificationMethodVc = klona(validVc);\n          delete noProofVerificationMethodVc.proof.verificationMethod;\n          const body = createRequestBody({vc: noProofVerificationMethodVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "9ovA8b3BrvylUkiZe-TQ_",
              "ctx": null,
              "_testId": "urn:uuid:b31cfe01-1f7e-4b70-8278-0d434c819a42",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SecureKey",
                "rowId": "MUST not verify if \"proof.verificationMethod\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 38447,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 111,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an HTTP error response code: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an HTTP error response code: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:14:10)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:144:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofValue\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofValueVc = klona(validVc);\n          delete noProofValueVc.proof.proofValue;\n          const body = createRequestBody({vc: noProofValueVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "9ovA8b3BrvylUkiZe-TQ_",
              "ctx": null,
              "_testId": "urn:uuid:4e146a25-0b2b-4671-a5c4-b7fae6a56fbe",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SecureKey",
                "rowId": "MUST not verify if \"proof.proofValue\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 38558,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 62,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an HTTP error response code: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an HTTP error response code: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:14:10)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:156:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofPurpose\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofPurposeVc = klona(validVc);\n          delete noProofPurposeVc.proof.proofPurpose;\n          const body = createRequestBody({vc: noProofPurposeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "9ovA8b3BrvylUkiZe-TQ_",
              "ctx": null,
              "_testId": "urn:uuid:e57fd342-1926-4bed-a30c-536b7e907ba3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SecureKey",
                "rowId": "MUST not verify if \"proof.proofPurpose\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 38621,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 70,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an HTTP error response code: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an HTTP error response code: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:14:10)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:168:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidContextTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidContextType of invalidContextTypes) {\n          copyVc['@context'] = invalidContextType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "9ovA8b3BrvylUkiZe-TQ_",
              "ctx": null,
              "_testId": "urn:uuid:34480996-6b9e-42a2-ac05-eb0075c5d7a1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SecureKey",
                "rowId": "MUST not verify if \"@context\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 38692,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 58,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an HTTP error response code: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an HTTP error response code: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:14:10)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:181:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" items are not strings.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidContextItemTypes = [[], {}, null, undefined, 10, true];\n          for(const invalidContextItemType of invalidContextItemTypes) {\n            copyVc['@context'] = [invalidContextItemType];\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "9ovA8b3BrvylUkiZe-TQ_",
              "ctx": null,
              "_testId": "urn:uuid:52c767e3-c28b-4dcd-95e4-cef03ba64c86",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SecureKey",
                "rowId": "MUST not verify if \"@context\" items are not strings."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 38749,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 13,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an HTTP error response code: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an HTTP error response code: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:14:10)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:196:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidType of invalidTypes) {\n          copyVc.type = invalidType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "9ovA8b3BrvylUkiZe-TQ_",
              "ctx": null,
              "_testId": "urn:uuid:7b7767de-e348-48cd-8b2e-e56b8acfecb6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SecureKey",
                "rowId": "MUST not verify if \"type\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 38763,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 122,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an HTTP error response code: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an HTTP error response code: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:14:10)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:210:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" items are not strings.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypeItemTypes = [[], {}, null, undefined, 10, true];\n        for(const invalidItemType of invalidTypeItemTypes) {\n          copyVc.type = [invalidItemType];\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "9ovA8b3BrvylUkiZe-TQ_",
              "ctx": null,
              "_testId": "urn:uuid:84ded3f1-3ce6-4827-b34e-8b4fc2fce7b4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SecureKey",
                "rowId": "MUST not verify if \"type\" items are not strings."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 38885,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 71,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an HTTP error response code: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an HTTP error response code: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:14:10)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:224:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" is not an object or a string.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidIssuerTypes = [[], null, undefined, 10, true];\n          for(const invalidIssuerType of invalidIssuerTypes) {\n            copyVc.issuer = invalidIssuerType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "9ovA8b3BrvylUkiZe-TQ_",
              "ctx": null,
              "_testId": "urn:uuid:9e8a2a45-1d3a-4235-9f56-f703864695b8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SecureKey",
                "rowId": "MUST not verify if \"issuer\" is not an object or a string."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 38956,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 153,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an HTTP error response code: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an HTTP error response code: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:14:10)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:239:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" is not an object.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidCredentialSubjectTypes = [\n            'string', null, undefined, 10, true, []\n          ];\n          for(const invalidType of invalidCredentialSubjectTypes) {\n            copyVc.credentialSubject = invalidType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "9ovA8b3BrvylUkiZe-TQ_",
              "ctx": null,
              "_testId": "urn:uuid:96ffbe75-db9e-4353-ab1b-d737ca0c9e0a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SecureKey",
                "rowId": "MUST not verify if \"credentialSubject\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 39109,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 121,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an HTTP error response code: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an HTTP error response code: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:14:10)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:256:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" is not an object.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidProofTypes = ['string', null, undefined, 10, true, []];\n        for(const invalidProofType of invalidProofTypes) {\n          copyVc.proof = invalidProofType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "9ovA8b3BrvylUkiZe-TQ_",
              "ctx": null,
              "_testId": "urn:uuid:d7335267-6ff0-4a57-aac2-59dc9206d9ad",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SecureKey",
                "rowId": "MUST not verify if \"proof\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 39230,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 9,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an HTTP error response code: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an HTTP error response code: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:14:10)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:270:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "N70v7KmkPRZoXXlX_hgBk",
          "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
          "_testId": "urn:uuid:f6b6ab83-a78d-42d1-a0be-eb7ae59daed9"
        },
        {
          "title": "SpruceID",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC.",
              "body": "async function() {\n        // this tells the test report which cell in the interop matrix\n        // the result goes in\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({vc: validVc});\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error);\n        should.exist(result);\n        should.exist(result.status);\n        result.status.should.equal(200);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "iXtIgDC8QnsTbVosWjgVz",
              "ctx": null,
              "_testId": "urn:uuid:8f4a1b26-e2e6-42ad-ae88-032be93c778c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST verify a valid VC."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 39239,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 137,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noContextVc = klona(validVc);\n          delete noContextVc['@context'];\n          const body = createRequestBody({vc: noContextVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "iXtIgDC8QnsTbVosWjgVz",
              "ctx": null,
              "_testId": "urn:uuid:27334132-9b00-486c-a03a-49c081670617",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"@context\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 39376,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 20,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noTypeVc = klona(validVc);\n        delete noTypeVc.type;\n        const body = createRequestBody({vc: noTypeVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "iXtIgDC8QnsTbVosWjgVz",
              "ctx": null,
              "_testId": "urn:uuid:0582443c-107e-412c-b5a4-6f4701892eb3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 39397,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 30,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noIssuerVc = klona(validVc);\n        delete noIssuerVc.issuer;\n        const body = createRequestBody({vc: noIssuerVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "iXtIgDC8QnsTbVosWjgVz",
              "ctx": null,
              "_testId": "urn:uuid:6c4b8943-1f37-4825-a858-79aedfd237fb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"issuer\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 39427,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 23,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noCredentialSubjectVc = klona(validVc);\n          delete noCredentialSubjectVc.credentialSubject;\n          const body = createRequestBody({vc: noCredentialSubjectVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "iXtIgDC8QnsTbVosWjgVz",
              "ctx": null,
              "_testId": "urn:uuid:52333a70-0ede-48d7-a521-26009f7fa8dd",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"credentialSubject\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 39451,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 19,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noProofVc = klona(validVc);\n        delete noProofVc.proof;\n        const body = createRequestBody({vc: noProofVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "iXtIgDC8QnsTbVosWjgVz",
              "ctx": null,
              "_testId": "urn:uuid:d18434a2-7317-416e-a2b2-79b21b827781",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"proof\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 39471,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 23,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.type\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofTypeVc = klona(validVc);\n          delete noProofTypeVc.proof.type;\n          const body = createRequestBody({vc: noProofTypeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "iXtIgDC8QnsTbVosWjgVz",
              "ctx": null,
              "_testId": "urn:uuid:56865352-98ac-4a47-b0ba-dc6c3b5e47d8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"proof.type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 39494,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 23,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.created\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofCreatedVc = klona(validVc);\n          delete noProofCreatedVc.proof.created;\n          const body = createRequestBody({vc: noProofCreatedVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "iXtIgDC8QnsTbVosWjgVz",
              "ctx": null,
              "_testId": "urn:uuid:d2bc86be-06f0-425d-972b-d6bbfbc0f974",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"proof.created\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 39516,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 24,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.verificationMethod\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofVerificationMethodVc = klona(validVc);\n          delete noProofVerificationMethodVc.proof.verificationMethod;\n          const body = createRequestBody({vc: noProofVerificationMethodVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "iXtIgDC8QnsTbVosWjgVz",
              "ctx": null,
              "_testId": "urn:uuid:2772f962-331b-43b4-9042-6d898e640cd4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"proof.verificationMethod\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 39541,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 19,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofValue\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofValueVc = klona(validVc);\n          delete noProofValueVc.proof.proofValue;\n          const body = createRequestBody({vc: noProofValueVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "iXtIgDC8QnsTbVosWjgVz",
              "ctx": null,
              "_testId": "urn:uuid:34d8e568-2a75-4f14-8a91-85fab50374a3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"proof.proofValue\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 39561,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 18,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofPurpose\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofPurposeVc = klona(validVc);\n          delete noProofPurposeVc.proof.proofPurpose;\n          const body = createRequestBody({vc: noProofPurposeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "iXtIgDC8QnsTbVosWjgVz",
              "ctx": null,
              "_testId": "urn:uuid:a3bcffd8-2d9b-432c-8d09-0561fdb70c3f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"proof.proofPurpose\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 39579,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 21,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidContextTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidContextType of invalidContextTypes) {\n          copyVc['@context'] = invalidContextType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "iXtIgDC8QnsTbVosWjgVz",
              "ctx": null,
              "_testId": "urn:uuid:fa935fab-749d-4c4c-aa43-2bd89ca4acfd",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"@context\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 39600,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 180,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" items are not strings.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidContextItemTypes = [[], {}, null, undefined, 10, true];\n          for(const invalidContextItemType of invalidContextItemTypes) {\n            copyVc['@context'] = [invalidContextItemType];\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "iXtIgDC8QnsTbVosWjgVz",
              "ctx": null,
              "_testId": "urn:uuid:76d332c6-83e0-4c82-9046-69975c01492f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"@context\" items are not strings."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 39780,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 147,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidType of invalidTypes) {\n          copyVc.type = invalidType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "iXtIgDC8QnsTbVosWjgVz",
              "ctx": null,
              "_testId": "urn:uuid:a3038e50-531e-4ef8-b967-06a537ef8053",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"type\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 39926,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 141,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" items are not strings.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypeItemTypes = [[], {}, null, undefined, 10, true];\n        for(const invalidItemType of invalidTypeItemTypes) {\n          copyVc.type = [invalidItemType];\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "iXtIgDC8QnsTbVosWjgVz",
              "ctx": null,
              "_testId": "urn:uuid:007e3a03-46c0-4fb7-95e6-51f1f8cbe94c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"type\" items are not strings."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 40067,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 136,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" is not an object or a string.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidIssuerTypes = [[], null, undefined, 10, true];\n          for(const invalidIssuerType of invalidIssuerTypes) {\n            copyVc.issuer = invalidIssuerType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "iXtIgDC8QnsTbVosWjgVz",
              "ctx": null,
              "_testId": "urn:uuid:2f34b1f8-f2c7-48d1-98bc-a4af68153b5b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"issuer\" is not an object or a string."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 40204,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 113,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" is not an object.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidCredentialSubjectTypes = [\n            'string', null, undefined, 10, true, []\n          ];\n          for(const invalidType of invalidCredentialSubjectTypes) {\n            copyVc.credentialSubject = invalidType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "iXtIgDC8QnsTbVosWjgVz",
              "ctx": null,
              "_testId": "urn:uuid:dc3219e7-431d-4d41-85df-d4e855f11f2b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"credentialSubject\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 40317,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 153,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" is not an object.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidProofTypes = ['string', null, undefined, 10, true, []];\n        for(const invalidProofType of invalidProofTypes) {\n          copyVc.proof = invalidProofType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "iXtIgDC8QnsTbVosWjgVz",
              "ctx": null,
              "_testId": "urn:uuid:4ef1407d-6f73-43c5-b859-a708bac8725b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"proof\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 40471,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 115,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "N70v7KmkPRZoXXlX_hgBk",
          "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
          "_testId": "urn:uuid:82e8b784-a998-4257-8d16-3204d4502bf9"
        },
        {
          "title": "Trinsic",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC.",
              "body": "async function() {\n        // this tells the test report which cell in the interop matrix\n        // the result goes in\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({vc: validVc});\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error);\n        should.exist(result);\n        should.exist(result.status);\n        result.status.should.equal(200);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "Im6QJlfV-rG_X8zTlpEuB",
              "ctx": null,
              "_testId": "urn:uuid:ba9d82f7-3a1b-4146-b6d8-d6316e34ec58",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "MUST verify a valid VC."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 40586,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2107,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noContextVc = klona(validVc);\n          delete noContextVc['@context'];\n          const body = createRequestBody({vc: noContextVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "Im6QJlfV-rG_X8zTlpEuB",
              "ctx": null,
              "_testId": "urn:uuid:a98d6ecc-b4a7-4324-89d9-5f179782487c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "MUST not verify if \"@context\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 42694,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 56,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noTypeVc = klona(validVc);\n        delete noTypeVc.type;\n        const body = createRequestBody({vc: noTypeVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "Im6QJlfV-rG_X8zTlpEuB",
              "ctx": null,
              "_testId": "urn:uuid:e17ac4a0-02ab-4f3a-ad22-1be790b3b110",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "MUST not verify if \"type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 42750,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 33,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noIssuerVc = klona(validVc);\n        delete noIssuerVc.issuer;\n        const body = createRequestBody({vc: noIssuerVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "Im6QJlfV-rG_X8zTlpEuB",
              "ctx": null,
              "_testId": "urn:uuid:dbc4e6fa-49f5-4d96-9f87-bd5d25bb5958",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "MUST not verify if \"issuer\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 42784,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 30,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noCredentialSubjectVc = klona(validVc);\n          delete noCredentialSubjectVc.credentialSubject;\n          const body = createRequestBody({vc: noCredentialSubjectVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "Im6QJlfV-rG_X8zTlpEuB",
              "ctx": null,
              "_testId": "urn:uuid:482967bd-7683-4f7d-b08d-903d8fd40db3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "MUST not verify if \"credentialSubject\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 42815,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 43,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noProofVc = klona(validVc);\n        delete noProofVc.proof;\n        const body = createRequestBody({vc: noProofVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "Im6QJlfV-rG_X8zTlpEuB",
              "ctx": null,
              "_testId": "urn:uuid:1dd01ac2-e09a-4568-a4bf-a1d2048ff228",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "MUST not verify if \"proof\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 42857,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 18,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.type\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofTypeVc = klona(validVc);\n          delete noProofTypeVc.proof.type;\n          const body = createRequestBody({vc: noProofTypeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "Im6QJlfV-rG_X8zTlpEuB",
              "ctx": null,
              "_testId": "urn:uuid:7ce85f8c-c7c0-4575-937b-a02fd8caa73f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "MUST not verify if \"proof.type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 42875,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 19,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.created\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofCreatedVc = klona(validVc);\n          delete noProofCreatedVc.proof.created;\n          const body = createRequestBody({vc: noProofCreatedVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "Im6QJlfV-rG_X8zTlpEuB",
              "ctx": null,
              "_testId": "urn:uuid:428a8ede-4fd3-41cd-a618-3eb2e1506791",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "MUST not verify if \"proof.created\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 42894,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 30,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.verificationMethod\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofVerificationMethodVc = klona(validVc);\n          delete noProofVerificationMethodVc.proof.verificationMethod;\n          const body = createRequestBody({vc: noProofVerificationMethodVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "Im6QJlfV-rG_X8zTlpEuB",
              "ctx": null,
              "_testId": "urn:uuid:a15f15c2-23e9-4d04-b3fc-b21cb911019f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "MUST not verify if \"proof.verificationMethod\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 42925,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 21,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofValue\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofValueVc = klona(validVc);\n          delete noProofValueVc.proof.proofValue;\n          const body = createRequestBody({vc: noProofValueVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "Im6QJlfV-rG_X8zTlpEuB",
              "ctx": null,
              "_testId": "urn:uuid:df80f6c2-c638-4cfe-8aa4-6f92249d9cb0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "MUST not verify if \"proof.proofValue\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 42946,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 26,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofPurpose\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofPurposeVc = klona(validVc);\n          delete noProofPurposeVc.proof.proofPurpose;\n          const body = createRequestBody({vc: noProofPurposeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "Im6QJlfV-rG_X8zTlpEuB",
              "ctx": null,
              "_testId": "urn:uuid:782310b5-b019-4322-a2dc-565702f624f2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "MUST not verify if \"proof.proofPurpose\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 42972,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 16,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidContextTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidContextType of invalidContextTypes) {\n          copyVc['@context'] = invalidContextType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "Im6QJlfV-rG_X8zTlpEuB",
              "ctx": null,
              "_testId": "urn:uuid:02eb886d-ea12-4b07-b7c7-9384a280d448",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "MUST not verify if \"@context\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 42988,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 228,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" items are not strings.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidContextItemTypes = [[], {}, null, undefined, 10, true];\n          for(const invalidContextItemType of invalidContextItemTypes) {\n            copyVc['@context'] = [invalidContextItemType];\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "Im6QJlfV-rG_X8zTlpEuB",
              "ctx": null,
              "_testId": "urn:uuid:7f6e957a-5915-46d2-bf4c-3fab79076779",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "MUST not verify if \"@context\" items are not strings."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 43217,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 187,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidType of invalidTypes) {\n          copyVc.type = invalidType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "Im6QJlfV-rG_X8zTlpEuB",
              "ctx": null,
              "_testId": "urn:uuid:1f02eede-7501-4bcb-8e40-ebfa1ba7d5c3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "MUST not verify if \"type\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 43404,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 219,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" items are not strings.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypeItemTypes = [[], {}, null, undefined, 10, true];\n        for(const invalidItemType of invalidTypeItemTypes) {\n          copyVc.type = [invalidItemType];\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "Im6QJlfV-rG_X8zTlpEuB",
              "ctx": null,
              "_testId": "urn:uuid:8639f556-3f02-4767-986f-9ab7459c08f4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "MUST not verify if \"type\" items are not strings."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 43622,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 157,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" is not an object or a string.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidIssuerTypes = [[], null, undefined, 10, true];\n          for(const invalidIssuerType of invalidIssuerTypes) {\n            copyVc.issuer = invalidIssuerType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "Im6QJlfV-rG_X8zTlpEuB",
              "ctx": null,
              "_testId": "urn:uuid:04a544fd-0027-4bed-8a1f-bd1d958f671f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "MUST not verify if \"issuer\" is not an object or a string."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 43780,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 145,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" is not an object.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidCredentialSubjectTypes = [\n            'string', null, undefined, 10, true, []\n          ];\n          for(const invalidType of invalidCredentialSubjectTypes) {\n            copyVc.credentialSubject = invalidType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "Im6QJlfV-rG_X8zTlpEuB",
              "ctx": null,
              "_testId": "urn:uuid:703c46cf-11c8-4485-aefb-18ee0e84670b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "MUST not verify if \"credentialSubject\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 43925,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 173,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" is not an object.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidProofTypes = ['string', null, undefined, 10, true, []];\n        for(const invalidProofType of invalidProofTypes) {\n          copyVc.proof = invalidProofType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "Im6QJlfV-rG_X8zTlpEuB",
              "ctx": null,
              "_testId": "urn:uuid:19f4b73b-0077-44cd-aea5-0aaddafc1a3b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "MUST not verify if \"proof\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44097,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 96,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "N70v7KmkPRZoXXlX_hgBk",
          "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
          "_testId": "urn:uuid:dbf4c331-abe7-4ec0-a5d8-fbebbf1c53d8"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "DFzayOk3poa4UmObIjkUZ",
      "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
      "summary": {},
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Verifier",
      "reportData": [],
      "_testId": "urn:uuid:0562259e-078b-4c1a-897e-55c09df3a5ec",
      "columns": [
        "ACA-py",
        "apicatalog.com",
        "Danube Tech",
        "Digital Bazaar",
        "EWF",
        "LearnCard",
        "Mavennet",
        "SecureKey",
        "SpruceID",
        "Trinsic"
      ],
      "rows": [
        {
          "id": "MUST verify a valid VC.",
          "cells": [
            {
              "type": "test",
              "title": "MUST verify a valid VC.",
              "body": "async function() {\n        // this tells the test report which cell in the interop matrix\n        // the result goes in\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({vc: validVc});\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error);\n        should.exist(result);\n        should.exist(result.status);\n        result.status.should.equal(200);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "AOe_-HGloPsHAhdLr6f_o",
              "ctx": null,
              "_testId": "urn:uuid:30019b1e-fdf6-409d-b704-5764d2db8897",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "ACA-py",
                "rowId": "MUST verify a valid VC."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 294,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 213,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected HTTPError: 2 validation errors for Creden… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",\"https://www.w3.org/ns/credentials/examples/v2\",\"https://w3id.org/security/suites/ed25519-2020/v1\"],\"id\":\"urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33\",\"type\":[\"VerifiableCredential\",\"AlumniCredential\"],\"name\":\"Alumni Credential\",\"description\":\"A minimum viable example of an Alumni Credential.\",\"issuer\":\"https://vc.example/issuers/5678\",\"validFrom\":\"2023-01-01T00:00:00Z\",\"credentialSubject\":{\"id\":\"did:example:abcdefgh\",\"alumniOf\":\"The School of Examples\"},\"proof\":{\"type\":\"Ed25519Signature2020\",\"created\":\"2023-02-24T23:36:38Z\",\"verificationMethod\":\"did:key:z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2#z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z57Mm1vboMtZiCyJ4aReZsv8co4Re64Y8GEjL1ZARzMbXZgkARFLqFs1P345NpPGG2hgCrS4nNdvJhpwnrNyG3kEF\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          "https://www.w3.org/ns/credentials/examples/v2",
                          "https://w3id.org/security/suites/ed25519-2020/v1"
                        ],
                        "id": "urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33",
                        "type": [
                          "VerifiableCredential",
                          "AlumniCredential"
                        ],
                        "name": "Alumni Credential",
                        "description": "A minimum viable example of an Alumni Credential.",
                        "issuer": "https://vc.example/issuers/5678",
                        "validFrom": "2023-01-01T00:00:00Z",
                        "credentialSubject": {
                          "id": "did:example:abcdefgh",
                          "alumniOf": "The School of Examples"
                        },
                        "proof": {
                          "type": "Ed25519Signature2020",
                          "created": "2023-02-24T23:36:38Z",
                          "verificationMethod": "did:key:z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2#z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z57Mm1vboMtZiCyJ4aReZsv8co4Re64Y8GEjL1ZARzMbXZgkARFLqFs1P345NpPGG2hgCrS4nNdvJhpwnrNyG3kEF"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://aca-py.test-suite.app/vc/credentials/verify",
                  "status": 400,
                  "data": {
                    "message": "2 validation errors for Credential\nproof.list[DataIntegrityProof]\n  Input should be a valid list [type=list_type, input_value={'type': 'Ed25519Signatur...gCrS4nNdvJhpwnrNyG3kEF'}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.9/v/list_type\nproof.DataIntegrityProof.cryptosuite\n  Field required [type=missing, input_value={'type': 'Ed25519Signatur...gCrS4nNdvJhpwnrNyG3kEF'}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.9/v/missing"
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: expected HTTPError: 2 validation errors for Creden… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:48:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC.",
              "body": "async function() {\n        // this tells the test report which cell in the interop matrix\n        // the result goes in\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({vc: validVc});\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error);\n        should.exist(result);\n        should.exist(result.status);\n        result.status.should.equal(200);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "mAx_PESTu4vobhbslrz9-",
              "ctx": null,
              "_testId": "urn:uuid:5de52301-3ae7-4949-bf86-bfb80f1cf49b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "MUST verify a valid VC."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1772,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 3077,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC.",
              "body": "async function() {\n        // this tells the test report which cell in the interop matrix\n        // the result goes in\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({vc: validVc});\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error);\n        should.exist(result);\n        should.exist(result.status);\n        result.status.should.equal(200);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "_UkIhtjzW3MWxNhOVRP61",
              "ctx": null,
              "_testId": "urn:uuid:179d4ee5-6e59-405e-87c4-713c840c6667",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST verify a valid VC."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7168,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 967,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",\"https://www.w3.org/ns/credentials/examples/v2\",\"https://w3id.org/security/suites/ed25519-2020/v1\"],\"id\":\"urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33\",\"type\":[\"VerifiableCredential\",\"AlumniCredential\"],\"name\":\"Alumni Credential\",\"description\":\"A minimum viable example of an Alumni Credential.\",\"issuer\":\"https://vc.example/issuers/5678\",\"validFrom\":\"2023-01-01T00:00:00Z\",\"credentialSubject\":{\"id\":\"did:example:abcdefgh\",\"alumniOf\":\"The School of Examples\"},\"proof\":{\"type\":\"Ed25519Signature2020\",\"created\":\"2023-02-24T23:36:38Z\",\"verificationMethod\":\"did:key:z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2#z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z57Mm1vboMtZiCyJ4aReZsv8co4Re64Y8GEjL1ZARzMbXZgkARFLqFs1P345NpPGG2hgCrS4nNdvJhpwnrNyG3kEF\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          "https://www.w3.org/ns/credentials/examples/v2",
                          "https://w3id.org/security/suites/ed25519-2020/v1"
                        ],
                        "id": "urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33",
                        "type": [
                          "VerifiableCredential",
                          "AlumniCredential"
                        ],
                        "name": "Alumni Credential",
                        "description": "A minimum viable example of an Alumni Credential.",
                        "issuer": "https://vc.example/issuers/5678",
                        "validFrom": "2023-01-01T00:00:00Z",
                        "credentialSubject": {
                          "id": "did:example:abcdefgh",
                          "alumniOf": "The School of Examples"
                        },
                        "proof": {
                          "type": "Ed25519Signature2020",
                          "created": "2023-02-24T23:36:38Z",
                          "verificationMethod": "did:key:z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2#z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z57Mm1vboMtZiCyJ4aReZsv8co4Re64Y8GEjL1ZARzMbXZgkARFLqFs1P345NpPGG2hgCrS4nNdvJhpwnrNyG3kEF"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://univerifier.io/1.0/credentials/verify",
                  "status": 400,
                  "data": {
                    "checks": []
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:48:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC.",
              "body": "async function() {\n        // this tells the test report which cell in the interop matrix\n        // the result goes in\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({vc: validVc});\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error);\n        should.exist(result);\n        should.exist(result.status);\n        result.status.should.equal(200);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "_dPXADbOS22P5WN0MjTy7",
              "ctx": null,
              "_testId": "urn:uuid:8a0472a3-0af2-464e-85e8-b95a0a2f8825",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST verify a valid VC."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25606,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 209,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected HTTPError: Authorization error. { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          "https://www.w3.org/ns/credentials/examples/v2",
                          "https://w3id.org/security/suites/ed25519-2020/v1"
                        ],
                        "id": "urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33",
                        "type": [
                          "VerifiableCredential",
                          "AlumniCredential"
                        ],
                        "name": "Alumni Credential",
                        "description": "A minimum viable example of an Alumni Credential.",
                        "issuer": "https://vc.example/issuers/5678",
                        "validFrom": "2023-01-01T00:00:00Z",
                        "credentialSubject": {
                          "id": "did:example:abcdefgh",
                          "alumniOf": "The School of Examples"
                        },
                        "proof": {
                          "type": "Ed25519Signature2020",
                          "created": "2023-02-24T23:36:38Z",
                          "verificationMethod": "did:key:z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2#z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z57Mm1vboMtZiCyJ4aReZsv8co4Re64Y8GEjL1ZARzMbXZgkARFLqFs1P345NpPGG2hgCrS4nNdvJhpwnrNyG3kEF"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half",
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",\"https://www.w3.org/ns/credentials/examples/v2\",\"https://w3id.org/security/suites/ed25519-2020/v1\"],\"id\":\"urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33\",\"type\":[\"VerifiableCredential\",\"AlumniCredential\"],\"name\":\"Alumni Credential\",\"description\":\"A minimum viable example of an Alumni Credential.\",\"issuer\":\"https://vc.example/issuers/5678\",\"validFrom\":\"2023-01-01T00:00:00Z\",\"credentialSubject\":{\"id\":\"did:example:abcdefgh\",\"alumniOf\":\"The School of Examples\"},\"proof\":{\"type\":\"Ed25519Signature2020\",\"created\":\"2023-02-24T23:36:38Z\",\"verificationMethod\":\"did:key:z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2#z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z57Mm1vboMtZiCyJ4aReZsv8co4Re64Y8GEjL1ZARzMbXZgkARFLqFs1P345NpPGG2hgCrS4nNdvJhpwnrNyG3kEF\"}},\"options\":{\"checks\":[\"proof\"]}}"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://verifier.qa.veres.app/verifiers/z19jXQPi819fJVaBRFxZXqXay/credentials/verify",
                  "status": 403,
                  "data": {
                    "name": "NotAllowedError",
                    "message": "Authorization error.",
                    "details": {
                      "httpStatusCode": 403
                    },
                    "cause": {
                      "name": "Error",
                      "message": "The invoked capability has expired.",
                      "details": {},
                      "cause": {
                        "message": "An unspecified error occurred.",
                        "name": "OperationError",
                        "type": "OperationError"
                      },
                      "stack": "Error: The invoked capability has expired.\n    at onError (file:///home/node/app/node_modules/@bedrock/service-core/lib/http/middleware.js:188:13)\n    at Module.handleError (file:///home/node/app/node_modules/@digitalbazaar/ezcap-express/lib/helpers.js:145:12)\n    at file:///home/node/app/node_modules/@digitalbazaar/ezcap-express/lib/authorize.js:137:15\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                      "type": "Error"
                    },
                    "stack": "NotAllowedError: Authorization error.\n    at onError (file:///home/node/app/node_modules/@bedrock/service-core/lib/http/middleware.js:195:9)\n    at Module.handleError (file:///home/node/app/node_modules/@digitalbazaar/ezcap-express/lib/helpers.js:145:12)\n    at file:///home/node/app/node_modules/@digitalbazaar/ezcap-express/lib/authorize.js:137:15\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                    "type": "NotAllowedError"
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: expected HTTPError: Authorization error. { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:48:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC.",
              "body": "async function() {\n        // this tells the test report which cell in the interop matrix\n        // the result goes in\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({vc: validVc});\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error);\n        should.exist(result);\n        should.exist(result.status);\n        result.status.should.equal(200);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "Uyk6JwVHU3SoEbycQ9XnY",
              "ctx": null,
              "_testId": "urn:uuid:2d2e33cd-8e7b-4c5b-9927-95a0c50d05b8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "MUST verify a valid VC."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27558,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 546,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected HTTPError { …(7) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",\"https://www.w3.org/ns/credentials/examples/v2\",\"https://w3id.org/security/suites/ed25519-2020/v1\"],\"id\":\"urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33\",\"type\":[\"VerifiableCredential\",\"AlumniCredential\"],\"name\":\"Alumni Credential\",\"description\":\"A minimum viable example of an Alumni Credential.\",\"issuer\":\"https://vc.example/issuers/5678\",\"validFrom\":\"2023-01-01T00:00:00Z\",\"credentialSubject\":{\"id\":\"did:example:abcdefgh\",\"alumniOf\":\"The School of Examples\"},\"proof\":{\"type\":\"Ed25519Signature2020\",\"created\":\"2023-02-24T23:36:38Z\",\"verificationMethod\":\"did:key:z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2#z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z57Mm1vboMtZiCyJ4aReZsv8co4Re64Y8GEjL1ZARzMbXZgkARFLqFs1P345NpPGG2hgCrS4nNdvJhpwnrNyG3kEF\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          "https://www.w3.org/ns/credentials/examples/v2",
                          "https://w3id.org/security/suites/ed25519-2020/v1"
                        ],
                        "id": "urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33",
                        "type": [
                          "VerifiableCredential",
                          "AlumniCredential"
                        ],
                        "name": "Alumni Credential",
                        "description": "A minimum viable example of an Alumni Credential.",
                        "issuer": "https://vc.example/issuers/5678",
                        "validFrom": "2023-01-01T00:00:00Z",
                        "credentialSubject": {
                          "id": "did:example:abcdefgh",
                          "alumniOf": "The School of Examples"
                        },
                        "proof": {
                          "type": "Ed25519Signature2020",
                          "created": "2023-02-24T23:36:38Z",
                          "verificationMethod": "did:key:z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2#z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z57Mm1vboMtZiCyJ4aReZsv8co4Re64Y8GEjL1ZARzMbXZgkARFLqFs1P345NpPGG2hgCrS4nNdvJhpwnrNyG3kEF"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc-api-dev.energyweb.org/v1/vc-api/credentials/verify",
                  "status": 400,
                  "data": {
                    "message": [
                      "verifiableCredential.issuanceDate must be a valid ISO 8601 date string"
                    ],
                    "error": "Bad Request",
                    "statusCode": 400
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: expected HTTPError { …(7) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:48:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC.",
              "body": "async function() {\n        // this tells the test report which cell in the interop matrix\n        // the result goes in\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({vc: validVc});\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error);\n        should.exist(result);\n        should.exist(result.status);\n        result.status.should.equal(200);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "5oEvMqGzI6CDXT8zSgOUa",
              "ctx": null,
              "_testId": "urn:uuid:49167625-7c8e-4214-8f7b-17e6c6cb3298",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "MUST verify a valid VC."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33007,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 148,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",\"https://www.w3.org/ns/credentials/examples/v2\",\"https://w3id.org/security/suites/ed25519-2020/v1\"],\"id\":\"urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33\",\"type\":[\"VerifiableCredential\",\"AlumniCredential\"],\"name\":\"Alumni Credential\",\"description\":\"A minimum viable example of an Alumni Credential.\",\"issuer\":\"https://vc.example/issuers/5678\",\"validFrom\":\"2023-01-01T00:00:00Z\",\"credentialSubject\":{\"id\":\"did:example:abcdefgh\",\"alumniOf\":\"The School of Examples\"},\"proof\":{\"type\":\"Ed25519Signature2020\",\"created\":\"2023-02-24T23:36:38Z\",\"verificationMethod\":\"did:key:z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2#z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z57Mm1vboMtZiCyJ4aReZsv8co4Re64Y8GEjL1ZARzMbXZgkARFLqFs1P345NpPGG2hgCrS4nNdvJhpwnrNyG3kEF\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          "https://www.w3.org/ns/credentials/examples/v2",
                          "https://w3id.org/security/suites/ed25519-2020/v1"
                        ],
                        "id": "urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33",
                        "type": [
                          "VerifiableCredential",
                          "AlumniCredential"
                        ],
                        "name": "Alumni Credential",
                        "description": "A minimum viable example of an Alumni Credential.",
                        "issuer": "https://vc.example/issuers/5678",
                        "validFrom": "2023-01-01T00:00:00Z",
                        "credentialSubject": {
                          "id": "did:example:abcdefgh",
                          "alumniOf": "The School of Examples"
                        },
                        "proof": {
                          "type": "Ed25519Signature2020",
                          "created": "2023-02-24T23:36:38Z",
                          "verificationMethod": "did:key:z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2#z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z57Mm1vboMtZiCyJ4aReZsv8co4Re64Y8GEjL1ZARzMbXZgkARFLqFs1P345NpPGG2hgCrS4nNdvJhpwnrNyG3kEF"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://bridge.learncard.com/credentials/verify",
                  "status": 400,
                  "data": "Invalid input: [\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"verifiableCredential\",\n      \"issuanceDate\"\n    ],\n    \"message\": \"Required\"\n  }\n]"
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:48:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC.",
              "body": "async function() {\n        // this tells the test report which cell in the interop matrix\n        // the result goes in\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({vc: validVc});\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error);\n        should.exist(result);\n        should.exist(result.status);\n        result.status.should.equal(200);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "hvOfNszx7L1coXhRnj02P",
              "ctx": null,
              "_testId": "urn:uuid:8ea890b9-aa51-4e83-97df-e0747a44e686",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Mavennet",
                "rowId": "MUST verify a valid VC."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 35299,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 408,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected HTTPError { message: [ …(6) ], …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",\"https://www.w3.org/ns/credentials/examples/v2\",\"https://w3id.org/security/suites/ed25519-2020/v1\"],\"id\":\"urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33\",\"type\":[\"VerifiableCredential\",\"AlumniCredential\"],\"name\":\"Alumni Credential\",\"description\":\"A minimum viable example of an Alumni Credential.\",\"issuer\":\"https://vc.example/issuers/5678\",\"validFrom\":\"2023-01-01T00:00:00Z\",\"credentialSubject\":{\"id\":\"did:example:abcdefgh\",\"alumniOf\":\"The School of Examples\"},\"proof\":{\"type\":\"Ed25519Signature2020\",\"created\":\"2023-02-24T23:36:38Z\",\"verificationMethod\":\"did:key:z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2#z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z57Mm1vboMtZiCyJ4aReZsv8co4Re64Y8GEjL1ZARzMbXZgkARFLqFs1P345NpPGG2hgCrS4nNdvJhpwnrNyG3kEF\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          "https://www.w3.org/ns/credentials/examples/v2",
                          "https://w3id.org/security/suites/ed25519-2020/v1"
                        ],
                        "id": "urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33",
                        "type": [
                          "VerifiableCredential",
                          "AlumniCredential"
                        ],
                        "name": "Alumni Credential",
                        "description": "A minimum viable example of an Alumni Credential.",
                        "issuer": "https://vc.example/issuers/5678",
                        "validFrom": "2023-01-01T00:00:00Z",
                        "credentialSubject": {
                          "id": "did:example:abcdefgh",
                          "alumniOf": "The School of Examples"
                        },
                        "proof": {
                          "type": "Ed25519Signature2020",
                          "created": "2023-02-24T23:36:38Z",
                          "verificationMethod": "did:key:z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2#z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z57Mm1vboMtZiCyJ4aReZsv8co4Re64Y8GEjL1ZARzMbXZgkARFLqFs1P345NpPGG2hgCrS4nNdvJhpwnrNyG3kEF"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://api.staging.refiner.neoflow.energy/credentials/verify",
                  "status": 400,
                  "data": {
                    "message": [
                      "each value in @context must be a URL address",
                      "@context must contain at least 1 elements",
                      "@context must be an array",
                      "id must be a string",
                      "id should not be empty",
                      "type must be a string"
                    ],
                    "error": "Bad Request",
                    "statusCode": 400
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: expected HTTPError { message: [ …(6) ], …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:48:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC.",
              "body": "async function() {\n        // this tells the test report which cell in the interop matrix\n        // the result goes in\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({vc: validVc});\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error);\n        should.exist(result);\n        should.exist(result.status);\n        result.status.should.equal(200);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "9ovA8b3BrvylUkiZe-TQ_",
              "ctx": null,
              "_testId": "urn:uuid:bb05abfa-4df8-4a4a-a62c-cf726aa3cafc",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SecureKey",
                "rowId": "MUST verify a valid VC."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 37799,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 116,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected TypeError: fetch failed { …(2) } to not exist",
                "showDiff": false,
                "actual": {
                  "requestUrl": "https://verifier-vcs.sandbox.trustbloc.dev/vc-verifier-interop/verifier/credentials/verify"
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: expected TypeError: fetch failed { …(2) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:48:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC.",
              "body": "async function() {\n        // this tells the test report which cell in the interop matrix\n        // the result goes in\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({vc: validVc});\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error);\n        should.exist(result);\n        should.exist(result.status);\n        result.status.should.equal(200);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "iXtIgDC8QnsTbVosWjgVz",
              "ctx": null,
              "_testId": "urn:uuid:8f4a1b26-e2e6-42ad-ae88-032be93c778c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST verify a valid VC."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 39239,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 137,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC.",
              "body": "async function() {\n        // this tells the test report which cell in the interop matrix\n        // the result goes in\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({vc: validVc});\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error);\n        should.exist(result);\n        should.exist(result.status);\n        result.status.should.equal(200);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "Im6QJlfV-rG_X8zTlpEuB",
              "ctx": null,
              "_testId": "urn:uuid:ba9d82f7-3a1b-4146-b6d8-d6316e34ec58",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "MUST verify a valid VC."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 40586,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2107,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "MUST not verify if \"@context\" property is missing.",
          "cells": [
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noContextVc = klona(validVc);\n          delete noContextVc['@context'];\n          const body = createRequestBody({vc: noContextVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "AOe_-HGloPsHAhdLr6f_o",
              "ctx": null,
              "_testId": "urn:uuid:e90317d1-b90d-4e25-ac7c-4c437e8048b5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "ACA-py",
                "rowId": "MUST not verify if \"@context\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 511,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 32,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noContextVc = klona(validVc);\n          delete noContextVc['@context'];\n          const body = createRequestBody({vc: noContextVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "mAx_PESTu4vobhbslrz9-",
              "ctx": null,
              "_testId": "urn:uuid:6db923a7-dc79-4169-8573-f4bdb9a51e94",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "MUST not verify if \"@context\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4850,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 43,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noContextVc = klona(validVc);\n          delete noContextVc['@context'];\n          const body = createRequestBody({vc: noContextVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "_UkIhtjzW3MWxNhOVRP61",
              "ctx": null,
              "_testId": "urn:uuid:8be4c3f9-7da7-4cd6-974d-4407a20ac5c2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST not verify if \"@context\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8136,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 111,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noContextVc = klona(validVc);\n          delete noContextVc['@context'];\n          const body = createRequestBody({vc: noContextVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "_dPXADbOS22P5WN0MjTy7",
              "ctx": null,
              "_testId": "urn:uuid:c08dcb39-a09a-4537-b389-c9860e3358f2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST not verify if \"@context\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25816,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 49,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noContextVc = klona(validVc);\n          delete noContextVc['@context'];\n          const body = createRequestBody({vc: noContextVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "Uyk6JwVHU3SoEbycQ9XnY",
              "ctx": null,
              "_testId": "urn:uuid:08740375-0504-49b2-b8c5-f67e38efbe94",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "MUST not verify if \"@context\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28104,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 90,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noContextVc = klona(validVc);\n          delete noContextVc['@context'];\n          const body = createRequestBody({vc: noContextVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "5oEvMqGzI6CDXT8zSgOUa",
              "ctx": null,
              "_testId": "urn:uuid:f56f89e5-c4b4-4fd1-9854-de17fc7b8037",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "MUST not verify if \"@context\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33156,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 54,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noContextVc = klona(validVc);\n          delete noContextVc['@context'];\n          const body = createRequestBody({vc: noContextVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "hvOfNszx7L1coXhRnj02P",
              "ctx": null,
              "_testId": "urn:uuid:6e95797f-9f5f-4d3c-a53f-c3252e6e3da2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Mavennet",
                "rowId": "MUST not verify if \"@context\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 35712,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 53,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noContextVc = klona(validVc);\n          delete noContextVc['@context'];\n          const body = createRequestBody({vc: noContextVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "9ovA8b3BrvylUkiZe-TQ_",
              "ctx": null,
              "_testId": "urn:uuid:c167cbd2-e519-4eab-854c-f27427987bea",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SecureKey",
                "rowId": "MUST not verify if \"@context\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 37917,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 118,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an HTTP error response code: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an HTTP error response code: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:14:10)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:63:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noContextVc = klona(validVc);\n          delete noContextVc['@context'];\n          const body = createRequestBody({vc: noContextVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "iXtIgDC8QnsTbVosWjgVz",
              "ctx": null,
              "_testId": "urn:uuid:27334132-9b00-486c-a03a-49c081670617",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"@context\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 39376,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 20,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noContextVc = klona(validVc);\n          delete noContextVc['@context'];\n          const body = createRequestBody({vc: noContextVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "Im6QJlfV-rG_X8zTlpEuB",
              "ctx": null,
              "_testId": "urn:uuid:a98d6ecc-b4a7-4324-89d9-5f179782487c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "MUST not verify if \"@context\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 42694,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 56,
              "state": "passed",
              "speed": "medium"
            }
          ]
        },
        {
          "id": "MUST not verify if \"type\" property is missing.",
          "cells": [
            {
              "type": "test",
              "title": "MUST not verify if \"type\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noTypeVc = klona(validVc);\n        delete noTypeVc.type;\n        const body = createRequestBody({vc: noTypeVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "AOe_-HGloPsHAhdLr6f_o",
              "ctx": null,
              "_testId": "urn:uuid:e6ee760f-e1ee-41d8-a11a-3510042a664a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "ACA-py",
                "rowId": "MUST not verify if \"type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 543,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 31,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noTypeVc = klona(validVc);\n        delete noTypeVc.type;\n        const body = createRequestBody({vc: noTypeVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "mAx_PESTu4vobhbslrz9-",
              "ctx": null,
              "_testId": "urn:uuid:6b9387e6-9ee7-4424-a742-d0dfae6d0367",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "MUST not verify if \"type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4894,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 49,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noTypeVc = klona(validVc);\n        delete noTypeVc.type;\n        const body = createRequestBody({vc: noTypeVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "_UkIhtjzW3MWxNhOVRP61",
              "ctx": null,
              "_testId": "urn:uuid:3c1629dc-7251-498b-9c33-a27b1862bbc4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST not verify if \"type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8247,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 644,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noTypeVc = klona(validVc);\n        delete noTypeVc.type;\n        const body = createRequestBody({vc: noTypeVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "_dPXADbOS22P5WN0MjTy7",
              "ctx": null,
              "_testId": "urn:uuid:bd7c99ed-d3ce-4709-85ab-dfaa028aa1b7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST not verify if \"type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25864,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 34,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noTypeVc = klona(validVc);\n        delete noTypeVc.type;\n        const body = createRequestBody({vc: noTypeVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "Uyk6JwVHU3SoEbycQ9XnY",
              "ctx": null,
              "_testId": "urn:uuid:1f69c69f-c9ac-4698-8b85-48f678c7e923",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "MUST not verify if \"type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28195,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 90,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noTypeVc = klona(validVc);\n        delete noTypeVc.type;\n        const body = createRequestBody({vc: noTypeVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "5oEvMqGzI6CDXT8zSgOUa",
              "ctx": null,
              "_testId": "urn:uuid:4e8fce3a-1189-42aa-bce3-3db2d3cecba5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "MUST not verify if \"type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33210,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 46,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noTypeVc = klona(validVc);\n        delete noTypeVc.type;\n        const body = createRequestBody({vc: noTypeVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "hvOfNszx7L1coXhRnj02P",
              "ctx": null,
              "_testId": "urn:uuid:1ed0c01a-4252-4445-afe2-ee7da88c139d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Mavennet",
                "rowId": "MUST not verify if \"type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 35766,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 35,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noTypeVc = klona(validVc);\n        delete noTypeVc.type;\n        const body = createRequestBody({vc: noTypeVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "9ovA8b3BrvylUkiZe-TQ_",
              "ctx": null,
              "_testId": "urn:uuid:e9d0cfcb-6ead-49ca-9460-29b11da29d47",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SecureKey",
                "rowId": "MUST not verify if \"type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 38035,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 127,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an HTTP error response code: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an HTTP error response code: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:14:10)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:74:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noTypeVc = klona(validVc);\n        delete noTypeVc.type;\n        const body = createRequestBody({vc: noTypeVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "iXtIgDC8QnsTbVosWjgVz",
              "ctx": null,
              "_testId": "urn:uuid:0582443c-107e-412c-b5a4-6f4701892eb3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 39397,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 30,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noTypeVc = klona(validVc);\n        delete noTypeVc.type;\n        const body = createRequestBody({vc: noTypeVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "Im6QJlfV-rG_X8zTlpEuB",
              "ctx": null,
              "_testId": "urn:uuid:e17ac4a0-02ab-4f3a-ad22-1be790b3b110",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "MUST not verify if \"type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 42750,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 33,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "MUST not verify if \"issuer\" property is missing.",
          "cells": [
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noIssuerVc = klona(validVc);\n        delete noIssuerVc.issuer;\n        const body = createRequestBody({vc: noIssuerVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "AOe_-HGloPsHAhdLr6f_o",
              "ctx": null,
              "_testId": "urn:uuid:2445b8c4-bf99-4dc7-9eae-b51a5521c534",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "ACA-py",
                "rowId": "MUST not verify if \"issuer\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 574,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 27,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noIssuerVc = klona(validVc);\n        delete noIssuerVc.issuer;\n        const body = createRequestBody({vc: noIssuerVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "mAx_PESTu4vobhbslrz9-",
              "ctx": null,
              "_testId": "urn:uuid:8ca29043-a0ef-4dcc-bd7b-cfc3988ac33f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "MUST not verify if \"issuer\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4943,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 52,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noIssuerVc = klona(validVc);\n        delete noIssuerVc.issuer;\n        const body = createRequestBody({vc: noIssuerVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "_UkIhtjzW3MWxNhOVRP61",
              "ctx": null,
              "_testId": "urn:uuid:52b57baf-fc6b-42bb-9d0d-0815677bf383",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST not verify if \"issuer\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8891,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 432,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noIssuerVc = klona(validVc);\n        delete noIssuerVc.issuer;\n        const body = createRequestBody({vc: noIssuerVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "_dPXADbOS22P5WN0MjTy7",
              "ctx": null,
              "_testId": "urn:uuid:61085e87-b22e-4db5-b4ba-f0b1a2e23dea",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST not verify if \"issuer\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25899,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 35,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noIssuerVc = klona(validVc);\n        delete noIssuerVc.issuer;\n        const body = createRequestBody({vc: noIssuerVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "Uyk6JwVHU3SoEbycQ9XnY",
              "ctx": null,
              "_testId": "urn:uuid:9396db9b-9034-454e-ad11-4f227fdf764d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "MUST not verify if \"issuer\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28286,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 92,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noIssuerVc = klona(validVc);\n        delete noIssuerVc.issuer;\n        const body = createRequestBody({vc: noIssuerVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "5oEvMqGzI6CDXT8zSgOUa",
              "ctx": null,
              "_testId": "urn:uuid:353dad76-fd10-4fcd-8c32-2924f7f691f5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "MUST not verify if \"issuer\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33256,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 41,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noIssuerVc = klona(validVc);\n        delete noIssuerVc.issuer;\n        const body = createRequestBody({vc: noIssuerVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "hvOfNszx7L1coXhRnj02P",
              "ctx": null,
              "_testId": "urn:uuid:50a67048-13d1-4386-9812-c3f04c41bcaf",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Mavennet",
                "rowId": "MUST not verify if \"issuer\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 35802,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 37,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noIssuerVc = klona(validVc);\n        delete noIssuerVc.issuer;\n        const body = createRequestBody({vc: noIssuerVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "9ovA8b3BrvylUkiZe-TQ_",
              "ctx": null,
              "_testId": "urn:uuid:fc39b620-5dd2-443b-98f5-62dcb5b46400",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SecureKey",
                "rowId": "MUST not verify if \"issuer\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 38163,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 45,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an HTTP error response code: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an HTTP error response code: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:14:10)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:85:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noIssuerVc = klona(validVc);\n        delete noIssuerVc.issuer;\n        const body = createRequestBody({vc: noIssuerVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "iXtIgDC8QnsTbVosWjgVz",
              "ctx": null,
              "_testId": "urn:uuid:6c4b8943-1f37-4825-a858-79aedfd237fb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"issuer\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 39427,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 23,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noIssuerVc = klona(validVc);\n        delete noIssuerVc.issuer;\n        const body = createRequestBody({vc: noIssuerVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "Im6QJlfV-rG_X8zTlpEuB",
              "ctx": null,
              "_testId": "urn:uuid:dbc4e6fa-49f5-4d96-9f87-bd5d25bb5958",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "MUST not verify if \"issuer\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 42784,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 30,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "MUST not verify if \"credentialSubject\" property is missing.",
          "cells": [
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noCredentialSubjectVc = klona(validVc);\n          delete noCredentialSubjectVc.credentialSubject;\n          const body = createRequestBody({vc: noCredentialSubjectVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "AOe_-HGloPsHAhdLr6f_o",
              "ctx": null,
              "_testId": "urn:uuid:52f15d70-ed0c-4ad9-8598-34a420638ef9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "ACA-py",
                "rowId": "MUST not verify if \"credentialSubject\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 601,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 26,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noCredentialSubjectVc = klona(validVc);\n          delete noCredentialSubjectVc.credentialSubject;\n          const body = createRequestBody({vc: noCredentialSubjectVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "mAx_PESTu4vobhbslrz9-",
              "ctx": null,
              "_testId": "urn:uuid:a6bb9dba-75c1-4c92-9371-661869b082ef",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "MUST not verify if \"credentialSubject\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4995,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 47,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noCredentialSubjectVc = klona(validVc);\n          delete noCredentialSubjectVc.credentialSubject;\n          const body = createRequestBody({vc: noCredentialSubjectVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "_UkIhtjzW3MWxNhOVRP61",
              "ctx": null,
              "_testId": "urn:uuid:78f0e562-e491-445a-973e-da4964aca214",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST not verify if \"credentialSubject\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9324,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 388,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noCredentialSubjectVc = klona(validVc);\n          delete noCredentialSubjectVc.credentialSubject;\n          const body = createRequestBody({vc: noCredentialSubjectVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "_dPXADbOS22P5WN0MjTy7",
              "ctx": null,
              "_testId": "urn:uuid:774fda60-6b75-4f9b-8f27-075cc9cebc0c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST not verify if \"credentialSubject\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25934,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 34,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noCredentialSubjectVc = klona(validVc);\n          delete noCredentialSubjectVc.credentialSubject;\n          const body = createRequestBody({vc: noCredentialSubjectVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "Uyk6JwVHU3SoEbycQ9XnY",
              "ctx": null,
              "_testId": "urn:uuid:01be421f-4b5a-453b-95a2-ceba7f43acd8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "MUST not verify if \"credentialSubject\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28379,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 94,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noCredentialSubjectVc = klona(validVc);\n          delete noCredentialSubjectVc.credentialSubject;\n          const body = createRequestBody({vc: noCredentialSubjectVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "5oEvMqGzI6CDXT8zSgOUa",
              "ctx": null,
              "_testId": "urn:uuid:ffff19ad-793b-43a5-a6b1-a406eadb30a4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "MUST not verify if \"credentialSubject\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33298,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 42,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noCredentialSubjectVc = klona(validVc);\n          delete noCredentialSubjectVc.credentialSubject;\n          const body = createRequestBody({vc: noCredentialSubjectVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "hvOfNszx7L1coXhRnj02P",
              "ctx": null,
              "_testId": "urn:uuid:f489dd13-1fec-4610-a4f2-42c284c863b4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Mavennet",
                "rowId": "MUST not verify if \"credentialSubject\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 35839,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 34,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noCredentialSubjectVc = klona(validVc);\n          delete noCredentialSubjectVc.credentialSubject;\n          const body = createRequestBody({vc: noCredentialSubjectVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "9ovA8b3BrvylUkiZe-TQ_",
              "ctx": null,
              "_testId": "urn:uuid:5c5c2497-098e-469a-ad74-7975745abd27",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SecureKey",
                "rowId": "MUST not verify if \"credentialSubject\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 38207,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 106,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an HTTP error response code: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an HTTP error response code: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:14:10)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:97:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noCredentialSubjectVc = klona(validVc);\n          delete noCredentialSubjectVc.credentialSubject;\n          const body = createRequestBody({vc: noCredentialSubjectVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "iXtIgDC8QnsTbVosWjgVz",
              "ctx": null,
              "_testId": "urn:uuid:52333a70-0ede-48d7-a521-26009f7fa8dd",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"credentialSubject\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 39451,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 19,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noCredentialSubjectVc = klona(validVc);\n          delete noCredentialSubjectVc.credentialSubject;\n          const body = createRequestBody({vc: noCredentialSubjectVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "Im6QJlfV-rG_X8zTlpEuB",
              "ctx": null,
              "_testId": "urn:uuid:482967bd-7683-4f7d-b08d-903d8fd40db3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "MUST not verify if \"credentialSubject\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 42815,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 43,
              "state": "passed",
              "speed": "medium"
            }
          ]
        },
        {
          "id": "MUST not verify if \"proof\" property is missing.",
          "cells": [
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noProofVc = klona(validVc);\n        delete noProofVc.proof;\n        const body = createRequestBody({vc: noProofVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "AOe_-HGloPsHAhdLr6f_o",
              "ctx": null,
              "_testId": "urn:uuid:47064dd8-309e-487c-b13e-9ca087f9a0bb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "ACA-py",
                "rowId": "MUST not verify if \"proof\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 628,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 32,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected status code 400 or 422.: expected 500 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 500,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Expected status code 400 or 422.: expected 500 to be one of [ 400, 422 ]\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:15:26)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:108:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noProofVc = klona(validVc);\n        delete noProofVc.proof;\n        const body = createRequestBody({vc: noProofVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "mAx_PESTu4vobhbslrz9-",
              "ctx": null,
              "_testId": "urn:uuid:80762647-7912-414e-a4ef-9040e5361318",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "MUST not verify if \"proof\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5043,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 46,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noProofVc = klona(validVc);\n        delete noProofVc.proof;\n        const body = createRequestBody({vc: noProofVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "_UkIhtjzW3MWxNhOVRP61",
              "ctx": null,
              "_testId": "urn:uuid:9208776d-dcb1-46ac-b2e4-a66c338245de",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST not verify if \"proof\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9712,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 390,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noProofVc = klona(validVc);\n        delete noProofVc.proof;\n        const body = createRequestBody({vc: noProofVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "_dPXADbOS22P5WN0MjTy7",
              "ctx": null,
              "_testId": "urn:uuid:03408886-3473-4d3e-afe4-6a83b846bfdb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST not verify if \"proof\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25969,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 45,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected status code 400 or 422.: expected 403 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 403,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Expected status code 400 or 422.: expected 403 to be one of [ 400, 422 ]\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:15:26)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:108:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noProofVc = klona(validVc);\n        delete noProofVc.proof;\n        const body = createRequestBody({vc: noProofVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "Uyk6JwVHU3SoEbycQ9XnY",
              "ctx": null,
              "_testId": "urn:uuid:d1b1a6fd-18cd-4d22-b3e8-105660c118ee",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "MUST not verify if \"proof\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28473,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 90,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noProofVc = klona(validVc);\n        delete noProofVc.proof;\n        const body = createRequestBody({vc: noProofVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "5oEvMqGzI6CDXT8zSgOUa",
              "ctx": null,
              "_testId": "urn:uuid:3a0f67c0-3f32-4f83-9a2b-176750a7887e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "MUST not verify if \"proof\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33340,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 45,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noProofVc = klona(validVc);\n        delete noProofVc.proof;\n        const body = createRequestBody({vc: noProofVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "hvOfNszx7L1coXhRnj02P",
              "ctx": null,
              "_testId": "urn:uuid:e8230bcd-3127-4153-9618-950ef920233d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Mavennet",
                "rowId": "MUST not verify if \"proof\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 35873,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 37,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noProofVc = klona(validVc);\n        delete noProofVc.proof;\n        const body = createRequestBody({vc: noProofVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "9ovA8b3BrvylUkiZe-TQ_",
              "ctx": null,
              "_testId": "urn:uuid:5f1b3d59-7824-496f-a40f-a6805c70346f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SecureKey",
                "rowId": "MUST not verify if \"proof\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 38314,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 71,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an HTTP error response code: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an HTTP error response code: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:14:10)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:108:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noProofVc = klona(validVc);\n        delete noProofVc.proof;\n        const body = createRequestBody({vc: noProofVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "iXtIgDC8QnsTbVosWjgVz",
              "ctx": null,
              "_testId": "urn:uuid:d18434a2-7317-416e-a2b2-79b21b827781",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"proof\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 39471,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 23,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noProofVc = klona(validVc);\n        delete noProofVc.proof;\n        const body = createRequestBody({vc: noProofVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "Im6QJlfV-rG_X8zTlpEuB",
              "ctx": null,
              "_testId": "urn:uuid:1dd01ac2-e09a-4568-a4bf-a1d2048ff228",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "MUST not verify if \"proof\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 42857,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 18,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "MUST not verify if \"proof.type\" property is missing.",
          "cells": [
            {
              "type": "test",
              "title": "MUST not verify if \"proof.type\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofTypeVc = klona(validVc);\n          delete noProofTypeVc.proof.type;\n          const body = createRequestBody({vc: noProofTypeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "AOe_-HGloPsHAhdLr6f_o",
              "ctx": null,
              "_testId": "urn:uuid:0bf14455-33f1-4926-bfb9-06ddecd7304c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "ACA-py",
                "rowId": "MUST not verify if \"proof.type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 660,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 26,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.type\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofTypeVc = klona(validVc);\n          delete noProofTypeVc.proof.type;\n          const body = createRequestBody({vc: noProofTypeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "mAx_PESTu4vobhbslrz9-",
              "ctx": null,
              "_testId": "urn:uuid:761edd95-4c04-4bed-b11f-22fefb4a3a66",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "MUST not verify if \"proof.type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5089,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 57,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.type\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofTypeVc = klona(validVc);\n          delete noProofTypeVc.proof.type;\n          const body = createRequestBody({vc: noProofTypeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "_UkIhtjzW3MWxNhOVRP61",
              "ctx": null,
              "_testId": "urn:uuid:caefd0b9-c80f-4f73-8cb8-50118216f34a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST not verify if \"proof.type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10101,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 425,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.type\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofTypeVc = klona(validVc);\n          delete noProofTypeVc.proof.type;\n          const body = createRequestBody({vc: noProofTypeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "_dPXADbOS22P5WN0MjTy7",
              "ctx": null,
              "_testId": "urn:uuid:1899d1fb-ac89-4a55-a4ef-ad83ccc28aa7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST not verify if \"proof.type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26014,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 40,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected status code 400 or 422.: expected 403 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 403,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Expected status code 400 or 422.: expected 403 to be one of [ 400, 422 ]\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:15:26)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:120:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.type\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofTypeVc = klona(validVc);\n          delete noProofTypeVc.proof.type;\n          const body = createRequestBody({vc: noProofTypeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "Uyk6JwVHU3SoEbycQ9XnY",
              "ctx": null,
              "_testId": "urn:uuid:da61d344-0275-494f-8932-58dac909dfad",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "MUST not verify if \"proof.type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28563,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 91,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.type\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofTypeVc = klona(validVc);\n          delete noProofTypeVc.proof.type;\n          const body = createRequestBody({vc: noProofTypeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "5oEvMqGzI6CDXT8zSgOUa",
              "ctx": null,
              "_testId": "urn:uuid:64d4e9c6-6c49-4779-bd36-01930233fb79",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "MUST not verify if \"proof.type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33385,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 40,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.type\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofTypeVc = klona(validVc);\n          delete noProofTypeVc.proof.type;\n          const body = createRequestBody({vc: noProofTypeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "hvOfNszx7L1coXhRnj02P",
              "ctx": null,
              "_testId": "urn:uuid:52949b19-b03f-4e4e-805a-dd400a335ea5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Mavennet",
                "rowId": "MUST not verify if \"proof.type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 35910,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 35,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.type\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofTypeVc = klona(validVc);\n          delete noProofTypeVc.proof.type;\n          const body = createRequestBody({vc: noProofTypeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "9ovA8b3BrvylUkiZe-TQ_",
              "ctx": null,
              "_testId": "urn:uuid:dba28404-42d9-477e-b8cc-5bbf067bd465",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SecureKey",
                "rowId": "MUST not verify if \"proof.type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 38386,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 9,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an HTTP error response code: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an HTTP error response code: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:14:10)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:120:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.type\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofTypeVc = klona(validVc);\n          delete noProofTypeVc.proof.type;\n          const body = createRequestBody({vc: noProofTypeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "iXtIgDC8QnsTbVosWjgVz",
              "ctx": null,
              "_testId": "urn:uuid:56865352-98ac-4a47-b0ba-dc6c3b5e47d8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"proof.type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 39494,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 23,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.type\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofTypeVc = klona(validVc);\n          delete noProofTypeVc.proof.type;\n          const body = createRequestBody({vc: noProofTypeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "Im6QJlfV-rG_X8zTlpEuB",
              "ctx": null,
              "_testId": "urn:uuid:7ce85f8c-c7c0-4575-937b-a02fd8caa73f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "MUST not verify if \"proof.type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 42875,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 19,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "MUST not verify if \"proof.created\" property is missing.",
          "cells": [
            {
              "type": "test",
              "title": "MUST not verify if \"proof.created\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofCreatedVc = klona(validVc);\n          delete noProofCreatedVc.proof.created;\n          const body = createRequestBody({vc: noProofCreatedVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "AOe_-HGloPsHAhdLr6f_o",
              "ctx": null,
              "_testId": "urn:uuid:28b008ab-1749-45bd-a15e-b6eaef21f9da",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "ACA-py",
                "rowId": "MUST not verify if \"proof.created\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 686,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 25,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.created\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofCreatedVc = klona(validVc);\n          delete noProofCreatedVc.proof.created;\n          const body = createRequestBody({vc: noProofCreatedVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "mAx_PESTu4vobhbslrz9-",
              "ctx": null,
              "_testId": "urn:uuid:991e24d4-71c2-4534-8003-70dc8e1a971e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "MUST not verify if \"proof.created\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5146,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 46,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.created\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofCreatedVc = klona(validVc);\n          delete noProofCreatedVc.proof.created;\n          const body = createRequestBody({vc: noProofCreatedVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "_UkIhtjzW3MWxNhOVRP61",
              "ctx": null,
              "_testId": "urn:uuid:5b87612f-d70b-47c5-a0d9-6084ab82570c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST not verify if \"proof.created\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10527,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 399,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.created\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofCreatedVc = klona(validVc);\n          delete noProofCreatedVc.proof.created;\n          const body = createRequestBody({vc: noProofCreatedVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "_dPXADbOS22P5WN0MjTy7",
              "ctx": null,
              "_testId": "urn:uuid:773db781-382e-45cc-8a8e-557630a88761",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST not verify if \"proof.created\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26055,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 38,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected status code 400 or 422.: expected 403 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 403,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Expected status code 400 or 422.: expected 403 to be one of [ 400, 422 ]\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:15:26)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:132:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.created\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofCreatedVc = klona(validVc);\n          delete noProofCreatedVc.proof.created;\n          const body = createRequestBody({vc: noProofCreatedVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "Uyk6JwVHU3SoEbycQ9XnY",
              "ctx": null,
              "_testId": "urn:uuid:8c903d58-d360-43a1-8d04-fd0bb33aa412",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "MUST not verify if \"proof.created\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28655,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 90,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.created\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofCreatedVc = klona(validVc);\n          delete noProofCreatedVc.proof.created;\n          const body = createRequestBody({vc: noProofCreatedVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "5oEvMqGzI6CDXT8zSgOUa",
              "ctx": null,
              "_testId": "urn:uuid:e45f1df5-0b44-4af0-a6c6-f7085876cf4d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "MUST not verify if \"proof.created\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33426,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 37,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.created\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofCreatedVc = klona(validVc);\n          delete noProofCreatedVc.proof.created;\n          const body = createRequestBody({vc: noProofCreatedVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "hvOfNszx7L1coXhRnj02P",
              "ctx": null,
              "_testId": "urn:uuid:8bf0bd14-b614-4c44-9f4e-14a377c95355",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Mavennet",
                "rowId": "MUST not verify if \"proof.created\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 35945,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 36,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.created\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofCreatedVc = klona(validVc);\n          delete noProofCreatedVc.proof.created;\n          const body = createRequestBody({vc: noProofCreatedVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "9ovA8b3BrvylUkiZe-TQ_",
              "ctx": null,
              "_testId": "urn:uuid:48fea509-f039-4d56-90f2-8dfe503bd7eb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SecureKey",
                "rowId": "MUST not verify if \"proof.created\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 38396,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 50,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an HTTP error response code: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an HTTP error response code: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:14:10)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:132:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.created\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofCreatedVc = klona(validVc);\n          delete noProofCreatedVc.proof.created;\n          const body = createRequestBody({vc: noProofCreatedVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "iXtIgDC8QnsTbVosWjgVz",
              "ctx": null,
              "_testId": "urn:uuid:d2bc86be-06f0-425d-972b-d6bbfbc0f974",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"proof.created\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 39516,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 24,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.created\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofCreatedVc = klona(validVc);\n          delete noProofCreatedVc.proof.created;\n          const body = createRequestBody({vc: noProofCreatedVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "Im6QJlfV-rG_X8zTlpEuB",
              "ctx": null,
              "_testId": "urn:uuid:428a8ede-4fd3-41cd-a618-3eb2e1506791",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "MUST not verify if \"proof.created\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 42894,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 30,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "MUST not verify if \"proof.verificationMethod\" property is missing.",
          "cells": [
            {
              "type": "test",
              "title": "MUST not verify if \"proof.verificationMethod\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofVerificationMethodVc = klona(validVc);\n          delete noProofVerificationMethodVc.proof.verificationMethod;\n          const body = createRequestBody({vc: noProofVerificationMethodVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "AOe_-HGloPsHAhdLr6f_o",
              "ctx": null,
              "_testId": "urn:uuid:146e03d4-0242-4c65-9ee7-f17bbbc86f75",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "ACA-py",
                "rowId": "MUST not verify if \"proof.verificationMethod\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 712,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 25,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.verificationMethod\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofVerificationMethodVc = klona(validVc);\n          delete noProofVerificationMethodVc.proof.verificationMethod;\n          const body = createRequestBody({vc: noProofVerificationMethodVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "mAx_PESTu4vobhbslrz9-",
              "ctx": null,
              "_testId": "urn:uuid:45748f81-a550-42a2-bb5e-4d494e0039cf",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "MUST not verify if \"proof.verificationMethod\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5193,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 47,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.verificationMethod\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofVerificationMethodVc = klona(validVc);\n          delete noProofVerificationMethodVc.proof.verificationMethod;\n          const body = createRequestBody({vc: noProofVerificationMethodVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "_UkIhtjzW3MWxNhOVRP61",
              "ctx": null,
              "_testId": "urn:uuid:c02712f7-4f63-4571-95a1-8df12fb42e95",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST not verify if \"proof.verificationMethod\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10926,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 680,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.verificationMethod\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofVerificationMethodVc = klona(validVc);\n          delete noProofVerificationMethodVc.proof.verificationMethod;\n          const body = createRequestBody({vc: noProofVerificationMethodVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "_dPXADbOS22P5WN0MjTy7",
              "ctx": null,
              "_testId": "urn:uuid:6e86348e-95e1-4133-8de4-6b32beb5feea",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST not verify if \"proof.verificationMethod\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26093,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 36,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected status code 400 or 422.: expected 403 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 403,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Expected status code 400 or 422.: expected 403 to be one of [ 400, 422 ]\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:15:26)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:144:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.verificationMethod\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofVerificationMethodVc = klona(validVc);\n          delete noProofVerificationMethodVc.proof.verificationMethod;\n          const body = createRequestBody({vc: noProofVerificationMethodVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "Uyk6JwVHU3SoEbycQ9XnY",
              "ctx": null,
              "_testId": "urn:uuid:f025ef8b-c376-4ff5-991b-c365f5331fa4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "MUST not verify if \"proof.verificationMethod\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28745,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 92,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.verificationMethod\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofVerificationMethodVc = klona(validVc);\n          delete noProofVerificationMethodVc.proof.verificationMethod;\n          const body = createRequestBody({vc: noProofVerificationMethodVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "5oEvMqGzI6CDXT8zSgOUa",
              "ctx": null,
              "_testId": "urn:uuid:6ec5b905-9f57-45dc-a646-4cdbc8d7a0a2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "MUST not verify if \"proof.verificationMethod\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33463,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 51,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.verificationMethod\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofVerificationMethodVc = klona(validVc);\n          delete noProofVerificationMethodVc.proof.verificationMethod;\n          const body = createRequestBody({vc: noProofVerificationMethodVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "hvOfNszx7L1coXhRnj02P",
              "ctx": null,
              "_testId": "urn:uuid:f1346b8a-3844-4af2-8451-248d1f3416b4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Mavennet",
                "rowId": "MUST not verify if \"proof.verificationMethod\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 35982,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 43,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.verificationMethod\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofVerificationMethodVc = klona(validVc);\n          delete noProofVerificationMethodVc.proof.verificationMethod;\n          const body = createRequestBody({vc: noProofVerificationMethodVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "9ovA8b3BrvylUkiZe-TQ_",
              "ctx": null,
              "_testId": "urn:uuid:b31cfe01-1f7e-4b70-8278-0d434c819a42",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SecureKey",
                "rowId": "MUST not verify if \"proof.verificationMethod\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 38447,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 111,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an HTTP error response code: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an HTTP error response code: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:14:10)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:144:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.verificationMethod\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofVerificationMethodVc = klona(validVc);\n          delete noProofVerificationMethodVc.proof.verificationMethod;\n          const body = createRequestBody({vc: noProofVerificationMethodVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "iXtIgDC8QnsTbVosWjgVz",
              "ctx": null,
              "_testId": "urn:uuid:2772f962-331b-43b4-9042-6d898e640cd4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"proof.verificationMethod\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 39541,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 19,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.verificationMethod\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofVerificationMethodVc = klona(validVc);\n          delete noProofVerificationMethodVc.proof.verificationMethod;\n          const body = createRequestBody({vc: noProofVerificationMethodVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "Im6QJlfV-rG_X8zTlpEuB",
              "ctx": null,
              "_testId": "urn:uuid:a15f15c2-23e9-4d04-b3fc-b21cb911019f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "MUST not verify if \"proof.verificationMethod\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 42925,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 21,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "MUST not verify if \"proof.proofValue\" property is missing.",
          "cells": [
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofValue\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofValueVc = klona(validVc);\n          delete noProofValueVc.proof.proofValue;\n          const body = createRequestBody({vc: noProofValueVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "AOe_-HGloPsHAhdLr6f_o",
              "ctx": null,
              "_testId": "urn:uuid:acd901b0-2299-4030-b8ef-8900c4418611",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "ACA-py",
                "rowId": "MUST not verify if \"proof.proofValue\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 737,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 25,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofValue\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofValueVc = klona(validVc);\n          delete noProofValueVc.proof.proofValue;\n          const body = createRequestBody({vc: noProofValueVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "mAx_PESTu4vobhbslrz9-",
              "ctx": null,
              "_testId": "urn:uuid:7f01af97-1455-4d21-be14-2ac3c2ff2e9d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "MUST not verify if \"proof.proofValue\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5241,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 45,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofValue\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofValueVc = klona(validVc);\n          delete noProofValueVc.proof.proofValue;\n          const body = createRequestBody({vc: noProofValueVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "_UkIhtjzW3MWxNhOVRP61",
              "ctx": null,
              "_testId": "urn:uuid:21b0e98b-206a-4d3e-b111-1191c0b29ba6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST not verify if \"proof.proofValue\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11606,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 397,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofValue\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofValueVc = klona(validVc);\n          delete noProofValueVc.proof.proofValue;\n          const body = createRequestBody({vc: noProofValueVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "_dPXADbOS22P5WN0MjTy7",
              "ctx": null,
              "_testId": "urn:uuid:097f6bd8-b39c-499f-8bb5-404fceb15fc1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST not verify if \"proof.proofValue\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26129,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 36,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected status code 400 or 422.: expected 403 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 403,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Expected status code 400 or 422.: expected 403 to be one of [ 400, 422 ]\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:15:26)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:156:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofValue\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofValueVc = klona(validVc);\n          delete noProofValueVc.proof.proofValue;\n          const body = createRequestBody({vc: noProofValueVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "Uyk6JwVHU3SoEbycQ9XnY",
              "ctx": null,
              "_testId": "urn:uuid:744565fd-8ddd-4871-8fea-5d38fd069ce0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "MUST not verify if \"proof.proofValue\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28837,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 92,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofValue\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofValueVc = klona(validVc);\n          delete noProofValueVc.proof.proofValue;\n          const body = createRequestBody({vc: noProofValueVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "5oEvMqGzI6CDXT8zSgOUa",
              "ctx": null,
              "_testId": "urn:uuid:6af805b4-9290-448e-bf12-98dec9d7c5e6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "MUST not verify if \"proof.proofValue\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33514,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 48,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofValue\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofValueVc = klona(validVc);\n          delete noProofValueVc.proof.proofValue;\n          const body = createRequestBody({vc: noProofValueVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "hvOfNszx7L1coXhRnj02P",
              "ctx": null,
              "_testId": "urn:uuid:73888d83-223a-4ddb-b947-2679e3a51f7c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Mavennet",
                "rowId": "MUST not verify if \"proof.proofValue\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36025,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 37,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofValue\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofValueVc = klona(validVc);\n          delete noProofValueVc.proof.proofValue;\n          const body = createRequestBody({vc: noProofValueVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "9ovA8b3BrvylUkiZe-TQ_",
              "ctx": null,
              "_testId": "urn:uuid:4e146a25-0b2b-4671-a5c4-b7fae6a56fbe",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SecureKey",
                "rowId": "MUST not verify if \"proof.proofValue\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 38558,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 62,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an HTTP error response code: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an HTTP error response code: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:14:10)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:156:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofValue\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofValueVc = klona(validVc);\n          delete noProofValueVc.proof.proofValue;\n          const body = createRequestBody({vc: noProofValueVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "iXtIgDC8QnsTbVosWjgVz",
              "ctx": null,
              "_testId": "urn:uuid:34d8e568-2a75-4f14-8a91-85fab50374a3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"proof.proofValue\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 39561,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 18,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofValue\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofValueVc = klona(validVc);\n          delete noProofValueVc.proof.proofValue;\n          const body = createRequestBody({vc: noProofValueVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "Im6QJlfV-rG_X8zTlpEuB",
              "ctx": null,
              "_testId": "urn:uuid:df80f6c2-c638-4cfe-8aa4-6f92249d9cb0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "MUST not verify if \"proof.proofValue\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 42946,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 26,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "MUST not verify if \"proof.proofPurpose\" property is missing.",
          "cells": [
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofPurpose\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofPurposeVc = klona(validVc);\n          delete noProofPurposeVc.proof.proofPurpose;\n          const body = createRequestBody({vc: noProofPurposeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "AOe_-HGloPsHAhdLr6f_o",
              "ctx": null,
              "_testId": "urn:uuid:5806ed8e-421c-4412-8d59-fa0b111d464d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "ACA-py",
                "rowId": "MUST not verify if \"proof.proofPurpose\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 763,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 27,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofPurpose\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofPurposeVc = klona(validVc);\n          delete noProofPurposeVc.proof.proofPurpose;\n          const body = createRequestBody({vc: noProofPurposeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "mAx_PESTu4vobhbslrz9-",
              "ctx": null,
              "_testId": "urn:uuid:6f5f1328-be1b-4d53-9a23-0d42ad7a46a7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "MUST not verify if \"proof.proofPurpose\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5286,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 49,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofPurpose\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofPurposeVc = klona(validVc);\n          delete noProofPurposeVc.proof.proofPurpose;\n          const body = createRequestBody({vc: noProofPurposeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "_UkIhtjzW3MWxNhOVRP61",
              "ctx": null,
              "_testId": "urn:uuid:2b90dbcd-3592-4cfa-8fad-081da1a6049c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST not verify if \"proof.proofPurpose\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 12003,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 405,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofPurpose\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofPurposeVc = klona(validVc);\n          delete noProofPurposeVc.proof.proofPurpose;\n          const body = createRequestBody({vc: noProofPurposeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "_dPXADbOS22P5WN0MjTy7",
              "ctx": null,
              "_testId": "urn:uuid:bdad315d-7258-42a2-8f0f-a16f798d3b1a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST not verify if \"proof.proofPurpose\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26165,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 38,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected status code 400 or 422.: expected 403 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 403,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Expected status code 400 or 422.: expected 403 to be one of [ 400, 422 ]\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:15:26)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:168:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofPurpose\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofPurposeVc = klona(validVc);\n          delete noProofPurposeVc.proof.proofPurpose;\n          const body = createRequestBody({vc: noProofPurposeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "Uyk6JwVHU3SoEbycQ9XnY",
              "ctx": null,
              "_testId": "urn:uuid:1f22f07a-ef73-4bc1-aaf4-207092537e55",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "MUST not verify if \"proof.proofPurpose\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28929,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 90,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofPurpose\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofPurposeVc = klona(validVc);\n          delete noProofPurposeVc.proof.proofPurpose;\n          const body = createRequestBody({vc: noProofPurposeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "5oEvMqGzI6CDXT8zSgOUa",
              "ctx": null,
              "_testId": "urn:uuid:93211f70-d478-4d26-8bf5-69d67dbbb512",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "MUST not verify if \"proof.proofPurpose\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33562,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 48,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofPurpose\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofPurposeVc = klona(validVc);\n          delete noProofPurposeVc.proof.proofPurpose;\n          const body = createRequestBody({vc: noProofPurposeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "hvOfNszx7L1coXhRnj02P",
              "ctx": null,
              "_testId": "urn:uuid:20ab890e-d7b6-4934-9e75-3512939808a4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Mavennet",
                "rowId": "MUST not verify if \"proof.proofPurpose\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36063,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 34,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofPurpose\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofPurposeVc = klona(validVc);\n          delete noProofPurposeVc.proof.proofPurpose;\n          const body = createRequestBody({vc: noProofPurposeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "9ovA8b3BrvylUkiZe-TQ_",
              "ctx": null,
              "_testId": "urn:uuid:e57fd342-1926-4bed-a30c-536b7e907ba3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SecureKey",
                "rowId": "MUST not verify if \"proof.proofPurpose\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 38621,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 70,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an HTTP error response code: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an HTTP error response code: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:14:10)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:168:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofPurpose\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofPurposeVc = klona(validVc);\n          delete noProofPurposeVc.proof.proofPurpose;\n          const body = createRequestBody({vc: noProofPurposeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "iXtIgDC8QnsTbVosWjgVz",
              "ctx": null,
              "_testId": "urn:uuid:a3bcffd8-2d9b-432c-8d09-0561fdb70c3f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"proof.proofPurpose\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 39579,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 21,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofPurpose\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofPurposeVc = klona(validVc);\n          delete noProofPurposeVc.proof.proofPurpose;\n          const body = createRequestBody({vc: noProofPurposeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "Im6QJlfV-rG_X8zTlpEuB",
              "ctx": null,
              "_testId": "urn:uuid:782310b5-b019-4322-a2dc-565702f624f2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "MUST not verify if \"proof.proofPurpose\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 42972,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 16,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "MUST not verify if \"@context\" is not an array.",
          "cells": [
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidContextTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidContextType of invalidContextTypes) {\n          copyVc['@context'] = invalidContextType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "AOe_-HGloPsHAhdLr6f_o",
              "ctx": null,
              "_testId": "urn:uuid:f732d37d-04dc-4de9-ac44-f9e66e8c63ce",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "ACA-py",
                "rowId": "MUST not verify if \"@context\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 790,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 235,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidContextTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidContextType of invalidContextTypes) {\n          copyVc['@context'] = invalidContextType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "mAx_PESTu4vobhbslrz9-",
              "ctx": null,
              "_testId": "urn:uuid:c3d1d7d5-7c95-4762-ba18-3169c124f56c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "MUST not verify if \"@context\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5336,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 295,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidContextTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidContextType of invalidContextTypes) {\n          copyVc['@context'] = invalidContextType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "_UkIhtjzW3MWxNhOVRP61",
              "ctx": null,
              "_testId": "urn:uuid:7319d25c-49c4-4194-bdeb-60f24defbac5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST not verify if \"@context\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 12408,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1132,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidContextTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidContextType of invalidContextTypes) {\n          copyVc['@context'] = invalidContextType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "_dPXADbOS22P5WN0MjTy7",
              "ctx": null,
              "_testId": "urn:uuid:cbbd4707-0e07-45d6-977d-69d4329827dc",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST not verify if \"@context\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26203,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 230,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidContextTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidContextType of invalidContextTypes) {\n          copyVc['@context'] = invalidContextType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "Uyk6JwVHU3SoEbycQ9XnY",
              "ctx": null,
              "_testId": "urn:uuid:cfd1c97c-aac9-4403-b45b-29de81f547e8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "MUST not verify if \"@context\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29020,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 817,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidContextTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidContextType of invalidContextTypes) {\n          copyVc['@context'] = invalidContextType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "5oEvMqGzI6CDXT8zSgOUa",
              "ctx": null,
              "_testId": "urn:uuid:84794480-3d9c-4db5-9918-fd4448dc129f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "MUST not verify if \"@context\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33610,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 318,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidContextTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidContextType of invalidContextTypes) {\n          copyVc['@context'] = invalidContextType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "hvOfNszx7L1coXhRnj02P",
              "ctx": null,
              "_testId": "urn:uuid:1fbbd5ae-c7d3-4541-835b-aec9d4229d71",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Mavennet",
                "rowId": "MUST not verify if \"@context\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36097,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 217,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidContextTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidContextType of invalidContextTypes) {\n          copyVc['@context'] = invalidContextType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "9ovA8b3BrvylUkiZe-TQ_",
              "ctx": null,
              "_testId": "urn:uuid:34480996-6b9e-42a2-ac05-eb0075c5d7a1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SecureKey",
                "rowId": "MUST not verify if \"@context\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 38692,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 58,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an HTTP error response code: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an HTTP error response code: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:14:10)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:181:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidContextTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidContextType of invalidContextTypes) {\n          copyVc['@context'] = invalidContextType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "iXtIgDC8QnsTbVosWjgVz",
              "ctx": null,
              "_testId": "urn:uuid:fa935fab-749d-4c4c-aa43-2bd89ca4acfd",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"@context\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 39600,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 180,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidContextTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidContextType of invalidContextTypes) {\n          copyVc['@context'] = invalidContextType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "Im6QJlfV-rG_X8zTlpEuB",
              "ctx": null,
              "_testId": "urn:uuid:02eb886d-ea12-4b07-b7c7-9384a280d448",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "MUST not verify if \"@context\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 42988,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 228,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "MUST not verify if \"@context\" items are not strings.",
          "cells": [
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" items are not strings.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidContextItemTypes = [[], {}, null, undefined, 10, true];\n          for(const invalidContextItemType of invalidContextItemTypes) {\n            copyVc['@context'] = [invalidContextItemType];\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "AOe_-HGloPsHAhdLr6f_o",
              "ctx": null,
              "_testId": "urn:uuid:bfd0c455-2a97-4992-8891-f62c26f790cb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "ACA-py",
                "rowId": "MUST not verify if \"@context\" items are not strings."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1025,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 55,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected status code 400 or 422.: expected 500 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 500,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Expected status code 400 or 422.: expected 500 to be one of [ 400, 422 ]\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:15:26)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:196:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" items are not strings.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidContextItemTypes = [[], {}, null, undefined, 10, true];\n          for(const invalidContextItemType of invalidContextItemTypes) {\n            copyVc['@context'] = [invalidContextItemType];\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "mAx_PESTu4vobhbslrz9-",
              "ctx": null,
              "_testId": "urn:uuid:13cc9a2e-8ff6-4ab4-8a14-2583da44cc22",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "MUST not verify if \"@context\" items are not strings."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5631,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 257,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" items are not strings.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidContextItemTypes = [[], {}, null, undefined, 10, true];\n          for(const invalidContextItemType of invalidContextItemTypes) {\n            copyVc['@context'] = [invalidContextItemType];\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "_UkIhtjzW3MWxNhOVRP61",
              "ctx": null,
              "_testId": "urn:uuid:2f21e6de-840e-4be6-800b-ac956efd713b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST not verify if \"@context\" items are not strings."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13540,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 655,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" items are not strings.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidContextItemTypes = [[], {}, null, undefined, 10, true];\n          for(const invalidContextItemType of invalidContextItemTypes) {\n            copyVc['@context'] = [invalidContextItemType];\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "_dPXADbOS22P5WN0MjTy7",
              "ctx": null,
              "_testId": "urn:uuid:eada148a-404c-4d91-8e82-e4e9c6b1e725",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST not verify if \"@context\" items are not strings."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26433,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 199,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" items are not strings.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidContextItemTypes = [[], {}, null, undefined, 10, true];\n          for(const invalidContextItemType of invalidContextItemTypes) {\n            copyVc['@context'] = [invalidContextItemType];\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "Uyk6JwVHU3SoEbycQ9XnY",
              "ctx": null,
              "_testId": "urn:uuid:6b6766d8-aa4f-417c-b870-17d2361c9221",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "MUST not verify if \"@context\" items are not strings."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29837,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 553,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" items are not strings.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidContextItemTypes = [[], {}, null, undefined, 10, true];\n          for(const invalidContextItemType of invalidContextItemTypes) {\n            copyVc['@context'] = [invalidContextItemType];\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "5oEvMqGzI6CDXT8zSgOUa",
              "ctx": null,
              "_testId": "urn:uuid:69ebbe84-f5f0-4ee0-9e84-80c72091cd6d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "MUST not verify if \"@context\" items are not strings."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33928,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 281,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" items are not strings.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidContextItemTypes = [[], {}, null, undefined, 10, true];\n          for(const invalidContextItemType of invalidContextItemTypes) {\n            copyVc['@context'] = [invalidContextItemType];\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "hvOfNszx7L1coXhRnj02P",
              "ctx": null,
              "_testId": "urn:uuid:ff2418ab-64c3-42cf-bc61-78af1bb20765",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Mavennet",
                "rowId": "MUST not verify if \"@context\" items are not strings."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36313,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 252,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" items are not strings.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidContextItemTypes = [[], {}, null, undefined, 10, true];\n          for(const invalidContextItemType of invalidContextItemTypes) {\n            copyVc['@context'] = [invalidContextItemType];\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "9ovA8b3BrvylUkiZe-TQ_",
              "ctx": null,
              "_testId": "urn:uuid:52c767e3-c28b-4dcd-95e4-cef03ba64c86",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SecureKey",
                "rowId": "MUST not verify if \"@context\" items are not strings."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 38749,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 13,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an HTTP error response code: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an HTTP error response code: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:14:10)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:196:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" items are not strings.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidContextItemTypes = [[], {}, null, undefined, 10, true];\n          for(const invalidContextItemType of invalidContextItemTypes) {\n            copyVc['@context'] = [invalidContextItemType];\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "iXtIgDC8QnsTbVosWjgVz",
              "ctx": null,
              "_testId": "urn:uuid:76d332c6-83e0-4c82-9046-69975c01492f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"@context\" items are not strings."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 39780,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 147,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" items are not strings.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidContextItemTypes = [[], {}, null, undefined, 10, true];\n          for(const invalidContextItemType of invalidContextItemTypes) {\n            copyVc['@context'] = [invalidContextItemType];\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "Im6QJlfV-rG_X8zTlpEuB",
              "ctx": null,
              "_testId": "urn:uuid:7f6e957a-5915-46d2-bf4c-3fab79076779",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "MUST not verify if \"@context\" items are not strings."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 43217,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 187,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "MUST not verify if \"type\" is not an array.",
          "cells": [
            {
              "type": "test",
              "title": "MUST not verify if \"type\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidType of invalidTypes) {\n          copyVc.type = invalidType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "AOe_-HGloPsHAhdLr6f_o",
              "ctx": null,
              "_testId": "urn:uuid:820f0337-1772-4e81-9d54-d9a5bdc314cd",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "ACA-py",
                "rowId": "MUST not verify if \"type\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1081,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 162,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidType of invalidTypes) {\n          copyVc.type = invalidType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "mAx_PESTu4vobhbslrz9-",
              "ctx": null,
              "_testId": "urn:uuid:02adc570-ea9a-40ce-82b3-9a403de1f91d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "MUST not verify if \"type\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5889,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 271,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidType of invalidTypes) {\n          copyVc.type = invalidType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "_UkIhtjzW3MWxNhOVRP61",
              "ctx": null,
              "_testId": "urn:uuid:1a0ef892-f494-41dd-bfd7-6715424c0e2f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST not verify if \"type\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14196,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2597,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidType of invalidTypes) {\n          copyVc.type = invalidType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "_dPXADbOS22P5WN0MjTy7",
              "ctx": null,
              "_testId": "urn:uuid:30a26d3c-8b3b-492a-9d68-265d64ed0eb2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST not verify if \"type\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26633,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 253,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidType of invalidTypes) {\n          copyVc.type = invalidType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "Uyk6JwVHU3SoEbycQ9XnY",
              "ctx": null,
              "_testId": "urn:uuid:98a77d21-04b5-4b5b-80bf-949620d86305",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "MUST not verify if \"type\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30391,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 564,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidType of invalidTypes) {\n          copyVc.type = invalidType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "5oEvMqGzI6CDXT8zSgOUa",
              "ctx": null,
              "_testId": "urn:uuid:0f402955-a679-48c6-8a67-11ffb29d91a3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "MUST not verify if \"type\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 34209,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 263,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidType of invalidTypes) {\n          copyVc.type = invalidType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "hvOfNszx7L1coXhRnj02P",
              "ctx": null,
              "_testId": "urn:uuid:7dcda74a-3457-4256-b4ce-05a5377d5b65",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Mavennet",
                "rowId": "MUST not verify if \"type\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36566,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 417,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidType of invalidTypes) {\n          copyVc.type = invalidType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "9ovA8b3BrvylUkiZe-TQ_",
              "ctx": null,
              "_testId": "urn:uuid:7b7767de-e348-48cd-8b2e-e56b8acfecb6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SecureKey",
                "rowId": "MUST not verify if \"type\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 38763,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 122,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an HTTP error response code: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an HTTP error response code: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:14:10)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:210:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidType of invalidTypes) {\n          copyVc.type = invalidType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "iXtIgDC8QnsTbVosWjgVz",
              "ctx": null,
              "_testId": "urn:uuid:a3038e50-531e-4ef8-b967-06a537ef8053",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"type\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 39926,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 141,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidType of invalidTypes) {\n          copyVc.type = invalidType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "Im6QJlfV-rG_X8zTlpEuB",
              "ctx": null,
              "_testId": "urn:uuid:1f02eede-7501-4bcb-8e40-ebfa1ba7d5c3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "MUST not verify if \"type\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 43404,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 219,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "MUST not verify if \"type\" items are not strings.",
          "cells": [
            {
              "type": "test",
              "title": "MUST not verify if \"type\" items are not strings.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypeItemTypes = [[], {}, null, undefined, 10, true];\n        for(const invalidItemType of invalidTypeItemTypes) {\n          copyVc.type = [invalidItemType];\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "AOe_-HGloPsHAhdLr6f_o",
              "ctx": null,
              "_testId": "urn:uuid:3670ce44-0e7a-4b56-bb4f-276308f8240e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "ACA-py",
                "rowId": "MUST not verify if \"type\" items are not strings."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1242,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 155,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" items are not strings.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypeItemTypes = [[], {}, null, undefined, 10, true];\n        for(const invalidItemType of invalidTypeItemTypes) {\n          copyVc.type = [invalidItemType];\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "mAx_PESTu4vobhbslrz9-",
              "ctx": null,
              "_testId": "urn:uuid:90db6ee8-e52c-48cd-8542-09750982415c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "MUST not verify if \"type\" items are not strings."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6160,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 252,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" items are not strings.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypeItemTypes = [[], {}, null, undefined, 10, true];\n        for(const invalidItemType of invalidTypeItemTypes) {\n          copyVc.type = [invalidItemType];\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "_UkIhtjzW3MWxNhOVRP61",
              "ctx": null,
              "_testId": "urn:uuid:c0a31a73-2df4-4e6d-8840-2fadd8c1e442",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST not verify if \"type\" items are not strings."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16793,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 3563,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" items are not strings.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypeItemTypes = [[], {}, null, undefined, 10, true];\n        for(const invalidItemType of invalidTypeItemTypes) {\n          copyVc.type = [invalidItemType];\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "_dPXADbOS22P5WN0MjTy7",
              "ctx": null,
              "_testId": "urn:uuid:ec36ce8a-04b6-460f-8dc6-a6d28cd514fc",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST not verify if \"type\" items are not strings."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26886,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 199,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" items are not strings.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypeItemTypes = [[], {}, null, undefined, 10, true];\n        for(const invalidItemType of invalidTypeItemTypes) {\n          copyVc.type = [invalidItemType];\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "Uyk6JwVHU3SoEbycQ9XnY",
              "ctx": null,
              "_testId": "urn:uuid:f324d208-7a1f-413a-ab82-9c7ba2946ac1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "MUST not verify if \"type\" items are not strings."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30955,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 534,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" items are not strings.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypeItemTypes = [[], {}, null, undefined, 10, true];\n        for(const invalidItemType of invalidTypeItemTypes) {\n          copyVc.type = [invalidItemType];\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "5oEvMqGzI6CDXT8zSgOUa",
              "ctx": null,
              "_testId": "urn:uuid:c3ecdc2f-90c8-488d-b0e5-227df5e5ad3e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "MUST not verify if \"type\" items are not strings."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 34472,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 215,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" items are not strings.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypeItemTypes = [[], {}, null, undefined, 10, true];\n        for(const invalidItemType of invalidTypeItemTypes) {\n          copyVc.type = [invalidItemType];\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "hvOfNszx7L1coXhRnj02P",
              "ctx": null,
              "_testId": "urn:uuid:5cfdf853-e4e5-4783-a065-36c8e296523e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Mavennet",
                "rowId": "MUST not verify if \"type\" items are not strings."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36983,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 215,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" items are not strings.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypeItemTypes = [[], {}, null, undefined, 10, true];\n        for(const invalidItemType of invalidTypeItemTypes) {\n          copyVc.type = [invalidItemType];\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "9ovA8b3BrvylUkiZe-TQ_",
              "ctx": null,
              "_testId": "urn:uuid:84ded3f1-3ce6-4827-b34e-8b4fc2fce7b4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SecureKey",
                "rowId": "MUST not verify if \"type\" items are not strings."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 38885,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 71,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an HTTP error response code: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an HTTP error response code: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:14:10)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:224:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" items are not strings.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypeItemTypes = [[], {}, null, undefined, 10, true];\n        for(const invalidItemType of invalidTypeItemTypes) {\n          copyVc.type = [invalidItemType];\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "iXtIgDC8QnsTbVosWjgVz",
              "ctx": null,
              "_testId": "urn:uuid:007e3a03-46c0-4fb7-95e6-51f1f8cbe94c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"type\" items are not strings."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 40067,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 136,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" items are not strings.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypeItemTypes = [[], {}, null, undefined, 10, true];\n        for(const invalidItemType of invalidTypeItemTypes) {\n          copyVc.type = [invalidItemType];\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "Im6QJlfV-rG_X8zTlpEuB",
              "ctx": null,
              "_testId": "urn:uuid:8639f556-3f02-4767-986f-9ab7459c08f4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "MUST not verify if \"type\" items are not strings."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 43622,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 157,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "MUST not verify if \"issuer\" is not an object or a string.",
          "cells": [
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" is not an object or a string.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidIssuerTypes = [[], null, undefined, 10, true];\n          for(const invalidIssuerType of invalidIssuerTypes) {\n            copyVc.issuer = invalidIssuerType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "AOe_-HGloPsHAhdLr6f_o",
              "ctx": null,
              "_testId": "urn:uuid:69252770-d165-49d1-84ad-cd3388a81862",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "ACA-py",
                "rowId": "MUST not verify if \"issuer\" is not an object or a string."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1398,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 126,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" is not an object or a string.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidIssuerTypes = [[], null, undefined, 10, true];\n          for(const invalidIssuerType of invalidIssuerTypes) {\n            copyVc.issuer = invalidIssuerType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "mAx_PESTu4vobhbslrz9-",
              "ctx": null,
              "_testId": "urn:uuid:cb547a6d-9635-4eb9-8f24-84aabfbf9651",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "MUST not verify if \"issuer\" is not an object or a string."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6412,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 223,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" is not an object or a string.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidIssuerTypes = [[], null, undefined, 10, true];\n          for(const invalidIssuerType of invalidIssuerTypes) {\n            copyVc.issuer = invalidIssuerType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "_UkIhtjzW3MWxNhOVRP61",
              "ctx": null,
              "_testId": "urn:uuid:b0d353d9-a915-4024-9198-ec2738ca9254",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST not verify if \"issuer\" is not an object or a string."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20356,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2070,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" is not an object or a string.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidIssuerTypes = [[], null, undefined, 10, true];\n          for(const invalidIssuerType of invalidIssuerTypes) {\n            copyVc.issuer = invalidIssuerType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "_dPXADbOS22P5WN0MjTy7",
              "ctx": null,
              "_testId": "urn:uuid:05ce44c6-ed8f-450e-a2cb-420231f6ef01",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST not verify if \"issuer\" is not an object or a string."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27084,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 165,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" is not an object or a string.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidIssuerTypes = [[], null, undefined, 10, true];\n          for(const invalidIssuerType of invalidIssuerTypes) {\n            copyVc.issuer = invalidIssuerType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "Uyk6JwVHU3SoEbycQ9XnY",
              "ctx": null,
              "_testId": "urn:uuid:631ee1df-137f-4119-9e0a-3fb935bc7ba5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "MUST not verify if \"issuer\" is not an object or a string."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31489,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 445,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" is not an object or a string.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidIssuerTypes = [[], null, undefined, 10, true];\n          for(const invalidIssuerType of invalidIssuerTypes) {\n            copyVc.issuer = invalidIssuerType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "5oEvMqGzI6CDXT8zSgOUa",
              "ctx": null,
              "_testId": "urn:uuid:252bb28b-d3c2-4c6f-a588-8c29d4342b93",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "MUST not verify if \"issuer\" is not an object or a string."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 34687,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 154,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" is not an object or a string.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidIssuerTypes = [[], null, undefined, 10, true];\n          for(const invalidIssuerType of invalidIssuerTypes) {\n            copyVc.issuer = invalidIssuerType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "hvOfNszx7L1coXhRnj02P",
              "ctx": null,
              "_testId": "urn:uuid:9f7f220f-37ef-4270-96cd-652356ce3cc8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Mavennet",
                "rowId": "MUST not verify if \"issuer\" is not an object or a string."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 37198,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 186,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" is not an object or a string.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidIssuerTypes = [[], null, undefined, 10, true];\n          for(const invalidIssuerType of invalidIssuerTypes) {\n            copyVc.issuer = invalidIssuerType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "9ovA8b3BrvylUkiZe-TQ_",
              "ctx": null,
              "_testId": "urn:uuid:9e8a2a45-1d3a-4235-9f56-f703864695b8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SecureKey",
                "rowId": "MUST not verify if \"issuer\" is not an object or a string."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 38956,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 153,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an HTTP error response code: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an HTTP error response code: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:14:10)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:239:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" is not an object or a string.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidIssuerTypes = [[], null, undefined, 10, true];\n          for(const invalidIssuerType of invalidIssuerTypes) {\n            copyVc.issuer = invalidIssuerType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "iXtIgDC8QnsTbVosWjgVz",
              "ctx": null,
              "_testId": "urn:uuid:2f34b1f8-f2c7-48d1-98bc-a4af68153b5b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"issuer\" is not an object or a string."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 40204,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 113,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" is not an object or a string.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidIssuerTypes = [[], null, undefined, 10, true];\n          for(const invalidIssuerType of invalidIssuerTypes) {\n            copyVc.issuer = invalidIssuerType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "Im6QJlfV-rG_X8zTlpEuB",
              "ctx": null,
              "_testId": "urn:uuid:04a544fd-0027-4bed-8a1f-bd1d958f671f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "MUST not verify if \"issuer\" is not an object or a string."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 43780,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 145,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "MUST not verify if \"credentialSubject\" is not an object.",
          "cells": [
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" is not an object.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidCredentialSubjectTypes = [\n            'string', null, undefined, 10, true, []\n          ];\n          for(const invalidType of invalidCredentialSubjectTypes) {\n            copyVc.credentialSubject = invalidType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "AOe_-HGloPsHAhdLr6f_o",
              "ctx": null,
              "_testId": "urn:uuid:93b8f7a8-8ba0-440d-95db-0963605b5ef7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "ACA-py",
                "rowId": "MUST not verify if \"credentialSubject\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1524,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 167,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" is not an object.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidCredentialSubjectTypes = [\n            'string', null, undefined, 10, true, []\n          ];\n          for(const invalidType of invalidCredentialSubjectTypes) {\n            copyVc.credentialSubject = invalidType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "mAx_PESTu4vobhbslrz9-",
              "ctx": null,
              "_testId": "urn:uuid:e476362d-7198-4408-8dc0-65e6329d8558",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "MUST not verify if \"credentialSubject\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6634,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 275,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" is not an object.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidCredentialSubjectTypes = [\n            'string', null, undefined, 10, true, []\n          ];\n          for(const invalidType of invalidCredentialSubjectTypes) {\n            copyVc.credentialSubject = invalidType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "_UkIhtjzW3MWxNhOVRP61",
              "ctx": null,
              "_testId": "urn:uuid:6ce34f66-fe60-4308-af72-e417cab9ab07",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST not verify if \"credentialSubject\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22427,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2411,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" is not an object.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidCredentialSubjectTypes = [\n            'string', null, undefined, 10, true, []\n          ];\n          for(const invalidType of invalidCredentialSubjectTypes) {\n            copyVc.credentialSubject = invalidType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "_dPXADbOS22P5WN0MjTy7",
              "ctx": null,
              "_testId": "urn:uuid:a209898d-f57b-470b-beac-b60766c8e937",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST not verify if \"credentialSubject\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27249,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 205,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" is not an object.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidCredentialSubjectTypes = [\n            'string', null, undefined, 10, true, []\n          ];\n          for(const invalidType of invalidCredentialSubjectTypes) {\n            copyVc.credentialSubject = invalidType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "Uyk6JwVHU3SoEbycQ9XnY",
              "ctx": null,
              "_testId": "urn:uuid:fcdf56ec-60c5-4f0b-a45c-f1b3df76eb68",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "MUST not verify if \"credentialSubject\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31934,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 537,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" is not an object.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidCredentialSubjectTypes = [\n            'string', null, undefined, 10, true, []\n          ];\n          for(const invalidType of invalidCredentialSubjectTypes) {\n            copyVc.credentialSubject = invalidType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "5oEvMqGzI6CDXT8zSgOUa",
              "ctx": null,
              "_testId": "urn:uuid:16de8279-dc4b-484f-9a63-ab1c24b26795",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "MUST not verify if \"credentialSubject\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 34841,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 209,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" is not an object.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidCredentialSubjectTypes = [\n            'string', null, undefined, 10, true, []\n          ];\n          for(const invalidType of invalidCredentialSubjectTypes) {\n            copyVc.credentialSubject = invalidType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "hvOfNszx7L1coXhRnj02P",
              "ctx": null,
              "_testId": "urn:uuid:ed6feb86-e01a-4c69-b99c-43ebb8fae410",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Mavennet",
                "rowId": "MUST not verify if \"credentialSubject\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 37384,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 206,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" is not an object.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidCredentialSubjectTypes = [\n            'string', null, undefined, 10, true, []\n          ];\n          for(const invalidType of invalidCredentialSubjectTypes) {\n            copyVc.credentialSubject = invalidType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "9ovA8b3BrvylUkiZe-TQ_",
              "ctx": null,
              "_testId": "urn:uuid:96ffbe75-db9e-4353-ab1b-d737ca0c9e0a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SecureKey",
                "rowId": "MUST not verify if \"credentialSubject\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 39109,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 121,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an HTTP error response code: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an HTTP error response code: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:14:10)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:256:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" is not an object.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidCredentialSubjectTypes = [\n            'string', null, undefined, 10, true, []\n          ];\n          for(const invalidType of invalidCredentialSubjectTypes) {\n            copyVc.credentialSubject = invalidType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "iXtIgDC8QnsTbVosWjgVz",
              "ctx": null,
              "_testId": "urn:uuid:dc3219e7-431d-4d41-85df-d4e855f11f2b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"credentialSubject\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 40317,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 153,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" is not an object.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidCredentialSubjectTypes = [\n            'string', null, undefined, 10, true, []\n          ];\n          for(const invalidType of invalidCredentialSubjectTypes) {\n            copyVc.credentialSubject = invalidType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "Im6QJlfV-rG_X8zTlpEuB",
              "ctx": null,
              "_testId": "urn:uuid:703c46cf-11c8-4485-aefb-18ee0e84670b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "MUST not verify if \"credentialSubject\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 43925,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 173,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "MUST not verify if \"proof\" is not an object.",
          "cells": [
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" is not an object.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidProofTypes = ['string', null, undefined, 10, true, []];\n        for(const invalidProofType of invalidProofTypes) {\n          copyVc.proof = invalidProofType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "AOe_-HGloPsHAhdLr6f_o",
              "ctx": null,
              "_testId": "urn:uuid:9bba478d-5211-4d18-8105-bca70da7bb01",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "ACA-py",
                "rowId": "MUST not verify if \"proof\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1691,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 81,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected status code 400 or 422.: expected 500 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 500,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Expected status code 400 or 422.: expected 500 to be one of [ 400, 422 ]\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:15:26)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:270:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" is not an object.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidProofTypes = ['string', null, undefined, 10, true, []];\n        for(const invalidProofType of invalidProofTypes) {\n          copyVc.proof = invalidProofType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "mAx_PESTu4vobhbslrz9-",
              "ctx": null,
              "_testId": "urn:uuid:b6d5a339-e6f0-4cf9-aa42-2814759968d0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "MUST not verify if \"proof\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6910,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 258,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" is not an object.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidProofTypes = ['string', null, undefined, 10, true, []];\n        for(const invalidProofType of invalidProofTypes) {\n          copyVc.proof = invalidProofType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "_UkIhtjzW3MWxNhOVRP61",
              "ctx": null,
              "_testId": "urn:uuid:bf68b866-b54e-465a-9848-6bc7202db864",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST not verify if \"proof\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 24838,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 767,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" is not an object.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidProofTypes = ['string', null, undefined, 10, true, []];\n        for(const invalidProofType of invalidProofTypes) {\n          copyVc.proof = invalidProofType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "_dPXADbOS22P5WN0MjTy7",
              "ctx": null,
              "_testId": "urn:uuid:08a0bc8b-7e90-4ab1-b54d-b5002c682fc4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST not verify if \"proof\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27455,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 102,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected status code 400 or 422.: expected 403 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 403,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Expected status code 400 or 422.: expected 403 to be one of [ 400, 422 ]\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:15:26)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:270:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" is not an object.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidProofTypes = ['string', null, undefined, 10, true, []];\n        for(const invalidProofType of invalidProofTypes) {\n          copyVc.proof = invalidProofType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "Uyk6JwVHU3SoEbycQ9XnY",
              "ctx": null,
              "_testId": "urn:uuid:7757e7b1-6c1d-4181-b713-81e4a001d5d7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "MUST not verify if \"proof\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32472,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 535,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" is not an object.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidProofTypes = ['string', null, undefined, 10, true, []];\n        for(const invalidProofType of invalidProofTypes) {\n          copyVc.proof = invalidProofType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "5oEvMqGzI6CDXT8zSgOUa",
              "ctx": null,
              "_testId": "urn:uuid:f076da68-fcac-4955-be03-ae550149c373",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "MUST not verify if \"proof\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 35051,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 247,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" is not an object.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidProofTypes = ['string', null, undefined, 10, true, []];\n        for(const invalidProofType of invalidProofTypes) {\n          copyVc.proof = invalidProofType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "hvOfNszx7L1coXhRnj02P",
              "ctx": null,
              "_testId": "urn:uuid:bcf8af7f-93ce-4e17-a573-7b10d9b7192f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Mavennet",
                "rowId": "MUST not verify if \"proof\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 37591,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 207,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" is not an object.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidProofTypes = ['string', null, undefined, 10, true, []];\n        for(const invalidProofType of invalidProofTypes) {\n          copyVc.proof = invalidProofType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "9ovA8b3BrvylUkiZe-TQ_",
              "ctx": null,
              "_testId": "urn:uuid:d7335267-6ff0-4a57-aac2-59dc9206d9ad",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SecureKey",
                "rowId": "MUST not verify if \"proof\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 39230,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 9,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected an HTTP error response code: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected an HTTP error response code: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:14:10)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js:270:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" is not an object.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidProofTypes = ['string', null, undefined, 10, true, []];\n        for(const invalidProofType of invalidProofTypes) {\n          copyVc.proof = invalidProofType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "iXtIgDC8QnsTbVosWjgVz",
              "ctx": null,
              "_testId": "urn:uuid:4ef1407d-6f73-43c5-b859-a708bac8725b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"proof\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 40471,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 115,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" is not an object.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidProofTypes = ['string', null, undefined, 10, true, []];\n        for(const invalidProofType of invalidProofTypes) {\n          copyVc.proof = invalidProofType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/10-vc-di.js",
              "parent": "Im6QJlfV-rG_X8zTlpEuB",
              "ctx": null,
              "_testId": "urn:uuid:19f4b73b-0077-44cd-aea5-0aaddafc1a3b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "MUST not verify if \"proof\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44097,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 96,
              "state": "passed",
              "speed": "slow"
            }
          ]
        }
      ]
    },
    {
      "title": "Verify Credential - JWT",
      "ctx": null,
      "suites": [
        {
          "title": "SpruceID",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC.",
              "body": "async function() {\n        // this tells the test report which cell in the interop matrix\n        // the result goes in\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({vc: validVc});\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error);\n        should.exist(result);\n        should.exist(result.status);\n        result.status.should.equal(200);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "lz5sANCqpX0BnTRgYhVCO",
              "ctx": null,
              "_testId": "urn:uuid:07f6b039-7ea0-4eea-8ca5-1f1d03b15991",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST verify a valid VC."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44231,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 34,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noContextVc = klona(validVc);\n          delete noContextVc['@context'];\n          const body = createRequestBody({vc: noContextVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "lz5sANCqpX0BnTRgYhVCO",
              "ctx": null,
              "_testId": "urn:uuid:793af90d-de16-45e5-8681-b0afbaa41fff",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"@context\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44264,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 51,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noTypeVc = klona(validVc);\n        delete noTypeVc.type;\n        const body = createRequestBody({vc: noTypeVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "lz5sANCqpX0BnTRgYhVCO",
              "ctx": null,
              "_testId": "urn:uuid:2de491ba-9027-49ed-a41d-250136698431",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44316,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 18,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noIssuerVc = klona(validVc);\n        delete noIssuerVc.issuer;\n        const body = createRequestBody({vc: noIssuerVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "lz5sANCqpX0BnTRgYhVCO",
              "ctx": null,
              "_testId": "urn:uuid:65f8bce1-cdbd-43cd-93f3-7c31e5d6225f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"issuer\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44334,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 21,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noCredentialSubjectVc = klona(validVc);\n          delete noCredentialSubjectVc.credentialSubject;\n          const body = createRequestBody({vc: noCredentialSubjectVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "lz5sANCqpX0BnTRgYhVCO",
              "ctx": null,
              "_testId": "urn:uuid:c90957fe-7417-4d3f-aee2-11eba5844159",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"credentialSubject\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44355,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 19,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noProofVc = klona(validVc);\n        delete noProofVc.proof;\n        const body = createRequestBody({vc: noProofVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "lz5sANCqpX0BnTRgYhVCO",
              "ctx": null,
              "_testId": "urn:uuid:c7056993-3d4a-435f-928b-f8c4c137a028",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"proof\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44374,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 33,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.type\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofTypeVc = klona(validVc);\n          delete noProofTypeVc.proof.type;\n          const body = createRequestBody({vc: noProofTypeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "lz5sANCqpX0BnTRgYhVCO",
              "ctx": null,
              "_testId": "urn:uuid:d1d1eddd-7669-4368-a110-8cb3234fd0b8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"proof.type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44407,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 21,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.created\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofCreatedVc = klona(validVc);\n          delete noProofCreatedVc.proof.created;\n          const body = createRequestBody({vc: noProofCreatedVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "lz5sANCqpX0BnTRgYhVCO",
              "ctx": null,
              "_testId": "urn:uuid:5ec04775-b5ff-4763-a61e-5814823e4e66",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"proof.created\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44432,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 37,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Wed, 27 Nov 2024 20:30:32 GMT', 'content-type': 'application/json', 'content-length': '46', connection: 'keep-alive', 'cf-cache-status': 'DYNAMIC', server: 'cloudflare', 'cf-ray': '8e94e06a2b980617-IAD', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Wed, 27 Nov 2024 20:30:32 GMT', 'content-type': 'application/json', 'content-length': '46', connection: 'keep-alive', 'cf-cache-status': 'DYNAMIC', server: 'cloudflare', 'cf-ray': '8e94e06a2b980617-IAD', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:12:14)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js:141:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.verificationMethod\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofVerificationMethodVc = klona(validVc);\n          delete noProofVerificationMethodVc.proof.verificationMethod;\n          const body = createRequestBody({vc: noProofVerificationMethodVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "lz5sANCqpX0BnTRgYhVCO",
              "ctx": null,
              "_testId": "urn:uuid:1d8833b1-bbdd-4174-b122-bdf8a53a4dd7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"proof.verificationMethod\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44470,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 18,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofValue\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofValueVc = klona(validVc);\n          delete noProofValueVc.proof.proofValue;\n          const body = createRequestBody({vc: noProofValueVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "lz5sANCqpX0BnTRgYhVCO",
              "ctx": null,
              "_testId": "urn:uuid:00663ecc-a339-4db1-9789-69db7c291716",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"proof.proofValue\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44488,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 18,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofPurpose\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofPurposeVc = klona(validVc);\n          delete noProofPurposeVc.proof.proofPurpose;\n          const body = createRequestBody({vc: noProofPurposeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "lz5sANCqpX0BnTRgYhVCO",
              "ctx": null,
              "_testId": "urn:uuid:06717499-a1fb-4d2e-8a56-ad3b47723ed8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"proof.proofPurpose\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44507,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 19,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidContextTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidContextType of invalidContextTypes) {\n          copyVc['@context'] = invalidContextType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "lz5sANCqpX0BnTRgYhVCO",
              "ctx": null,
              "_testId": "urn:uuid:671ffa47-0e98-45c0-bdeb-fad462fc0972",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"@context\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44526,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 151,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" items are not strings.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidContextItemTypes = [[], {}, null, undefined, 10, true];\n          for(const invalidContextItemType of invalidContextItemTypes) {\n            copyVc['@context'] = [invalidContextItemType];\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "lz5sANCqpX0BnTRgYhVCO",
              "ctx": null,
              "_testId": "urn:uuid:a86d351c-acaa-4593-936f-1e390735acfc",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"@context\" items are not strings."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44676,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 135,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidType of invalidTypes) {\n          copyVc.type = invalidType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "lz5sANCqpX0BnTRgYhVCO",
              "ctx": null,
              "_testId": "urn:uuid:864b36a2-601e-48ba-8744-054595b6fa8b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"type\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44812,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 161,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"type\" items are not strings.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypeItemTypes = [[], {}, null, undefined, 10, true];\n        for(const invalidItemType of invalidTypeItemTypes) {\n          copyVc.type = [invalidItemType];\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "lz5sANCqpX0BnTRgYhVCO",
              "ctx": null,
              "_testId": "urn:uuid:4fc6ce70-dc3a-4214-a843-916c5fbb9f00",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"type\" items are not strings."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44973,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 119,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" is not an object or a string.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidIssuerTypes = [[], null, undefined, 10, true];\n          for(const invalidIssuerType of invalidIssuerTypes) {\n            copyVc.issuer = invalidIssuerType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "lz5sANCqpX0BnTRgYhVCO",
              "ctx": null,
              "_testId": "urn:uuid:8157e60b-dfea-487f-989f-d7696b88d71d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"issuer\" is not an object or a string."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 45092,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 117,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" is not an object.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidCredentialSubjectTypes = [\n            'string', null, undefined, 10, true, []\n          ];\n          for(const invalidType of invalidCredentialSubjectTypes) {\n            copyVc.credentialSubject = invalidType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "lz5sANCqpX0BnTRgYhVCO",
              "ctx": null,
              "_testId": "urn:uuid:68df32f5-0e8a-43ef-8b2a-53dc26da8e98",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"credentialSubject\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 45209,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 132,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" is not an object.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidProofTypes = ['string', null, undefined, 10, true, []];\n        for(const invalidProofType of invalidProofTypes) {\n          copyVc.proof = invalidProofType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "lz5sANCqpX0BnTRgYhVCO",
              "ctx": null,
              "_testId": "urn:uuid:0699d108-07c9-44f1-883b-b5defb47b9ea",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"proof\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 45342,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 122,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"SpruceID\"",
              "body": "async function() {\n        const issuer = matchingIssuers.get(issuerNameJWT).issuers.find(\n          issuer => issuer.tags.has('JWT'));\n        validVc = await createInitialVc({issuer});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "lz5sANCqpX0BnTRgYhVCO",
              "ctx": null,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44194,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 36,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "Aqroajp2UP_xVUghoZAyp",
          "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
          "_testId": "urn:uuid:d4907f66-c96c-4578-8fe4-570c3da2ebfb"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "DFzayOk3poa4UmObIjkUZ",
      "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
      "summary": {},
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Verifier",
      "reportData": [],
      "_testId": "urn:uuid:691e8442-a5dd-4b70-930a-1d3a43f5238c",
      "columns": [
        "SpruceID"
      ],
      "rows": [
        {
          "id": "MUST verify a valid VC.",
          "cells": [
            {
              "type": "test",
              "title": "MUST verify a valid VC.",
              "body": "async function() {\n        // this tells the test report which cell in the interop matrix\n        // the result goes in\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const body = createRequestBody({vc: validVc});\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error);\n        should.exist(result);\n        should.exist(result.status);\n        result.status.should.equal(200);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "lz5sANCqpX0BnTRgYhVCO",
              "ctx": null,
              "_testId": "urn:uuid:07f6b039-7ea0-4eea-8ca5-1f1d03b15991",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST verify a valid VC."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44231,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 34,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "MUST not verify if \"@context\" property is missing.",
          "cells": [
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noContextVc = klona(validVc);\n          delete noContextVc['@context'];\n          const body = createRequestBody({vc: noContextVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "lz5sANCqpX0BnTRgYhVCO",
              "ctx": null,
              "_testId": "urn:uuid:793af90d-de16-45e5-8681-b0afbaa41fff",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"@context\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44264,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 51,
              "state": "passed",
              "speed": "medium"
            }
          ]
        },
        {
          "id": "MUST not verify if \"type\" property is missing.",
          "cells": [
            {
              "type": "test",
              "title": "MUST not verify if \"type\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noTypeVc = klona(validVc);\n        delete noTypeVc.type;\n        const body = createRequestBody({vc: noTypeVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "lz5sANCqpX0BnTRgYhVCO",
              "ctx": null,
              "_testId": "urn:uuid:2de491ba-9027-49ed-a41d-250136698431",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44316,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 18,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "MUST not verify if \"issuer\" property is missing.",
          "cells": [
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noIssuerVc = klona(validVc);\n        delete noIssuerVc.issuer;\n        const body = createRequestBody({vc: noIssuerVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "lz5sANCqpX0BnTRgYhVCO",
              "ctx": null,
              "_testId": "urn:uuid:65f8bce1-cdbd-43cd-93f3-7c31e5d6225f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"issuer\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44334,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 21,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "MUST not verify if \"credentialSubject\" property is missing.",
          "cells": [
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noCredentialSubjectVc = klona(validVc);\n          delete noCredentialSubjectVc.credentialSubject;\n          const body = createRequestBody({vc: noCredentialSubjectVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "lz5sANCqpX0BnTRgYhVCO",
              "ctx": null,
              "_testId": "urn:uuid:c90957fe-7417-4d3f-aee2-11eba5844159",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"credentialSubject\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44355,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 19,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "MUST not verify if \"proof\" property is missing.",
          "cells": [
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" property is missing.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const noProofVc = klona(validVc);\n        delete noProofVc.proof;\n        const body = createRequestBody({vc: noProofVc});\n        const {result, error} = await verifier.post({json: body});\n        testBadRequestError({result, error});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "lz5sANCqpX0BnTRgYhVCO",
              "ctx": null,
              "_testId": "urn:uuid:c7056993-3d4a-435f-928b-f8c4c137a028",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"proof\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44374,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 33,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "MUST not verify if \"proof.type\" property is missing.",
          "cells": [
            {
              "type": "test",
              "title": "MUST not verify if \"proof.type\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofTypeVc = klona(validVc);\n          delete noProofTypeVc.proof.type;\n          const body = createRequestBody({vc: noProofTypeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "lz5sANCqpX0BnTRgYhVCO",
              "ctx": null,
              "_testId": "urn:uuid:d1d1eddd-7669-4368-a110-8cb3234fd0b8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"proof.type\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44407,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 21,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "MUST not verify if \"proof.created\" property is missing.",
          "cells": [
            {
              "type": "test",
              "title": "MUST not verify if \"proof.created\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofCreatedVc = klona(validVc);\n          delete noProofCreatedVc.proof.created;\n          const body = createRequestBody({vc: noProofCreatedVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "lz5sANCqpX0BnTRgYhVCO",
              "ctx": null,
              "_testId": "urn:uuid:5ec04775-b5ff-4763-a61e-5814823e4e66",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"proof.created\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44432,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 37,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Wed, 27 Nov 2024 20:30:32 GMT', 'content-type': 'application/json', 'content-length': '46', connection: 'keep-alive', 'cf-cache-status': 'DYNAMIC', server: 'cloudflare', 'cf-ray': '8e94e06a2b980617-IAD', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Wed, 27 Nov 2024 20:30:32 GMT', 'content-type': 'application/json', 'content-length': '46', connection: 'keep-alive', 'cf-cache-status': 'DYNAMIC', server: 'cloudflare', 'cf-ray': '8e94e06a2b980617-IAD', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at testBadRequestError (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/helpers.js:12:14)\n    at Context.<anonymous> (file:///home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js:141:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ]
        },
        {
          "id": "MUST not verify if \"proof.verificationMethod\" property is missing.",
          "cells": [
            {
              "type": "test",
              "title": "MUST not verify if \"proof.verificationMethod\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofVerificationMethodVc = klona(validVc);\n          delete noProofVerificationMethodVc.proof.verificationMethod;\n          const body = createRequestBody({vc: noProofVerificationMethodVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "lz5sANCqpX0BnTRgYhVCO",
              "ctx": null,
              "_testId": "urn:uuid:1d8833b1-bbdd-4174-b122-bdf8a53a4dd7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"proof.verificationMethod\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44470,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 18,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "MUST not verify if \"proof.proofValue\" property is missing.",
          "cells": [
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofValue\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofValueVc = klona(validVc);\n          delete noProofValueVc.proof.proofValue;\n          const body = createRequestBody({vc: noProofValueVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "lz5sANCqpX0BnTRgYhVCO",
              "ctx": null,
              "_testId": "urn:uuid:00663ecc-a339-4db1-9789-69db7c291716",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"proof.proofValue\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44488,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 18,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "MUST not verify if \"proof.proofPurpose\" property is missing.",
          "cells": [
            {
              "type": "test",
              "title": "MUST not verify if \"proof.proofPurpose\" property is missing.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const noProofPurposeVc = klona(validVc);\n          delete noProofPurposeVc.proof.proofPurpose;\n          const body = createRequestBody({vc: noProofPurposeVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "lz5sANCqpX0BnTRgYhVCO",
              "ctx": null,
              "_testId": "urn:uuid:06717499-a1fb-4d2e-8a56-ad3b47723ed8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"proof.proofPurpose\" property is missing."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44507,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 19,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "MUST not verify if \"@context\" is not an array.",
          "cells": [
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidContextTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidContextType of invalidContextTypes) {\n          copyVc['@context'] = invalidContextType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "lz5sANCqpX0BnTRgYhVCO",
              "ctx": null,
              "_testId": "urn:uuid:671ffa47-0e98-45c0-bdeb-fad462fc0972",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"@context\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44526,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 151,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "MUST not verify if \"@context\" items are not strings.",
          "cells": [
            {
              "type": "test",
              "title": "MUST not verify if \"@context\" items are not strings.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidContextItemTypes = [[], {}, null, undefined, 10, true];\n          for(const invalidContextItemType of invalidContextItemTypes) {\n            copyVc['@context'] = [invalidContextItemType];\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "lz5sANCqpX0BnTRgYhVCO",
              "ctx": null,
              "_testId": "urn:uuid:a86d351c-acaa-4593-936f-1e390735acfc",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"@context\" items are not strings."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44676,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 135,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "MUST not verify if \"type\" is not an array.",
          "cells": [
            {
              "type": "test",
              "title": "MUST not verify if \"type\" is not an array.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypes = ['string', {}, null, undefined, 10, true];\n        for(const invalidType of invalidTypes) {\n          copyVc.type = invalidType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "lz5sANCqpX0BnTRgYhVCO",
              "ctx": null,
              "_testId": "urn:uuid:864b36a2-601e-48ba-8744-054595b6fa8b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"type\" is not an array."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44812,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 161,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "MUST not verify if \"type\" items are not strings.",
          "cells": [
            {
              "type": "test",
              "title": "MUST not verify if \"type\" items are not strings.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidTypeItemTypes = [[], {}, null, undefined, 10, true];\n        for(const invalidItemType of invalidTypeItemTypes) {\n          copyVc.type = [invalidItemType];\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "lz5sANCqpX0BnTRgYhVCO",
              "ctx": null,
              "_testId": "urn:uuid:4fc6ce70-dc3a-4214-a843-916c5fbb9f00",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"type\" items are not strings."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44973,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 119,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "MUST not verify if \"issuer\" is not an object or a string.",
          "cells": [
            {
              "type": "test",
              "title": "MUST not verify if \"issuer\" is not an object or a string.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidIssuerTypes = [[], null, undefined, 10, true];\n          for(const invalidIssuerType of invalidIssuerTypes) {\n            copyVc.issuer = invalidIssuerType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "lz5sANCqpX0BnTRgYhVCO",
              "ctx": null,
              "_testId": "urn:uuid:8157e60b-dfea-487f-989f-d7696b88d71d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"issuer\" is not an object or a string."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 45092,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 117,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "MUST not verify if \"credentialSubject\" is not an object.",
          "cells": [
            {
              "type": "test",
              "title": "MUST not verify if \"credentialSubject\" is not an object.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: verifierName,\n            rowId: this.test.title\n          };\n          const copyVc = klona(validVc);\n          const invalidCredentialSubjectTypes = [\n            'string', null, undefined, 10, true, []\n          ];\n          for(const invalidType of invalidCredentialSubjectTypes) {\n            copyVc.credentialSubject = invalidType;\n            const body = createRequestBody({vc: copyVc});\n            const {result, error} = await verifier.post({json: body});\n            testBadRequestError({result, error});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "lz5sANCqpX0BnTRgYhVCO",
              "ctx": null,
              "_testId": "urn:uuid:68df32f5-0e8a-43ef-8b2a-53dc26da8e98",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"credentialSubject\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 45209,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 132,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "MUST not verify if \"proof\" is not an object.",
          "cells": [
            {
              "type": "test",
              "title": "MUST not verify if \"proof\" is not an object.",
              "body": "async function() {\n        this.test.cell = {\n          columnId: verifierName,\n          rowId: this.test.title\n        };\n        const copyVc = klona(validVc);\n        const invalidProofTypes = ['string', null, undefined, 10, true, []];\n        for(const invalidProofType of invalidProofTypes) {\n          copyVc.proof = invalidProofType;\n          const body = createRequestBody({vc: copyVc});\n          const {result, error} = await verifier.post({json: body});\n          testBadRequestError({result, error});\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/11-vc-jwt.js",
              "parent": "lz5sANCqpX0BnTRgYhVCO",
              "ctx": null,
              "_testId": "urn:uuid:0699d108-07c9-44f1-883b-b5defb47b9ea",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST not verify if \"proof\" is not an object."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 45342,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 122,
              "state": "passed",
              "speed": "slow"
            }
          ]
        }
      ]
    },
    {
      "title": "Verify Presentation - Data Integrity",
      "ctx": null,
      "suites": [],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "DFzayOk3poa4UmObIjkUZ",
      "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/12-vp-di.js",
      "summary": {},
      "matrix": true,
      "report": true,
      "columns": [],
      "rows": []
    },
    {
      "title": "Verify Presentation - JWT",
      "ctx": null,
      "suites": [],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "DFzayOk3poa4UmObIjkUZ",
      "file": "/home/runner/work/vc-api-verifier-test-suite/vc-api-verifier-test-suite/tests/13-vp-jwt.js",
      "summary": {},
      "matrix": true,
      "report": true,
      "columns": [],
      "rows": []
    },
    {
      "title": "At Risk",
      "rowLabel": "Statement",
      "columnLabel": "Reason",
      "columns": [
        "At least 2 passing implementations"
      ],
      "rows": [
        {
          "id": "MUST verify a valid VC.",
          "cells": [
            {
              "state": "failed"
            }
          ]
        },
        {
          "id": "MUST not verify if \"@context\" property is missing.",
          "cells": [
            {
              "state": "failed"
            }
          ]
        },
        {
          "id": "MUST not verify if \"type\" property is missing.",
          "cells": [
            {
              "state": "failed"
            }
          ]
        },
        {
          "id": "MUST not verify if \"issuer\" property is missing.",
          "cells": [
            {
              "state": "failed"
            }
          ]
        },
        {
          "id": "MUST not verify if \"credentialSubject\" property is missing.",
          "cells": [
            {
              "state": "failed"
            }
          ]
        },
        {
          "id": "MUST not verify if \"proof\" property is missing.",
          "cells": [
            {
              "state": "failed"
            }
          ]
        },
        {
          "id": "MUST not verify if \"proof.type\" property is missing.",
          "cells": [
            {
              "state": "failed"
            }
          ]
        },
        {
          "id": "MUST not verify if \"proof.created\" property is missing.",
          "cells": [
            {
              "state": "failed"
            }
          ]
        },
        {
          "id": "MUST not verify if \"proof.verificationMethod\" property is missing.",
          "cells": [
            {
              "state": "failed"
            }
          ]
        },
        {
          "id": "MUST not verify if \"proof.proofValue\" property is missing.",
          "cells": [
            {
              "state": "failed"
            }
          ]
        },
        {
          "id": "MUST not verify if \"proof.proofPurpose\" property is missing.",
          "cells": [
            {
              "state": "failed"
            }
          ]
        },
        {
          "id": "MUST not verify if \"@context\" is not an array.",
          "cells": [
            {
              "state": "failed"
            }
          ]
        },
        {
          "id": "MUST not verify if \"@context\" items are not strings.",
          "cells": [
            {
              "state": "failed"
            }
          ]
        },
        {
          "id": "MUST not verify if \"type\" is not an array.",
          "cells": [
            {
              "state": "failed"
            }
          ]
        },
        {
          "id": "MUST not verify if \"type\" items are not strings.",
          "cells": [
            {
              "state": "failed"
            }
          ]
        },
        {
          "id": "MUST not verify if \"issuer\" is not an object or a string.",
          "cells": [
            {
              "state": "failed"
            }
          ]
        },
        {
          "id": "MUST not verify if \"credentialSubject\" is not an object.",
          "cells": [
            {
              "state": "failed"
            }
          ]
        },
        {
          "id": "MUST not verify if \"proof\" is not an object.",
          "cells": [
            {
              "state": "failed"
            }
          ]
        }
      ]
    }
  ],
  "tables": [],
  "summary": [],
  "respecConfig": {
    "specStatus": "unofficial",
    "shortName": "vc-api-verifier-test-suite",
    "subtitle": "Test Interoperability Report for Verifiable Credentials API Verifier",
    "github": "https://github.com/w3c-ccg/vc-api-verifier-test-suite",
    "edDraftURI": "https://w3c-ccg.github.io/vc-api/#verify-credential",
    "doJsonLd": true,
    "includePermalinks": false,
    "editors": [
      {
        "name": "Tashi D. Gyeltshen",
        "url": "https://github.com/JSAssassin",
        "company": "Digital Bazaar",
        "companyURL": "http://digitalbazaar.com/"
      }
    ],
    "authors": [
      {
        "name": "Tashi D. Gyeltshen",
        "url": "https://github.com/JSAssassin",
        "company": "Digital Bazaar",
        "companyURL": "http://digitalbazaar.com/"
      },
      {
        "name": "Manu Sporny",
        "url": "http://manu.sporny.org/",
        "company": "Digital Bazaar",
        "companyURL": "http://digitalbazaar.com/"
      }
    ]
  },
  "title": "VC API Verifier Interoperability Report 1.0",
  "stats": [
    "Tests passed 163/198 82%",
    "Tests failed 35/198 18%",
    "Failures 35",
    "Tests skipped 0",
    "Total tests 198"
  ],
  "statusMarkLabels": {
    "pending": {
      "icon": "🚫",
      "label": "Pending"
    },
    "passed": {
      "icon": "✓",
      "label": "Passed"
    },
    "failed": {
      "icon": "❌",
      "label": "Failed"
    },
    "accessDenied": {
      "icon": "⊘",
      "label": "Access Denied"
    },
    "timeout": {
      "icon": "⏱",
      "label": "Timeout"
    },
    "notImplemented": {
      "icon": "—",
      "label": "Not Implemented"
    }
  }
}